define('core/js/wait',[],function() {

     var Wait = Backbone.Controller.extend({

        initialize: function() {
            _.bindAll(this, 'begin', 'end');
        },

        _waitCount: 0,
        _callbackHandle: null,
        _timeoutHandlerId: null,
        _timeoutInSeconds: 7,

        /**
         * Returns true if there are items in the waiting count.
         * 
         * @return {Boolean}
         */
        isWaiting: function() {
            return (this._waitCount !== 0);
        },

        /**
         * Starts or re-starts a timer to ensure that pending calls to end()
         * are actually executed after a timeout period.
         */
        startTimer: function() {
            this.stopTimer();

            this._timeoutHandlerId = setInterval(function() {
                // Flush Adapt.wait due to timeout
                while (this._waitCount > 0) {
                    // Trigger an end() for anything waiting.
                    this.end();
                }
  
                if (this._waitCount === 0) {
                    this.stopTimer();
                }
            }.bind(this), this._timeoutInSeconds * 1000)
        },

        /**
         * Clears the timer.
         */
        stopTimer: function() {
            if (this._timeoutHandlerId) {
                clearInterval(this._timeoutHandlerId);
            }
        },

        /**
         * Add one item to the waiting count.
         * 
         * @return {Object}
         */
        begin: function() {

            if (!this.isWaiting()) {
                this.trigger('wait');
            }

            this._waitCount++;

            if (this._callbackHandle) {
                clearTimeout(this._callbackHandle);
                this._callbackHandle = null;
            }

            this.startTimer();

            return this;

        },

        /**
         * Remove an item from the waiting count and trigger ready asynchronously if no more items are waiting.
         * 
         * @return {Object}
         */
        end: function() {

            if (!this.isWaiting()) {
                return this;
            }

            this._waitCount--;

            if (this._waitCount === 0) {
                this.stopTimer();
            }

            if (this.isWaiting()) {
                return this;
            }
            
            if (this._callbackHandle) {
                return this;
            }

            this._callbackHandle = setTimeout(function() {

                this._callbackHandle = null;
                this.trigger('ready');

            }.bind(this), 0);

            return this;

        },

        /**
         * Queue this function until all open waits have been ended.
         * 
         * @param  {Function} callback
         * @return {Object}
         */
        queue: function(callback) {

            this.begin();
            this.once('ready', callback);
            this.end();

            return this;

        },

        /**
         * Wait for this asynchronous function to execute before triggering ready event.
         * 
         * @param  {Function} callback   [ Function to execute whilst holding queued callback. Once complete run first argument, done(). ]
         * @return {Object}
         */
        for: function(callback) {

            this.begin();
            _.defer(function() {
                callback(_.once(this.end));
            }.bind(this));

            return this;

        }

    });

    return Wait;

});

define('core/js/models/lockingModel',[],function() {

	var set = Backbone.Model.prototype.set;

	_.extend(Backbone.Model.prototype, {

		set: function(attrName, attrVal, options) {
			var stopProcessing = !this.lockedAttributes || typeof attrName === "object" || typeof attrVal !== "boolean" || !this.isLocking(attrName);
			if (stopProcessing) return set.apply(this, arguments);
			
			options = options || {};

			var isSettingValueForSpecificPlugin = options && options.pluginName;
			if (!isSettingValueForSpecificPlugin) {
				console.error("Must supply a pluginName to change a locked attribute");
				options.pluginName = "compatibility";
			}

			var pluginName  = options.pluginName;
			if (this.defaults[attrName] !== undefined) {
				this.lockedAttributes[attrName] = !this.defaults[attrName];
			}
			var lockingValue = this.lockedAttributes[attrName];
			var isAttemptingToLock = (lockingValue === attrVal);

			if (isAttemptingToLock) {

				this.setLockState(attrName, true, {pluginName:pluginName, skipcheck: true});

				//console.log(options.pluginName, "locking", attrName, "on", this.get("_id"));
				return set.call(this, attrName, lockingValue);

			}

			this.setLockState(attrName, false, {pluginName:pluginName, skipcheck: true});

			var totalLockValue = this.getLockCount(attrName, {skipcheck: true});
			//console.log(options.pluginName, "attempting to unlock", attrName, "on", this.get("_id"), "lockValue", totalLockValue, this._lockedAttributesValues[attrName]);
			if (totalLockValue === 0) {
				//console.log(options.pluginName, "unlocking", attrName, "on", this.get("_id"));
				return set.call(this, attrName, !lockingValue);
			}

			return this;

		},

		setLocking: function(attrName, defaultLockValue) {
			if (this.isLocking(attrName)) return;
			if (!this.lockedAttributes) this.lockedAttributes = {};
			this.lockedAttributes[attrName] = defaultLockValue;
		},

		unsetLocking: function(attrName) {
			if (!this.isLocking(attrName)) return;
			if (!this.lockedAttributes) return;
			delete this.lockedAttributes[attrName];
			delete this._lockedAttributesValues[attrName];
			if (_.keys(this.lockedAttributes).length === 0) {
				delete this.lockedAttributes;
				delete this._lockedAttributesValues;
			}
		},

		isLocking: function(attrName) {
			var isCheckingGeneralLockingState = (attrName === undefined);
			var isUsingLockedAttributes = (this.lockedAttributes !== undefined);

			if (isCheckingGeneralLockingState) {
				return isUsingLockedAttributes;
			}

			if (!isUsingLockedAttributes) return false;

			var isAttributeALockingAttribute = this.lockedAttributes[attrName] !== undefined;
			if (!isAttributeALockingAttribute) return false;

			if (this._lockedAttributesValues === undefined) {
				this._lockedAttributesValues = {};
			}

			if (this._lockedAttributesValues[attrName] === undefined) {
				this._lockedAttributesValues[attrName] = {};	
			}

			return true;
		},

		isLocked: function(attrName, options) {
			var shouldSkipCheck = (options && options.skipcheck);
			if (!shouldSkipCheck) { 
				var stopProcessing =  !this.isLocking(attrName);
				if (stopProcessing) return;
			}

			return this.getLockCount(attrName) > 0;
		},

		getLockCount: function(attrName, options) {
			var shouldSkipCheck = (options && options.skipcheck);
			if (!shouldSkipCheck) { 
				var stopProcessing =  !this.isLocking(attrName);
				if (stopProcessing) return;
			}

			var isGettingValueForSpecificPlugin = options && options.pluginName;
			if (isGettingValueForSpecificPlugin) {

				return this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;
			}

			var lockingAttributeValues = _.values(this._lockedAttributesValues[attrName]);
			var lockingAttributeValuesSum = _.reduce(lockingAttributeValues, function(sum, value){ return sum + (value ? 1 : 0); }, 0);
			
			return lockingAttributeValuesSum;
		},

		setLockState: function(attrName, value, options) {
			var shouldSkipCheck = (options && options.skipcheck);
			if (!shouldSkipCheck) { 
				var stopProcessing =  !this.isLocking(attrName);
				if (stopProcessing) return this;
			}

			var isSettingValueForSpecificPlugin = options && options.pluginName;
			if (!isSettingValueForSpecificPlugin) {
				console.error("Must supply a pluginName to set a locked attribute lock value");
				options.pluginName = "compatibility";
			}

			if (value) {
				this._lockedAttributesValues[attrName][options.pluginName] = value;
			} else {
				delete this._lockedAttributesValues[attrName][options.pluginName];
			}

			return this;

		}

	});

});

define('core/js/adapt',[
    'core/js/wait',
    'core/js/models/lockingModel'
], function(Wait) {

    var Adapt = Backbone.Model.extend({

        loadScript: window.__loadScript,
        location: {},
        componentStore: {},

        defaults: {
            _canScroll: true, //to stop scrollTo behaviour,
            _outstandingCompletionChecks: 0,
            _pluginWaitCount:0,
            _isStarted: false
        },

        lockedAttributes: {
            _canScroll: false
        },

        init: function() {
            this.trigger('adapt:preInitialize');

            //wait until no more completion checking
            this.deferUntilCompletionChecked(function() {

                //start adapt in a full restored state
                this.trigger('adapt:start');

                if (!Backbone.History.started) {
                    Backbone.history.start();
                }

                this.set('_isStarted', true);

                this.trigger('adapt:initialize');

            }.bind(this));
        },

        initialize: function () {
            this.setupWait();
        },

        /**
         * call when entering an asynchronous completion check
         */
        checkingCompletion: function() {
            var outstandingChecks = this.get('_outstandingCompletionChecks');
            this.set('_outstandingCompletionChecks', ++outstandingChecks);
        },

        /**
         * call when exiting an asynchronous completion check
         */
        checkedCompletion: function() {
            var outstandingChecks = this.get('_outstandingCompletionChecks');
            this.set('_outstandingCompletionChecks', --outstandingChecks);
        },

        /**
         * wait until there are no outstanding completion checks
         * @param {Function} callback Function to be called after all completion checks have been completed
         */
        deferUntilCompletionChecked: function(callback) {
            if (this.get('_outstandingCompletionChecks') === 0) return callback();

            var checkIfAnyChecksOutstanding = function(model, outstandingChecks) {
                if (outstandingChecks !== 0) return;

                this.off('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);

                callback();
            };

            this.on('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);

        },

        setupWait: function() {

            this.wait = new Wait();

            // Setup legacy events and handlers
            var beginWait = function () {
                this.log.warn("DEPRECATED - Use Adapt.wait.begin() as Adapt.trigger('plugin:beginWait') may be removed in the future");
                this.wait.begin();
            }.bind(this);

            var endWait = function() {
                this.log.warn("DEPRECATED - Use Adapt.wait.end() as Adapt.trigger('plugin:endWait') may be removed in the future");
                this.wait.end();
            }.bind(this);

            var ready = function() {

                if (this.wait.isWaiting()) {
                    return;
                }

                var isEventListening = (this._events['plugins:ready']);
                if (!isEventListening) {
                    return;
                }

                this.log.warn("DEPRECATED - Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future");
                this.trigger('plugins:ready');

            }.bind(this);

            this.listenTo(this.wait, 'ready', ready);
            this.listenTo(this, {
                'plugin:beginWait': beginWait,
                'plugin:endWait': endWait
            });

        },

        isWaitingForPlugins: function() {
            this.log.warn("DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future");
            return this.wait.isWaiting();
        },

        checkPluginsReady: function() {
            this.log.warn("DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future");
            if (this.isWaitingForPlugins()) {
                return;
            }
            this.trigger('plugins:ready');
        },

        /**
         * Allows a selector to be passed in and Adapt will navigate to this element
         * @param {string} selector CSS selector of the Adapt element you want to navigate to e.g. `".co-05"`
         * @param {object} [settings] The settings for the `$.scrollTo` function (See https://github.com/flesler/jquery.scrollTo#settings).
         * You may also include a `replace` property that you can set to `true` if you want to update the URL without creating an entry in the browser's history.
         */
        navigateToElement: function(selector, settings) {
            settings = (settings || {});

            // Removes . symbol from the selector to find the model
            var currentModelId = selector.replace(/\./g, '');
            var currentModel = this.data.findById(currentModelId);
            // Get current page to check whether this is the current page
            var currentPage = (currentModel._siblings === 'contentObjects') ? currentModel : currentModel.findAncestor('contentObjects');

            // If current page - scrollTo element
            if (currentPage.get('_id') === this.location._currentId) {
                return this.scrollTo(selector, settings);
            }

            // If the element is on another page navigate and wait until pageView:ready is fired
            // Then scrollTo element
            this.once('pageView:ready', _.debounce(function() {
                this.router.set('_shouldNavigateFocus', true);
                this.scrollTo(selector, settings);
            }.bind(this), 1));

            var shouldReplaceRoute = settings.replace || false;

            this.router.set('_shouldNavigateFocus', false);
            Backbone.history.navigate('#/id/' + currentPage.get('_id'), {trigger: true, replace: shouldReplaceRoute});
        },

        /**
         * Used to register components with the Adapt 'component store'
         * @param {string} name The name of the component to be registered
         * @param {object} object Object containing properties `model` and `view` or (legacy) an object representing the view
         */
        register: function(name, object) {
            if (this.componentStore[name]) {
                throw Error('The component "' + name + '" already exists in your project');
            }

            if (object.view) {
                //use view+model object
                if(!object.view.template) object.view.template = name;
            } else {
                //use view object
                if(!object.template) object.template = name;
            }

            this.componentStore[name] = object;

            return object;
        },

        /**
         * Fetches a component view class from the componentStore. For a usage example, see either HotGraphic or Narrative
         * @param {string} name The name of the componentView you want to fetch e.g. `"hotgraphic"`
         * @returns {ComponentView} Reference to the view class
         */
        getViewClass: function(name) {
            var object = this.componentStore[name];
            if (!object) {
                throw Error('The component "' + name + '" doesn\'t exist in your project');
            }
            return object.view || object;
        },

        /**
         * Looks up which collection a model belongs to
         * @param {string} id The id of the item you want to look up e.g. `"co-05"`
         * @return {string} One of the following (or `undefined` if not found):
         * - "course"
         * - "contentObjects"
         * - "blocks"
         * - "articles"
         * - "components"
         */
        mapById: function(id) {
            return this.data.mapById(id);
        },

        /**
         * Looks up a model by its `_id` property
         * @param {string} id The id of the item e.g. "co-05"
         * @return {Backbone.Model}
         */
        findById: function(id) {
            return this.data.findById(id);
        },

        findViewByModelId: function(id) {
            var model = this.data.findById(id);
            if (!model) return;

            if (model === this.parentView.model) return this.parentView;

            var idPathToView = [id];
            var currentLocationId = this.location._currentId;
            var currentLocationModel = _.find(model.getAncestorModels(), function(model) {
                var modelId = model.get('_id');
                if (modelId === currentLocationId) return true;
                idPathToView.unshift(modelId);
            });

            if (!currentLocationModel) {
                return console.warn('Adapt.findViewByModelId() unable to find view for model id: ' + id);
            }

            var foundView = _.reduce(idPathToView, function(view, currentId) {
                return view && view.childViews && view.childViews[currentId];
            }, this.parentView);

            return foundView;
        },

        /**
         * Relative strings describe the number and type of hops in the model hierarchy
         * @param {string} relativeString "@component +1" means to move one component forward from the current model
         * This function would return the following:
         * {
         *     type: "component",
         *     offset: 1
         * }
         * Trickle uses this function to determine where it should scrollTo after it unlocks
         */
        parseRelativeString: function(relativeString) {
            if (relativeString[0] === '@') {
                relativeString = relativeString.substr(1);
            }

            var type = relativeString.match(/(component|block|article|page|menu)/);
            if (!type) {
                this.log.error('Adapt.parseRelativeString() could not match relative type', relativeString);
                return;
            }
            type = type[0];

            var offset = parseInt(relativeString.substr(type.length).trim()||0);
            if (isNaN(offset)) {
                this.log.error('Adapt.parseRelativeString() could not parse relative offset', relativeString);
                return;
            }

            return {
                type: type,
                offset: offset
            };

        },

        remove: function() {
            this.trigger('preRemove');
            this.trigger('remove');
            _.defer(this.trigger.bind(this), 'postRemove');
        }

    });

    return new Adapt();
});

define('core/js/a11y/browserFocus',[
    'core/js/adapt'
], function(Adapt) {

    /**
     * Browser modifications to focus handling.
     * @class
     */
    var BrowserFocus = Backbone.Controller.extend({

        initialize: function() {
            _.bindAll(this, '_onBlur', '_onClick');
            this.$body = $('body');
            this.listenTo(Adapt, {
                'accessibility:ready': this._attachEventListeners
            });
        },

        _attachEventListeners: function() {
            this.$body
                .on('blur', '*', this._onBlur)
                .on('blur', this._onBlur);
            // 'Capture' event attachment for click
            this.$body[0].addEventListener('click', this._onClick, true);
        },

        /**
         * When any element in the document receives a blur event,
         * check to see if it needs the `data-a11y-force-focus` attribute removing
         * and check to see if it was blurred because a disabled attribute was added.
         * If a disabled attribute was added, the focus will be moved forward.
         *
         * @param {JQuery.Event} event
         */
        _onBlur: function(event) {
            var config = Adapt.a11y.config;
            if (!config._isEnabled || !config._options._isFocusNextOnDisabled) {
                return
            }
            var $element = $(event.target);
            if ($element.is('[data-a11y-force-focus]')) {
                _.defer(function() {
                    $element.removeAttr('tabindex data-a11y-force-focus');
                });
            }
            // From here, only check source elements
            if (event.target !== event.currentTarget) {
                return;
            }
            // Check if element losing focus is losing focus
            // due to the addition of a disabled class
            if (!$element.is('[disabled]')) {
                return;
            }
            // Move focus to next readable element
            Adapt.a11y.focusNext($element);
        },

        /**
         * Force focus when clicked on a tabbable element,
         * making sure `document.activeElement` is updated.
         *
         * @param {JQuery.Event} event
         */
        _onClick: function(event) {
            var config = Adapt.a11y.config;
            if (!config._isEnabled || !config._options._isFocusOnClickEnabled) {
                return;
            }
            var $element = $(event.target);
            var $stack = $().add($element).add($element.parents());
            var $focusable = $stack.filter(config._options._tabbableElements);
            if (!$focusable.length) {
                return;
            }
            // Force focus for screen reader enter / space press
            $focusable[0].focus();
        }

    });

    return BrowserFocus;

});

define('core/js/a11y/focusOptions',[],function() {

    /**
     * Options parser for focus functions.
     * @class
     */
    var FocusOptions = function(options) {
        _.defaults(this, options, {

            /**
             * Stops the browser from scrolling to the focused point.
             * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
             *
             * @type {boolean}
             */
            preventScroll: true,

            /**
             * Add a defer to the focus call, allowing for user interface settling.
             *
             * @type {boolean}
             */
            defer: false

        });
    };

    return FocusOptions;

});
define('core/js/a11y/keyboardFocusOutline',[
    'core/js/adapt'
], function(Adapt) {

    /**
     * Manages whether or not the focus outline should be entirely removed
     * or removed until a key is pressed on a tabbable element.
     * @class
     */
    var KeyboardFocusOutline = Backbone.Controller.extend({

        initialize: function() {
            _.bindAll(this, '_onKeyDown');
            this.$html = $('html');
            this.showOnKeys = {
                9: true, // tab
                13: true, // enter
                32: true, // space
                37: true, // arrow left
                38: true, // arrow up
                39: true, // arrow right
                40: true // arrow down
            };
            this.listenTo(Adapt, {
                'accessibility:ready': this._attachEventListeners
            });
        },

        _attachEventListeners: function() {
            document.addEventListener('keydown', this._onKeyDown);
            this._start();
        },

        /**
         * Add styling classes if required.
         */
        _start: function() {
            var config = Adapt.a11y.config;
            if (config._options._isFocusOutlineDisabled) {
                this.$html.addClass('a11y-disable-focusoutline');
                return;
            }
            if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled) {
                return;
            }
            this.$html.addClass('a11y-disable-focusoutline');
        },

        /**
         * Handle key down events for on a tabbable element.
         *
         * @param {JQuery.Event} event
         */
        _onKeyDown: function(event) {
            var config = Adapt.a11y.config;
            if (config._options._isFocusOutlineDisabled) {
                this.$html.addClass('a11y-disable-focusoutline');
                return;
            }
            if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled || !this.showOnKeys[event.keyCode]) {
                return;
            }
            var $element = $(event.target);
            if (!$element.is(config._options._tabbableElements) || $element.is(config._options._focusOutlineKeyboardOnlyIgnore)) {
                return;
            }
            this.$html.removeClass('a11y-disable-focusoutline');
        }

    });

    return KeyboardFocusOutline;

});

define('core/js/a11y/log',[
    'core/js/adapt'
], function(Adapt) {

    /**
     * Controller for managing accessibilty logging, specifically used for
     * controlling the display of removed or deprecated API warnings.
     */
    var Log = Backbone.Controller.extend({

        _warned: {},

        _hasWarned: function(args) {
            var config = Adapt.a11y.config;
            if (!config._options._warnFirstOnly) {
                return false;
            }
            var hash = _.map(args, String).join(':');
            if (this._warned[hash]) {
                return true;
            }
            this._warned[hash] = true;
            return false;
        },

        _canWarn: function() {
            var config = Adapt.a11y.config;
            return Boolean(config._options._warn);
        },

        removed: function() {
            if (!this._canWarn) {
                return;
            }
            var args = Array.prototype.slice.call(arguments);
            if (this._hasWarned(args)) {
                return;
            }
            Adapt.log.warn.apply(Adapt.log, ['A11Y REMOVED:'].concat(args));
            return this;
        },

        deprecated: function() {
            if (!this._canWarn) {
                return;
            }
            var args = Array.prototype.slice.call(arguments);
            if (this._hasWarned(args)) {
                return;
            }
            Adapt.log.warn.apply(Adapt.log, ['A11Y DEPRECATED:'].concat(args));
            return this;
        }

    });

    return Log;

});

define('core/js/a11y/scroll',[],function() {

    /**
     * Controller for blocking scroll events on specified elements.
     * @class
     */
    var Scroll = Backbone.Controller.extend({

        initialize: function() {
            _.bindAll(this, '_onTouchStart', '_onTouchEnd', '_onScrollEvent', '_onKeyDown');
            this._scrollDisabledElements = $([]);
            this.$window = $(window);
            this.$body = $('body');
            this._preventScrollOnKeys = {
                37: true, // left
                38: true, // up
                39: true, // right
                40: true // down
            };
            this._ignoreKeysOnElementsMatching = 'textarea, input, select';
            this._isRunning = false;
            this._touchStartEventObject = null;
        },

        /**
         * Block scrolling on the given elements.
         *
         * @param {Object|string|Array} $elements
         */
        disable: function($elements) {
            $elements = $($elements);
            this._scrollDisabledElements = this._scrollDisabledElements.add($elements);
            this._checkRunning();
            return this;
        },

        /**
         * Stop blocking scrolling on the given elements.
         *
         * @param {Object|string|Array} $items
         */
        enable: function($elements) {
            $elements = $($elements);
            if (!$elements || !$elements.length) {
                this.clear();
                return this;
            }
            this._scrollDisabledElements = this._scrollDisabledElements.not($elements);
            this._checkRunning();
            return this;
        },

        /**
         * Stop blocking all scrolling.
         */
        clear: function() {
            this._scrollDisabledElements = $([]);
            this._checkRunning();
            return this;
        },

        /**
         * Start or stop listening for events to block if and when needed.
         */
        _checkRunning: function() {
            if (!this._scrollDisabledElements.length) {
                this._stop();
                return;
            }
            this._start();
        },

        /**
         * Start listening for events to block.
         */
        _start: function() {
            if (this._isRunning) {
                return;
            }
            this._isRunning = true;
            window.addEventListener('touchstart', this._onTouchStart); // mobile
            window.addEventListener('touchend', this._onTouchEnd); // mobile
            window.addEventListener('touchmove', this._onScrollEvent, { passive: false }); // mobile
            window.addEventListener('wheel', this._onScrollEvent, { passive: false });
            document.addEventListener('wheel', this._onScrollEvent, { passive: false });
            document.addEventListener('keydown', this._onKeyDown);
        },

        /**
         * Capture the touchstart event object for deltaY calculations.
         *
         * @param {JQuery.Event} event
         */
        _onTouchStart: function(event) {
            event = $.event.fix(event);
            this._touchStartEventObject = event;
            return true;
        },

        /**
         * Clear touchstart event object.
         */
        _onTouchEnd: function() {
            this._touchStartEventObject = null;
            return true;
        },

        /**
         * Process a native scroll event.
         *
         * @param {JQuery.Event} event
         */
        _onScrollEvent: function(event) {
            event = $.event.fix(event);
            return this._preventScroll(event);
        },

        /**
         * Process a native keydown event.
         *
         * @param {JQuery.Event} event
         */
        _onKeyDown: function(event) {
            event = $.event.fix(event);
            if (!this._preventScrollOnKeys[event.keyCode]) {
                return;
            }
            var $target = $(event.target);
            if ($target.is(this._ignoreKeysOnElementsMatching)) {
                return;
            }
            return this._preventScroll(event);
        },

        /**
         * Process jquery event object.
         *
         * @param {JQuery.Event} event
         */
        _preventScroll: function(event) {
            var $target = $(event.target);
            if (this._scrollDisabledElements.length) {
                var scrollingParent = this._getScrollingParent(event, $target);
                if (scrollingParent.filter(this._scrollDisabledElements).length === 0) {
                    this.$window.scroll();
                    return;
                }
            }
            event.preventDefault();
            return false;
        },

        /**
         * Return the parent which will be scrolling from the current scroll event.
         *
         * @param {JQuery.Event} event
         * @param {Object} $target jQuery element object.
         */
        _getScrollingParent: function(event, $target) {
            var isTouchEvent = event.type == 'touchmove';
            var hasTouchStartEvent = (this._touchStartEventObject && this._touchStartEventObject.originalEvent);
            if (isTouchEvent && !hasTouchStartEvent) {
                return $target;
            }
            var directionY = this._getScrollDirection(event);
            if (directionY === 'none') {
                return this.$body;
            }
            var parents = $target.parents();
            for (var i = 0, l = parents.length; i < l; i++) {
                var $parent = $(parents[i]);
                if ($parent.is('body')) {
                    return this.$body;
                }
                if (!this._isScrollable($parent)) {
                    continue;
                }
                if (!this._isScrolling($parent, directionY)) {
                    continue;
                }
                return $parent;
            }
            return this.$body;
        },

        /**
         * Returns true if the specified target is scrollable.
         *
         * @param {Object} $target jQuery element object.
         * @returns {boolean}
         */
        _isScrollable: function($target) {
            var scrollType = $target.css('overflow-y');
            if (scrollType !== 'auto' && scrollType !== 'scroll') {
                return false;
            }
            var pointerEvents = $target.css('pointer-events');
            if (pointerEvents === 'none') {
                return false;
            }
            return true;
        },

        /**
         * Returns true if the specified target is the scrolling target.
         *
         * @param {Object} $target jQuery element object.
         * @param {string} directionY 'none' | 'up' | 'down'
         *
         * @returns {boolean}
         */
        _isScrolling: function($target, directionY) {
            var scrollTop = Math.ceil($target.scrollTop());
            var innerHeight = $target.outerHeight();
            var scrollHeight = $target[0].scrollHeight;
            var hasScrollingSpace = false;
            switch (directionY) {
                case 'down':
                    hasScrollingSpace = scrollTop + innerHeight < scrollHeight;
                    if (hasScrollingSpace) {
                        return true;
                    }
                    break;
                case 'up':
                    hasScrollingSpace = scrollTop > 0;
                    if (hasScrollingSpace) {
                        return true;
                    }
                    break;
            }
            return false;
        },

        /**
         * Returns the vertical direction of scroll.
         *
         * @param {JQuery.Event} event
         * @returns {string} 'none' | 'up' | 'down'
         */
        _getScrollDirection: function(event) {
            var deltaY = this._getScrollDelta(event);
            if (deltaY === 0) {
                return 'none';
            }
            return deltaY > 0 ? 'up' : 'down';
        },

        /**
         * Returns the number of pixels which is intended to be scrolled.
         *
         * @param {JQuery.Event} event
         * @returns {number}
         */
        _getScrollDelta: function(event) {
            var deltaY = 0;
            var isTouchEvent = event.type == 'touchmove';
            var originalEvent = event.originalEvent;
            if (isTouchEvent) {
                // Touch events
                // iOS previous + current scroll pos
                var startOriginalEvent = this._touchStartEventObject.originalEvent;
                var currentY = originalEvent.pageY;
                var previousY = startOriginalEvent.pageY;
                if (currentY === 0 || currentY == previousY) {
                    // Android chrome current scroll pos
                    currentY = originalEvent.touches[0].pageY;
                    previousY = startOriginalEvent.touches[0].pageY;
                }
                // Touch: delta calculated from touchstart pos vs touchmove pos
                deltaY = currentY - previousY;
            } else {
                // Mouse events
                var hasDeltaY = (originalEvent.wheelDeltaY || originalEvent.deltaY !== undefined);
                if (hasDeltaY) {
                    // Desktop: Firefox & IE delta inverted
                    deltaY = -originalEvent.deltaY;
                } else {
                    // Desktop: Chrome & Safari wheel delta
                    deltaY = (originalEvent.wheelDelta || 0);
                }
            }
            return deltaY;
        },

        /**
         * Stop listening for events to block.
         */
        _stop: function() {
            if (!this._isRunning) {
                return;
            }
            this._isRunning = false;
            window.removeEventListener('touchstart', this._onTouchStart); // mobile
            window.removeEventListener('touchend', this._onTouchEnd); // mobile
            // shouldn't need to supply 3rd arg when removing, but IE11 won't remove the event listener if you don't - see https://github.com/adaptlearning/adapt_framework/issues/2466
            window.removeEventListener('touchmove', this._onScrollEvent, { passive: false }); // mobile
            window.removeEventListener('wheel', this._onScrollEvent, { passive: false });
            document.removeEventListener('wheel', this._onScrollEvent, { passive: false });
            document.removeEventListener('keydown', this._onKeyDown);
        }

    });

    return Scroll;

});

define('core/js/a11y/wrapFocus',[
    'core/js/adapt'
], function(Adapt) {

    /**
     * Controller for managing tab wrapping for popups.
     * @class
     */
    var WrapFocus = Backbone.Controller.extend({

        initialize: function() {
            _.bindAll(this, '_onWrapAround');
            this.listenTo(Adapt, {
                'accessibility:ready': this._attachEventListeners
            });
        },

        _attachEventListeners: function() {
            var config = Adapt.a11y.config;
            $('body').on('click focus', config._options._focusguard, this._onWrapAround);
        },

        /**
         * If click or focus is received on any element with the focusguard class,
         * loop focus around to the top of the document.
         *
         * @param {JQuery.Event} event
         */
        _onWrapAround: function(event) {
            var config = Adapt.a11y.config;
            if (!config._isEnabled || !config._options._isPopupWrapFocusEnabled) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            Adapt.a11y.focusFirst('body', { defer: false });
        }

    });

    return WrapFocus;

});

define('core/js/a11y/popup',[
    'core/js/adapt'
], function(Adapt) {

    /**
     * Tabindex and aria-hidden manager for popups.
     * @class
     */
    var Popup = Backbone.Controller.extend({

        /**
         * List of elements which form the base at which elements are generally tabbale
         * and aria-hidden='false'.
         *
         * @type {Array<Object>}
         */
        _floorStack: [$('body')],
        /**
         * List of elements to return the focus to once leaving each stack.
         *
         * @type {Array<Object>}
         */
        _focusStack: [],
        /**
         * Hash of tabindex states for each tabbable element in the popup stack.
         *
         * @type {Object}
         */
        _tabIndexes: {},
        /**
         * Hash of aria-hidden states for each tabbable element in the popup stack.
         *
         * @type {Object}
         */
        _ariaHiddens: {},
        /**
         * Incremented unique ids for elements belonging to a popup stack with saved
         * states,
         */
        _elementUIDIndex: 0,

        initialize: function() {
            this.listenTo(Adapt, {
                'popup:opened': function($element, ignoreInternalTrigger) {
                    if (ignoreInternalTrigger) {
                        return;
                    }
                    Adapt.a11y.log.deprecated('Adapt.trigger("popup:opened", $element) is replaced with Adapt.a11y.popupOpened($element);');
                    this.opened($element, true);
                },
                'popup:closed': function($target, ignoreInternalTrigger) {
                    if (ignoreInternalTrigger) {
                        return;
                    }
                    Adapt.a11y.log.deprecated('Adapt.trigger("popup:closed", $target) is replaced with Adapt.a11y.popupClosed($target);');
                    this.closed($target, true);
                }
            });
        },

        /**
         * Reorganise the tabindex and aria-hidden attributes in the document to
         * restrict user interaction to the element specified.
         *
         * @param {Object} [$popupElement] Element encapulating the popup.
         * @returns {Object} Returns `Adapt.a11y._popup`.
         */
        opened: function($popupElement, silent) {
            // Capture currently active element or element specified
            $popupElement = $popupElement || $(document.activeElement);
            this._addPopupLayer($popupElement);
            if (!silent) {
                Adapt.trigger('popup:opened', $popupElement, true);
            }
            return this;
        },

        /**
         * Restrict tabbing and screen reader access to selected element only.
         *
         * @param {Object} $popupElement Element encapulating the popup.
         */
        _addPopupLayer: function($popupElement) {
            $popupElement = $($popupElement);
            var config = Adapt.a11y.config;
            if (!config._isEnabled || !config._options._isPopupManagementEnabled || $popupElement.length === 0) {
                return $popupElement;
            }
            this._floorStack.push($popupElement);
            this._focusStack.push($(document.activeElement));
            var $elements = $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
            var $branch = $popupElement.add($popupElement.parents());
            var $siblings = $branch.siblings().filter(config._options._tabbableElementsExcludes);
            $elements = $elements.add($siblings);
            $elements.each(function(index, item) {
                var $item = $(item);
                var elementUID;
                if (item.a11y_uid == undefined) {
                    item.a11y_uid = 'UID' + ++this._elementUIDIndex;
                }
                elementUID = item.a11y_uid;
                if (this._tabIndexes[elementUID] === undefined) {
                    this._tabIndexes[elementUID] = [];
                }
                if (this._ariaHiddens[elementUID] === undefined) {
                    this._ariaHiddens[elementUID] = [];
                }
                var tabindex = $item.attr('tabindex');
                var ariaHidden = $item.attr('aria-hidden');
                this._tabIndexes[elementUID].push( tabindex === undefined ? '' : tabindex );
                this._ariaHiddens[elementUID].push( ariaHidden === undefined ? '' : ariaHidden);
                if (config._options._isPopupTabIndexManagementEnabled) {
                    $item.attr('tabindex', -1);
                }
                if (config._options._isPopupAriaHiddenManagementEnabled) {
                    $item.attr('aria-hidden', true);
                }
            }.bind(this));
            var $items = $popupElement.find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
            if (config._options._isPopupTabIndexManagementEnabled) {
                $items.attr('tabindex', 0);
            }
            if (config._options._isPopupAriaHiddenManagementEnabled) {
                $items
                    .removeAttr('aria-hidden')
                    .removeClass('aria-hidden')
                    .parents(config._options._ariaHiddenExcludes)
                    .removeAttr('aria-hidden')
                    .removeClass('aria-hidden');
            }
        },

        /**
         * Close the last popup on the stack, restoring tabindex and aria-hidden
         * attributes.
         *
         * @param {Object} [$focusElement] Element at which to move focus.
         * @returns {Object} Returns `Adapt.a11y._popup`.
         */
        closed: function($focusElement, silent) {
            var $previousFocusElement = this._removeLastPopupLayer();
            $focusElement = $focusElement || $previousFocusElement || $('body');
            if (!silent) {
                Adapt.trigger('popup:closed', $focusElement, true);
            }
            Adapt.a11y.focusFirst($($focusElement));
            return this;
        },

        /**
         * Restores tabbing and screen reader access to the state before the last
         * `_addPopupLayer` call.
         *
         * @returns {Object} Returns previously active element.
         */
        _removeLastPopupLayer: function() {
            var config = Adapt.a11y.config;
            if (!config._isEnabled || !config._options._isPopupManagementEnabled) {
                return $(document.activeElement);
            }
            // the body layer is the first element and must always exist
            if (this._floorStack.length <= 1) {
                return;
            }
            this._floorStack.pop();
            $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes).each(function(index, item) {
                var $item = $(item);
                var previousTabIndex = '';
                var previousAriaHidden = '';
                var elementUID;
                if (item.a11y_uid == undefined) {
                    //assign element a unique id
                    item.a11y_uid = 'UID' + ++this._elementUIDIndex;
                }
                elementUID = item.a11y_uid;
                if (this._tabIndexes[elementUID] !== undefined && this._tabIndexes[elementUID].length !== 0) {
                    //get previous tabindex if saved
                    previousTabIndex = this._tabIndexes[elementUID].pop();
                    previousAriaHidden = this._ariaHiddens[elementUID].pop();
                }
                if (this._tabIndexes[elementUID] !== undefined && this._tabIndexes[elementUID].length === 0) {
                    //delete element tabindex store if empty
                    delete this._tabIndexes[elementUID];
                    delete this._ariaHiddens[elementUID];
                }
                if (config._options._isPopupTabIndexManagementEnabled) {
                    if (previousTabIndex === '') {
                        $item.removeAttr('tabindex');
                    } else {
                        $item.attr({
                            'tabindex': previousTabIndex
                        });
                    }
                }
                if (config._options._isPopupAriaHiddenManagementEnabled) {
                    if (previousAriaHidden === '') {
                        $item.removeAttr('aria-hidden');
                    } else {
                        $item.attr({
                            'aria-hidden': previousAriaHidden
                        });
                    }
                }
            }.bind(this));
            return (document.activeElement = this._focusStack.pop());
        },

        /**
         * When a popup is open, this function makes it possible to swap the element
         * that should receive focus on popup close.
         *
         * @param {Object} $focusElement Set a new element to focus on.
         * @returns {Object} Returns previously set focus element.
         */
        setCloseTo: function($focusElement) {
            var $original = this._focusStack.pop();
            this._focusStack.push($focusElement);
            return $original;
        }

    });

    return Popup;

});

define('core/js/a11y/deprecated',[
    'core/js/adapt'
], function(Adapt) {

    /**
     * The old API is rerouted to the new API with warnings.
     */

    _.extend($.fn, {

        isFixedPostion: function() {
            Adapt.a11y.log.removed('$("..").isFixedPostion was unneeded and has been removed, let us know if you need it back.');
            return false;
        },

        a11y_aria_label: function() {
            Adapt.a11y.log.removed('$("..").a11y_aria_label was incorrect behaviour.');
            return this;
        },

        limitedScrollTo: function() {
            Adapt.a11y.log.removed('$.limitedScrollTo had no impact on the screen reader cursor.');
            return this;
        },

        a11y_text: function() {
            Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
            return this;
        },

        a11y_selected: function() {
            Adapt.a11y.log.removed('$("..").a11y_selected is removed. Please use aria-live instead.');
            return this;
        },

        a11y_on: function(isOn) {
            Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.findTabbable($element); and Adapt.a11y.toggleAccessible($elements, isAccessible); instead.');
            var $tabbable = Adapt.a11y.findTabbable(this);
            Adapt.a11y.toggleAccessible($tabbable, isOn);
            return this;
        },

        a11y_only: function() {
            Adapt.a11y.log.removed('$("..").a11y_only, use Adapt.a11y.popupOpened($popupElement); instead.');
            return this;
        },

        scrollDisable: function() {
            if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
                return this;
            }
            Adapt.a11y.log.deprecated('$("..").scrollDisable, use Adapt.a11y.scrollDisable($elements); instead.');
            Adapt.a11y.scrollDisable(this);
            return this;
        },

        scrollEnable: function() {
            if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
                return this;
            }
            Adapt.a11y.log.deprecated('$("..").scrollEnable, use Adapt.a11y.scrollEnable($elements); instead.');
            Adapt.a11y.scrollEnable(this);
            return this;
        },

        a11y_popup: function() {
            Adapt.a11y.log.deprecated('$("..").a11y_popup, use Adapt.a11y.popupOpened($popupElement); instead.');
            return Adapt.a11y.popupOpened(this);
        },

        a11y_cntrl: function(isOn, withDisabled) {
            Adapt.a11y.log.deprecated('$("..").a11y_cntrl, use Adapt.a11y.toggleAccessible($elements, isAccessible); and if needed Adapt.a11y.toggleEnabled($elements, isEnabled); instead.');
            Adapt.a11y.toggleAccessible(this, isOn);
            if (withDisabled) Adapt.a11y.toggleEnabled(this, isOn);
            return this;
        },

        a11y_cntrl_enabled: function(isOn) {
            Adapt.a11y.log.deprecated('$("..").a11y_cntrl_enabled, use Adapt.a11y.toggleAccessibleEnabled($elements, isAccessibleEnabled); instead.');
            Adapt.a11y.toggleAccessibleEnabled(this, isOn);
            return this;
        },

        isReadable: function() {
            Adapt.a11y.log.deprecated('$("..").isReadable, use Adapt.a11y.isReadable($element); instead.');
            return Adapt.a11y.isReadable(this);
        },

        findForward: function(selector) {
            Adapt.a11y.log.removed('$("..").findForward has been removed as the use cases are very small, let us know if you need it back.');
            return Adapt.a11y._findFirstForward(this, selector);
        },

        findWalk: function(selector) {
            Adapt.a11y.log.removed('$("..").findWalk has been removed as the use cases are very small, let us know if you need it back.');
            return Adapt.a11y._findFindForwardDescendant(this, selector);
        },

        focusNoScroll: function() {
            Adapt.a11y.log.deprecated('$("..").focusNoScroll, use Adapt.a11y.focus($element); instead.');
            return Adapt.a11y.focus(this);
        },

        focusNext: function(returnOnly) {
            Adapt.a11y.log.deprecated('$("..").focusNext, use Adapt.a11y.focusNext($element); or if needed Adapt.a11y.findFirstReadable($element); instead.');
            if (returnOnly) {
                return Adapt.a11y.findFirstReadable(this);
            }
            return Adapt.a11y.focusNext(this);
        },

        focusOrNext: function(returnOnly) {
            Adapt.a11y.log.deprecated('$("..").focusOrNext, use Adapt.a11y.focusFirst($element); or if needed Adapt.a11y.findFirstReadable($element); or Adapt.a11y.isReadable($element); instead.');
            if (returnOnly) {
                if (Adapt.a11y.isReadable(this)) return this;
                return Adapt.a11y.findFirstReadable(this);
            }
            return Adapt.a11y.focusFirst(this);
        },

        a11y_focus: function(dontDefer) {
            Adapt.a11y.log.deprecated('$("..").a11y_focus, use Adapt.a11y.focusFirst($element, { defer: true }); instead.');
            Adapt.a11y.focusFirst(this, { defer: !dontDefer });
            return this;
        }

    });

    _.extend($, {

        a11y_alert: function() {
            Adapt.a11y.log.removed('$.a11y_alert is removed. Please use aria-live instead.');
            return this;
        },

        a11y_update: function() {
            Adapt.a11y.log.removed('a11y_update is no longer required.');
            return this;
        },

        a11y_text: function (text) {
            Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
            return text;
        },

        a11y_on: function(isOn, selector) {
            Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.toggleHidden($elements, isHidden); instead.');
            return Adapt.a11y.toggleHidden(selector, !isOn);
        },

        a11y_popdown: function($focusTarget) {
            Adapt.a11y.log.removed('$.a11y_popdown, use Adapt.a11y.popupClosed($focusTarget); instead.');
            return Adapt.a11y.popupClosed($focusTarget);
        },

        a11y_focus: function(dontDefer) {
            Adapt.a11y.log.deprecated('$.a11y_focus, use Adapt.a11y.focusFirst("body", { defer: true }); instead.');
            Adapt.a11y.focusFirst('body', { defer: !dontDefer });
            return this;
        },

        a11y_normalize: function(html) {
            Adapt.a11y.log.deprecated('$.a11y_normalize, use Adapt.a11y.normalize("html"); instead.');
            return Adapt.a11y.normalize(html);
        },

        a11y_remove_breaks: function(html) {
            Adapt.a11y.log.deprecated('$.a11y_remove_breaks, use Adapt.a11y.removeBreaks("html"); instead.');
            return Adapt.a11y.removeBreaks(html);
        }

    });

});

define('core/js/a11y',[
    'core/js/adapt',
    './a11y/browserFocus',
    './a11y/focusOptions',
    './a11y/keyboardFocusOutline',
    './a11y/log',
    './a11y/scroll',
    './a11y/wrapFocus',
    './a11y/popup',
    './a11y/deprecated'
], function(Adapt, BrowserFocus, FocusOptions, KeyboardFocusOutline, Log, Scroll, WrapFocus, Popup) {

    var A11y = Backbone.Controller.extend({

        $html: $('html'),
        _htmlCharRegex: /&.*;/g,

        config: null,
        defaults: {

            _isFocusOutlineKeyboardOnlyEnabled: true,
            /**
             * `_isFocusOutlineDisabled` ignores `_isEnabled` and can be used when all other
             * accessibility features have been disabled.
             */
            _isFocusOutlineDisabled: false,
            _isFocusAssignmentEnabled: true,
            _isFocusOnClickEnabled: true,
            _isFocusNextOnDisabled: true,
            _isScrollDisableEnabled: true,
            _isAriaHiddenManagementEnabled: true,
            _isPopupManagementEnabled: true,
            _isPopupWrapFocusEnabled: true,
            _isPopupAriaHiddenManagementEnabled: true,
            _isPopupTabIndexManagementEnabled: true,
            /**
             * Do not change aria-hidden on these elements.
             */
            _ariaHiddenExcludes: ':not(#wrapper):not(body)',
            _tabbableElements: 'a,button,input,select,textarea,[tabindex]:not([data-a11y-force-focus])',
            _focusOutlineKeyboardOnlyIgnore: 'input,textarea',
            /**
             * Designate these elements as not tabbable.
             */
            _tabbableElementsExcludes: ':not(.a11y-ignore):not([data-a11y-force-focus])',
            _focusableElements: 'a,button,input,select,textarea,[tabindex],label',
            _readableElements: '[role=heading],[aria-label],[aria-labelledby],[alt]',
            /**
             * Selector for elements which cause tab wrapping.
             */
            _focusguard: '.a11y-focusguard',
            /**
             * Specifies all stylistic elements.
             */
            _wrapStyleElements: 'b,i,abbr,strong,em,small,sub,sup,ins,del,mark,zw,nb',

            /**
             * Logging settings
             */
            _warnFirstOnly: true,
            _warn: true

        },

        _browserFocus: new BrowserFocus(),
        _keyboardFocusOutline: new KeyboardFocusOutline(),
        _wrapFocus: new WrapFocus(),
        _popup: new Popup(),
        _scroll: new Scroll(),

        log: new Log(),

        initialize: function() {
            this._removeLegacyElements();
            this.listenToOnce(Adapt, {
                'app:dataLoaded': this._onDataLoaded,
                'navigationView:postRender': this._removeLegacyElements
            }, this);
            Adapt.on('device:changed', this._setupNoSelect);
            this.listenTo(Adapt, {
                'router:location': this._onNavigationStart,
                'pageView:ready menuView:ready router:plugin': this._onNavigationEnd
            });
        },

        _onDataLoaded: function() {
            this.config = Adapt.config.get('_accessibility');
            this.config._isActive = false;
            this.config._options = _.defaults(this.config._options || {}, this.defaults);
            Adapt.offlineStorage.set('a11y', false);
            this.$html.toggleClass('accessibility', this.isEnabled());
            this._setupNoSelect();
            this._addFocuserDiv();
            if (this._isReady) {
                return;
            }
            this._isReady = true;
            Adapt.trigger('accessibility:ready');
        },

        _setupNoSelect: function() {
            if (!this.config || !this.config._disableTextSelectOnClasses) {
                return;
            }
            var classes = this.config._disableTextSelectOnClasses.split(' ');
            var isMatch = false;
            for (var i = 0, item; item = classes[i++];) {
                if (this.$html.is(item)) {
                    isMatch = true;
                    break;
                }
            }
            this.$html.toggleClass('no-select', isMatch);
        },

        _addFocuserDiv: function() {
            if ($('#a11y-focuser').length) {
                return;
            }
            $('body').append($('<div id="a11y-focuser" class="a11y-ignore" tabindex="-1" role="presentation">&nbsp;</div>'));
        },

        _removeLegacyElements: function() {
            var $legacyElements = $('body').children('#accessibility-toggle, #accessibility-instructions');
            var $navigationElements = $('.navigation').find('#accessibility-toggle, #accessibility-instructions');
            if (!$legacyElements.length && !$navigationElements.length) {
                return;
            }
            Adapt.log.warn('REMOVED: #accessibility-toggle and #accessibility-instructions have been removed. Please remove them from all of your .html files.');
            $legacyElements.remove();
            $navigationElements.remove();
        },

        _onNavigationStart: function() {
            if (!this.isEnabled()) {
                return;
            }
            // Stop document reading
            _.defer(function() {
                Adapt.a11y.toggleHidden('.page, .menu', true);
            });
        },

        _onNavigationEnd: function(view) {
            // Prevent sub-menu items provoking behaviour
            if ((view && view.model && view.model.get('_id') !== Adapt.location._currentId) || !this.isEnabled())  {
                return;
            }
            // Allow document to be read
            Adapt.a11y.toggleHidden('.page, .menu', false);
        },

        isActive: function() {
            this.log.removed('Accessibility is now always active when enabled. Please unify your user experiences.');
            return false;
        },

        isEnabled: function() {
            return this.config && this.config._isEnabled;
        },

        /**
         * Adds or removes `aria-hidden` attribute to elements.
         *
         * @param {Object|string|Array} $elements
         * @param {boolean} [isHidden=true]
         * @returns {Object} Returns `Adapt.a11y`
         */
        toggleHidden: function($elements, isHidden) {
            $elements = $($elements);
            var config = Adapt.a11y.config;
            if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled) {
                return this;
            }
            isHidden = isHidden === undefined ? true : isHidden;
            if (isHidden === true) {
                $elements.attr('aria-hidden', true);
            } else {
                $elements.removeAttr('aria-hidden');
            }
            return this;
        },

        /**
         * Adds or removes `aria-hidden` and `disabled` attributes and `disabled`
         * classes to elements.
         *
         * @param {Object|string|Array} $elements
         * @param {boolean} [isHidden=true]
         * @returns {Object} Returns `Adapt.a11y`
         */
        toggleAccessibleEnabled: function($elements, isAccessibleEnabled) {
            this.toggleAccessible($elements, isAccessibleEnabled);
            this.toggleEnabled($elements, isAccessibleEnabled);
            return this;
        },

        /**
         * Adds or removes `aria-hidden` attribute and disables `tabindex` on elements.
         *
         * @param {Object|string|Array} $elements
         * @param {boolean} [isReadable=true]
         * @returns {Object} Returns `Adapt.a11y`
         */
        toggleAccessible: function($elements, isReadable) {
            $elements = $($elements);
            var config = Adapt.a11y.config;
            if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled || $elements.length === 0) {
                return this;
            }
            isReadable = isReadable === undefined ? true : isReadable;
            if (!isReadable) {
                $elements.attr({
                    tabindex: '-1',
                    'aria-hidden': 'true'
                }).addClass('aria-hidden');
            } else {
                $elements.removeAttr('aria-hidden tabindex').removeClass('aria-hidden');
                $elements.parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
            }
            return this;
        },

        /**
         * Adds or removes `disabled` attribute and `disabled` class.
         *
         * @param {Object|string|Array} $elements
         * @param {boolean} [isEnabled=true]
         * @returns {Object} Returns `Adapt.a11y`
         */
        toggleEnabled: function($elements, isEnabled) {
            $elements = $($elements);
            if ($elements.length === 0) {
                return this;
            }
            isEnabled = isEnabled === undefined ? true : isEnabled;
            if (!isEnabled) {
                $elements.attr('disabled','disabled').addClass('disabled');
            } else {
                $elements.removeAttr('disabled').removeClass('disabled');
            }
            return this;
        },

        /**
         * Find the first tabbable element after the specified element.
         *
         * @param {Object|string|Array} $element
         * @returns {Object}
         */
        findFirstTabbable: function($element) {
            $element = $($element).first();
            return this._findFirstForward($element, this.isTabbable);
        },

        /**
         * Find the first readable element after the specified element.
         *
         * @param {Object|string|Array} $element
         * @returns {Object}
         */
        findFirstReadable: function($element) {
            $element = $($element).first();
            return this._findFirstForward($element, this.isReadable);
        },

        /**
         * Find all tabbable elements in the specified element.
         *
         * @param {Object|string|Array} $element
         * @returns {Object}
         */
        findTabbable: function($element) {
            var config = Adapt.a11y.config;
            return $($element).find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
        },

        /**
         * Find all readable elements in the specified element.
         *
         * @param {Object|string|Array} $element
         */
        findReadable: function($element) {
            var config = Adapt.a11y.config;
            return $($element).find('*').filter(function(index, element) {
                return this.isReadable(element);
            }.bind(this));
        },

        /**
         * Check if the element is natively or explicitly tabbable.
         *
         * @param {Object|string|Array} $element
         * @returns {boolean|undefined}
         */
        isTabbable: function($element) {
            var config = Adapt.a11y.config;
            var value = $($element).is(config._options._tabbableElements).is(config._options._tabbableElementsExcludes);
            if (!value) {
                return undefined; // Allow _findForward to descend
            }
            return value;
        },

        /**
         * Check if the first item is readable by a screen reader.
         *
         * @param {Object|string|Array} $element
         * @param {boolean} [checkParents=true] Check if parents are inaccessible.
         * @returns {boolean}
         */
        isReadable: function($element, checkParents) {
            var config = Adapt.a11y.config;
            $element = $($element).first();
            checkParents = checkParents === undefined ? true : false;

            var $branch =  checkParents
                ? $element.add($element.parents())
                : $element;

            var isNotVisible = _.find($branch.toArray(), function(item) {
                var $item = $(item);
                // make sure item is not explicitly invisible
                var isNotVisible = $item.css('display') === 'none'
                    || $item.css('visibility') === 'hidden'
                    || $item.attr('aria-hidden') === 'true';
                if (isNotVisible) {
                    return true;
                }
            });
            if (isNotVisible) {
                return false;
            }

            // check that the component is natively tabbable or
            // will be knowingly read by a screen reader
            var hasNativeFocusOrIsScreenReadable = $element.is(config._options._focusableElements)
                || $element.is(config._options._readableElements);
            if (hasNativeFocusOrIsScreenReadable) {
                return true;
            }
            var childNodes = $element[0].childNodes;
            for (var c = 0, cl = childNodes.length; c < cl; c++) {
                var childNode = childNodes[c];
                var isTextNode = (childNode.nodeType === 3);
                if (!isTextNode) {
                    continue;
                }
                var isOnlyWhiteSpace = /^\s*$/.test(childNode.nodeValue);
                if (isOnlyWhiteSpace) {
                    continue;
                }
                return true;
            }
            return undefined; // Allows _findForward to decend.
        },

        /**
         * Find forward in the DOM, descending and ascending to move forward
         * as appropriate.
         *
         * If the selector is a function it should returns true, false or undefined.
         * Returning true matches the item and returns it. Returning false means do
         * not match or descend into this item, returning undefined means do not match,
         * but descend into this item.
         *
         * @param {Object|string|Array} $element
         * @param {string|function|undefined} selector
         * @returns {Object} Returns found descendant.
         */
        _findFirstForward: function($element, selector) {
            $element = $($element).first();

            // make sure iterator is correct, use boolean or selector comparison
            // appropriately
            var iterator;
            switch (typeof selector) {
                case 'string':
                    // make selector iterator
                    iterator = function($tag) {
                        return $tag.is(selector) || undefined;
                    };
                    break;
                case 'function':
                    iterator = selector;
                    break;
                case 'undefined':
                    // find first next element
                    iterator = Boolean;
            }

            if ($element.length === 0) {
                return $element.not('*');
            }

            // check children by walking the tree
            var $found = this._findFirstForwardDescendant($element, iterator);
            if ($found && $found.length) {
                return $found;
            }

            // check subsequent siblings
            var $nextSiblings = $element.nextAll().toArray();
            _.find($nextSiblings, function(sibling) {
                var $sibling = $(sibling);
                var value = iterator($sibling);

                // skip this sibling if explicitly instructed
                if (value === false) {
                    return;
                }

                if (value) {
                    // sibling matched
                    $found = $sibling;
                    return true;
                }

                // check parent sibling children by walking the tree
                $found = this._findFirstForwardDescendant($sibling, iterator);
                if ($found && $found.length) return true;
            }.bind(this));
            if ($found && $found.length) {
                return $found;
            }

            // move through parents towards the body element
            var $branch = $element.add($element.parents()).toArray().reverse();
            _.find($branch, function(parent) {
                var $parent = $(parent);
                if (iterator($parent) === false) {
                    // skip this parent if explicitly instructed
                    return false;
                }

                // move through parents nextAll siblings
                var $siblings = $parent.nextAll().toArray();
                return _.find($siblings, function(sibling) {
                    var $sibling = $(sibling);
                    var value = iterator($sibling);

                    // skip this sibling if explicitly instructed
                    if (value === false) {
                        return;
                    }

                    if (value) {
                        // sibling matched
                        $found = $sibling;
                        return true;
                    }

                    // check parent sibling children by walking the tree
                    $found = this._findFirstForwardDescendant($sibling, iterator);
                    if ($found && $found.length) {
                        return true;
                    }
                }.bind(this));
            }.bind(this));

            if (!$found || !$found.length) {
                return $element.not('*');
            }
            return $found;
        },

        /**
         * Find descendant in a DOM tree, work from selected to branch-end, through allowed
         * branch structures in hierarchy order
         *
         * If the selector is a function it should returns true, false or undefined.
         * Returning true matches the item and returns it. Returning false means do
         * not match or descend into this item, returning undefined means do not match,
         * but descend into this item.
         *
         * @param {Object|string|Array} $element jQuery element to start from.
         * @param {string|function|undefined} selector
         * @returns {Object} Returns found descendant.
         */
        _findFirstForwardDescendant: function($element, selector) {
            $element = $($element).first();

            // make sure iterator is correct, use boolean or selector comparison
            // appropriately
            var iterator;
            switch (typeof selector) {
                case 'string':
                    // make selector iterator
                    iterator = function($tag) {
                        return $tag.is(selector) || undefined;
                    };
                    break;
                case 'function':
                    iterator = selector;
                    break;
                case 'undefined':
                    // find first next element
                    iterator = Boolean;
            }


            var $notFound = $element.not('*');
            if ($element.length === 0) {
                return $notFound;
            }

            // keep walked+passed children in a stack
            var stack = [{
                item: $element[0],
                value: undefined
            }];
            var stackIndexPosition = 0;
            var childIndexPosition = stackIndexPosition+1;
            do {

                var stackEntry = stack[stackIndexPosition];
                var $stackItem = $(stackEntry.item);

                // check current item
                switch (stackEntry.value) {
                    case true:
                        return $stackItem;
                    case false:
                        return $notFound;
                }

                // get i stack children
                var $children = $stackItem.children().toArray();
                _.find($children, function(item) {
                    var $item = $(item);
                    var value = iterator($item);

                    // item explicitly not allowed, don't add to stack,
                    // skip children
                    if (value === false) {
                        return false;
                    }

                    // item passed or readable, add to stack before any parent
                    // siblings
                    stack.splice(childIndexPosition++, 0, {
                        item: item,
                        value: value
                    });
                });

                // move to next stack item
                stackIndexPosition++;
                // keep place to inject children
                childIndexPosition = stackIndexPosition+1;
            } while (stackIndexPosition < stack.length)

            return $notFound;
        },

        /**
         * Assign focus to the next readable element.
         *
         * @param {Object|string|Array} $element
         * @param {FocusOptions} options
         * @returns {Object} Returns `Adapt.a11y`
         */
        focusNext: function($element, options) {
            options = new FocusOptions(options);
            $element = $($element).first();
            $element = Adapt.a11y.findFirstReadable($element);
            this.focus($element, options);
            return this;
        },

        /**
         * Assign focus to either the specified element if it is readable or the
         * next readable element.
         *
         * @param {Object|string|Array} $element
         * @param {FocusOptions} options
         * @returns {Object} Returns `Adapt.a11y`
         */
        focusFirst: function($element, options) {
            options = new FocusOptions(options);
            $element = $($element).first();
            if (Adapt.a11y.isReadable($element)) {
                this.focus($element, options);
                return $element;
            }
            $element = Adapt.a11y.findFirstReadable($element);
            this.focus($element, options);
            return $element;
        },

        /**
         * Force focus to the specified element with/without a defer or scroll.
         *
         * @param {Object|string|Array} $element
         * @param {FocusOptions} options
         * @returns {Object} Returns `Adapt.a11y`
         */
        focus: function($element, options) {
            options = new FocusOptions(options);
            $element = $($element).first();
            var config = Adapt.a11y.config;
            if (!config._isEnabled || !config._options._isFocusAssignmentEnabled || $element.length === 0) {
                return this;
            }
            function perform() {
                if (options.preventScroll) {
                    var y = $(window).scrollTop();
                    try {
                        if ($element.attr('tabindex') === undefined) {
                            $element.attr({
                                'tabindex': '-1',
                                'data-a11y-force-focus': 'true'
                            });
                        }
                        $element[0].focus({
                            preventScroll: true
                        });
                    } catch (e) {
                        // Drop focus errors as only happens when the element
                        // isn't attached to the DOM.
                    }
                    window.scrollTo(null, y);
                } else {
                    $element[0].focus();
                }
            }
            if (options.defer) {
                _.defer(function() {
                    perform();
                }.bind(this));
            } else {
                perform();
            }
            return this;
        },

        /**
         * Used to convert html to text aria-labels.
         *
         * @param {string} htmls Any html strings.
         * @returns {string} Returns text without markup or html encoded characters.
         */
        normalize: function(htmls) {
            var values = Array.prototype.slice.call(arguments, 0);
            values = values.filter(Boolean);
            values = values.filter(_.isString);
            htmls = values.join(' ');
            var text = $('<div>' + htmls + '</div>').html();
            // Remove all html encoded characters, such as &apos;
            return text.replace(this._htmlCharRegex, '');
        },

        /**
         * Removes all html tags except stylistic elements.
         * Useful for producing uninterrupted text for screen readers from
         * any html.
         *
         * @param  {string} htmls Any html strings.
         * @return {string} Returns html string without markup which would cause screen reader to pause.
         */
        removeBreaks: function(htmls) {
            var values = Array.prototype.slice.call(arguments, 0);
            values = values.filter(Boolean);
            values = values.filter(_.isString);
            htmls = values.join(' ');
            var $div = $('<div>' + htmls + '</div>');
            var stack = [ $div[0] ];
            var stackIndex = 0;
            var outputs = [];
            do {
                if (stack[stackIndex].childNodes.length) {
                    var nodes = stack[stackIndex].childNodes;
                    var usable = _.filter(nodes, function(node) {
                        var isTextNode = (node.nodeType === 3);
                        if (isTextNode) {
                            return true;
                        }
                        var isStyleElement = $(node).is(Adapt.a11y.config._options._wrapStyleElements);
                        if (isStyleElement) {
                            return true;
                        }
                        return false;
                    });
                    outputs.push.apply(outputs, usable);
                    stack.push.apply(stack, nodes);
                }
                stackIndex++;
            } while (stackIndex < stack.length)
            var rtnText = '';
            outputs.forEach(function(item) {
                rtnText+=item.outerHTML||item.textContent;
            });
            return rtnText;
        },

        /**
         * @param {Object|string|Array} $elements
         * @returns {Object} Returns `Adapt.a11y`
         */
        scrollEnable: function($elements) {
            this._scroll.enable($elements);
            return this;
        },

        /**
         * @param {Object|string|Array} $elements
         * @returns {Object} Returns `Adapt.a11y`
         */
        scrollDisable: function($elements) {
            this._scroll.disable($elements);
            return this;
        },

        /**
         * To apply accessibilty handling to a tag, isolating the user.
         *
         * @param {Object} $popupElement Element encapsulating the popup.
         * @returns {Object} Returns `Adapt.a11y`
         */
        popupOpened: function($popupElement) {
            this._popup.opened($popupElement);
            return this;
        },

        /**
         * Remove the isolation applied with a call to `popupOpened`.
         *
         * @param {Object} [$focusElement] Element to move focus to.
         * @returns {Object} Returns `Adapt.a11y`
         */
        popupClosed: function($focusElement) {
            this._popup.closed($focusElement);
            return this;
        },

        /**
         * When a popup is open, this function makes it possible to swap the element
         * that should receive focus on popup close.
         *
         * @param {Object} $focusElement Set a new element to focus on.
         * @returns {Object} Returns previously set focus element.
         */
        setPopupCloseTo: function($focusElement) {
            return this._popup.setCloseTo($focusElement);
        }

  });

  return Adapt.a11y = new A11y();

});

define('core/js/accessibility',[
    'core/js/adapt',
    './a11y'
], function(Adapt, a11y) {

    /**
     * Backwards compatibility `Adapt.accessibility` reroutes to `Adapt.a11y`
     * with a warning.
     */
    Object.defineProperty(Adapt, 'accessibility', {

        get: function() {
            a11y.log.deprecated("Adapt.accessibility has moved to Adapt.a11y");
            return Adapt.accessibility = a11y;
        }

    });

});

define('core/js/collections/adaptCollection',[
    'core/js/adapt'
], function(Adapt) {

    var AdaptCollection = Backbone.Collection.extend({
        initialize : function(models, options){
            this.url = options.url;

            this.once('reset', this.loadedData, this);
            if (this.url) {
                this.fetch({
                    reset:true,
                    error: _.bind(function(model, xhr, options) {
                        console.error("ERROR: unable to load file " + this.url);
                    }, this)
                });
            }
        },

        loadedData: function() {
            Adapt.trigger('adaptCollection:dataLoaded');
        }

    });

    return AdaptCollection;

});

define('core/js/modelEvent',[],function() {

    var ModelEvent = Backbone.Controller.extend({

        type: null,
        target: null,
        value: null,
        canBubble: true,
        deepPath: null,
        timeStamp: null,

        /**
         * @param {string} type Event name / type
         * @param {Backbone.Model} target Origin model
         * @param {*} [value] Any value that should be carried through on the event
         */
        initialize: function(type, target, value) {
            this.type = type;
            this.target = target;
            this.value = value;
            this.deepPath = [target];
        },

        stopPropagation: function() {
            this.canBubble = false;
        },

        addPath: function(target) {
            this.deepPath.unshift(target);
        }

    });

    return ModelEvent;

});

define('core/js/enums/logLevelEnum',[],function() {

    // Used to determine if log call should be printed based on log level
    var LOG_LEVEL = ENUM([
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR",
        "FATAL"
    ]);

    return LOG_LEVEL;

});
define('core/js/logging',[
    'core/js/adapt',
    'core/js/enums/logLevelEnum'
], function(Adapt, LOG_LEVEL) {

    var Logging = Backbone.Controller.extend({

        _config: {
            _isEnabled: true,
            _level: LOG_LEVEL.INFO.asLowerCase, // Default log level
            _console: true // Log to console
        },      
        
        initialize: function() {

            Adapt.once('configModel:dataLoaded', this.onLoadConfigData.bind(this));

        },
        
        onLoadConfigData: function() {

            this.loadConfig();

            this.debug('Logging config loaded');

            this.trigger('log:ready');

        },

        loadConfig: function() {

            if (Adapt.config.has('_logging')) {
                this._config = Adapt.config.get('_logging');
            }

            this.checkQueryStringOverride();

        },

        checkQueryStringOverride: function() {

            // Override default log level with level present in query string
            var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);
            if (!matches || matches.length < 2) return;

            var override = LOG_LEVEL(matches[1].toUpperCase());
            if (!override) return;

            this._config._level = override.asLowerCase;
            this.debug('Loglevel override in query string:', this._config._level);
            
        },
        
        debug: function() {            
            this._log(LOG_LEVEL.DEBUG, Array.prototype.slice.call(arguments));
        },
        
        info: function() {
            this._log(LOG_LEVEL.INFO, Array.prototype.slice.call(arguments));
        },
        
        warn: function() {
            this._log(LOG_LEVEL.WARN, Array.prototype.slice.call(arguments));
        },
        
        error: function() {
            this._log(LOG_LEVEL.ERROR, Array.prototype.slice.call(arguments));
        },
        
        fatal: function() {
            this._log(LOG_LEVEL.FATAL, Array.prototype.slice.call(arguments));
        },
        
        _log: function(level, data) {

            var isEnabled = (this._config._isEnabled);
            if (!isEnabled) return;

            var configLevel = LOG_LEVEL(this._config._level.toUpperCase());

            var isLogLevelAllowed = (level >= configLevel);
            if (!isLogLevelAllowed) return;

            this._logToConsole(level, data);

            // Allow error reporting plugins to hook and report to logging systems
            this.trigger('log', level, data);
            this.trigger('log:' + level.asLowerCase, level, data);

        },

        _logToConsole: function(level, data) {

            var shouldLogToConsole = (this._config._console);
            if (!shouldLogToConsole) return;

            var log = [level.asUpperCase + ':'];
            data && log.push.apply(log, data);

            // is there a matching console method we can use e.g. console.error()?
            if(console[level.asLowerCase]) {
                console[level.asLowerCase].apply(console, log);
            } else {
                console.log.apply(console, log);
            }
        }

    });

    Adapt.log = new Logging();
});

define('core/js/models/adaptModel',[
    'core/js/adapt',
    'core/js/modelEvent',
    'core/js/logging'
], function (Adapt, ModelEvent) {

    var AdaptModel = Backbone.Model.extend({

        defaults: {
            _canShowFeedback: true,
            _classes: "",
            _canReset: false,
            _isComplete: false,
            _isInteractionComplete: false,
            _isA11yRegionEnabled: false,
            _isA11yCompletionDescriptionEnabled: true,
            _requireCompletionOf: -1,
            _isEnabled: true,
            _isResetOnRevisit: false,
            _isAvailable: true,
            _isOptional: false,
            _isReady: false,
            _isVisible: true,
            _isLocked: false,
            _isHidden: false
        },

        trackable: [
            '_id',
            '_isComplete',
            '_isInteractionComplete'
        ],

        bubblingEvents: [
            'change:_isComplete',
            'change:_isInteractionComplete'
        ],

        initialize: function () {
            // Wait until data is loaded before setting up model
            this.listenToOnce(Adapt, 'app:dataLoaded', this.setupModel);

        },

        setupModel: function() {
            if (this.get('_type') === 'page') {
                this._children = 'articles';
            }
            if (this._siblings === 'contentObjects' && this.get('_parentId') !== Adapt.course.get('_id')) {
                this._parent = 'contentObjects';
            }
            if (this._children) {
                this.setupChildListeners();
            }

            this.init();

            _.defer(function() {
                if (this._children) {
                    this.checkCompletionStatus();

                    this.checkInteractionCompletionStatus();

                    this.checkLocking();
                }

                this.setupTrackables();

            }.bind(this));

        },

        setupTrackables: function() {

            // Limit state trigger calls and make state change callbacks batched-asynchronous
            var originalTrackableStateFunction = this.triggerTrackableState;
            this.triggerTrackableState = _.compose(
                function() {

                    // Flag that the function is awaiting trigger
                    this.triggerTrackableState.isQueued = true;

                }.bind(this),
                _.debounce(function() {

                    // Trigger original function
                    originalTrackableStateFunction.apply(this);

                    // Unset waiting flag
                    this.triggerTrackableState.isQueued = false;

                }.bind(this), 17)
            );

            // Listen to model changes, trigger trackable state change when appropriate
            this.listenTo(this, "change", function(model, value) {

                // Skip if trigger queued or adapt hasn't started yet
                if (this.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {
                    return;
                }

                // Check that property is trackable
                var trackablePropertyNames = _.result(this, 'trackable', []);
                var changedPropertyNames = _.keys(model.changed);
                var isTrackable = _.find(changedPropertyNames, function(item, index) {
                    return _.contains(trackablePropertyNames, item);
                }.bind(this));

                if (isTrackable) {
                    // Trigger trackable state change
                    this.triggerTrackableState();
                }
            });
        },

        setupChildListeners: function() {
            var children = this.getChildren();
            if (!children.length) {
                return;
            }

            this.listenTo(children, {
                "all": this.onAll,
                "bubble": this.bubble,
                "change:_isReady": this.checkReadyStatus,
                "change:_isComplete": this.onIsComplete,
                "change:_isInteractionComplete": this.checkInteractionCompletionStatus
            });
        },

        init: function() {},

        getTrackableState: function() {

            var trackable = this.resultExtend("trackable", []);
            var json = this.toJSON();

            var args = trackable;
            args.unshift(json);

            return _.pick.apply(_, args);

        },

        setTrackableState: function(state) {

            var trackable = this.resultExtend("trackable", []);

            var args = trackable;
            args.unshift(state);

            state = _.pick.apply(_, args);

            this.set(state);

            return this;

        },

        triggerTrackableState: function() {

            Adapt.trigger("state:change", this, this.getTrackableState());

        },

        reset: function(type, force) {
            if (!this.get("_canReset") && !force) return;

            type = type || true;

            switch (type) {
            case "hard": case true:
                this.set({
                    _isEnabled: true,
                    _isComplete: false,
                    _isInteractionComplete: false
                });
                break;
            case "soft":
                this.set({
                    _isEnabled: true,
                    _isInteractionComplete: false
                });
                break;
            }
        },

        checkReadyStatus: function () {
            // Filter children based upon whether they are available
            // Check if any return _isReady:false
            // If not - set this model to _isReady: true
            var children = this.getAvailableChildModels();
            if (_.find(children, function(child) { return child.get('_isReady') === false; })) {
                return;
            }

            this.set('_isReady', true);
        },

        setCompletionStatus: function() {
            if (!this.get('_isVisible')) return;

            this.set({
                _isComplete: true,
                _isInteractionComplete: true
            });
        },

        checkCompletionStatus: function () {
            //defer to allow other change:_isComplete handlers to fire before cascading to parent
            Adapt.checkingCompletion();
            _.defer(this.checkCompletionStatusFor.bind(this), '_isComplete');
        },

        checkInteractionCompletionStatus: function () {
            //defer to allow other change:_isInteractionComplete handlers to fire before cascading to parent
            Adapt.checkingCompletion();
            _.defer(this.checkCompletionStatusFor.bind(this), '_isInteractionComplete');
        },

        /**
         * Function for checking whether the supplied completion attribute should be set to true or false.
         * It iterates over our immediate children, checking the same completion attribute on any mandatory child
         * to see if enough/all of them them have been completed. If enough/all have, we set our attribute to true;
         * if not, we set it to false.
         * @param {string} [completionAttribute] Either "_isComplete" or "_isInteractionComplete". Defaults to "_isComplete" if not supplied.
         */
        checkCompletionStatusFor: function(completionAttribute) {
            if (!completionAttribute) completionAttribute = "_isComplete";

            var completed = false;
            var children = this.getAvailableChildModels();
            var requireCompletionOf = this.get("_requireCompletionOf");

            if (requireCompletionOf === -1) { // a value of -1 indicates that ALL mandatory children must be completed
                completed = (_.find(children, function(child) {
                    return !child.get(completionAttribute) && !child.get('_isOptional');
                }) === undefined);
            } else {
                completed = (_.filter(children, function(child) {
                    return child.get(completionAttribute) && !child.get('_isOptional');
                }).length >= requireCompletionOf);
            }

            this.set(completionAttribute, completed);

            Adapt.checkedCompletion();
        },

        /**
         * Searches the model's ancestors to find the first instance of the specified ancestor type
         * @param {string} [ancestorType] Valid values are 'course', 'pages', 'contentObjects', 'articles' or 'blocks'.
         * If left blank, the immediate ancestor (if there is one) is returned
         * @return {object} Reference to the model of the first ancestor of the specified type that's found - or `undefined` if none found
         */
        findAncestor: function (ancestorType) {
            var parent = this.getParent();
            if (!parent) return;

            if (ancestorType === 'pages') {
                ancestorType = 'contentObjects';
            }

            if (!ancestorType || this._parent === ancestorType) {
                return parent;
            }

            return parent.findAncestor(ancestorType);
        },

        /**
         * Returns all the descendant models of a specific type
         * @param {string} descendants Valid values are 'contentObjects', 'pages', 'menus', 'articles', 'blocks' or 'components'
         * @param {object} options an object that defines the search type and the properties/values to search on. Currently only the `where` search type (equivalent to `Backbone.Collection.where()`) is supported.
         * @param {object} options.where
         * @return {array}
         * @example
         * //find all available, non-optional components
         * this.findDescendantModels('components', { where: { _isAvailable: true, _isOptional: false }});
         */
        findDescendantModels: function(descendants, options) {

            var types = [
                descendants.slice(0, -1)
            ];
            if (descendants === 'contentObjects') {
                types.push.apply(types, ['page', 'menu']);
            }

            var allDescendantsModels = this.getAllDescendantModels();
            var returnedDescendants = allDescendantsModels.filter(function(model) {
                return _.contains(types, model.get("_type"));
            });

            if (!options) {
                return returnedDescendants;
            }

            if (options.where) {
                return returnedDescendants.filter(function(descendant) {
                    for (var property in options.where) {
                        var value = options.where[property];
                        if (descendant.get(property) !== value) {
                            return false;
                        }
                    }
                    return true;
                });
            }
        },

        /**
         * Fetches the sub structure of a model as a flattened array
         *
         * Such that the tree:
         *  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }
         *
         * will become the array (parent first = false):
         *  [ c1, c2, b1, c3, c4, b2, a1, c5, c6, b3, a2 ]
         *
         * or (parent first = true):
         *  [ a1, b1, c1, c2, b2, c3, c4, a2, b3, c5, c6 ]
         *
         * This is useful when sequential operations are performed on the menu/page/article/block/component hierarchy.
         * @param {boolean} [isParentFirst]
         * @return {array}
         */
        getAllDescendantModels: function(isParentFirst) {

            var descendants = [];

            if (this.get("_type") === "component") {
                descendants.push(this);
                return descendants;
            }

            var children = this.getChildren();

            for (var i = 0, l = children.models.length; i < l; i++) {

                var child = children.models[i];
                if (child.get("_type") === "component") {

                    descendants.push(child);
                    continue;

                }

                var subDescendants = child.getAllDescendantModels(isParentFirst);
                if (isParentFirst === true) {
                    descendants.push(child);
                }

                descendants = descendants.concat(subDescendants);

                if (isParentFirst !== true) {
                    descendants.push(child);
                }

            }

            return descendants;

        },

        /**
         * @deprecated Since v2.2.0 - please use findDescendantModels instead
         */
        findDescendants: function (descendants) {
            Adapt.log.warn("DEPRECATED - Use findDescendantModels() as findDescendants() may be removed in the future");

            // first check if descendant is child and return child
            if (this._children === descendants) {
                return this.getChildren();
            }

            var allDescendants = [];
            var flattenedDescendants;
            var children = this.getChildren();
            var returnedDescendants;

            function searchChildren(children) {
                var models = children.models;
                for (var i = 0, len = models.length; i < len; i++) {
                    var model = models[i];
                    var childrensModels = model.getChildren().models;
                    allDescendants.push(childrensModels);
                    flattenedDescendants = _.flatten(allDescendants);
                }

                returnedDescendants = new Backbone.Collection(flattenedDescendants);

                if (children.models.length === 0 || children.models[0]._children === descendants) {
                    return;
                } else {
                    allDescendants = [];
                    searchChildren(returnedDescendants);
                }
            }

            searchChildren(children);

            // returns a collection of children
            return returnedDescendants;
        },

        /**
         * Returns a relative model from the Adapt hierarchy
         *
         * Such that in the tree:
         *  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }
         *
         *  c1.findRelativeModel("@block +1") = b2;
         *  c1.findRelativeModel("@component +4") = c5;
         *
         * @see Adapt.parseRelativeString for a description of relativeStrings
         * @param {string} relativeString
         * @param {object} options Search configuration settings
         * @param {boolean} options.limitParentId
         * @param {function} options.filter
         * @param {boolean} options.loop
         * @return {array}
         */
        findRelativeModel: function(relativeString, options) {

            var types = [ "menu", "page", "article", "block", "component" ];

            options = options || {};

            var modelId = this.get("_id");
            var modelType = this.get("_type");

            // return a model relative to the specified one if opinionated
            var rootModel = Adapt.course;
            if (options.limitParentId) {
                rootModel = Adapt.findById(options.limitParentId);
            }

            var relativeDescriptor = Adapt.parseRelativeString(relativeString);

            var findAncestorType = (_.indexOf(types, modelType) > _.indexOf(types, relativeDescriptor.type));
            var findSiblingType = (modelType === relativeDescriptor.type);

            var searchBackwards = (relativeDescriptor.offset < 0);
            var moveBy = Math.abs(relativeDescriptor.offset);
            var movementCount = 0;

            var findDescendantType = (!findSiblingType && !findAncestorType);

            if (findDescendantType) {
                // move by one less as first found is considered next
                moveBy--;
            }

            var pageDescendants;
            if (searchBackwards) {
                // parents first [p1,a1,b1,c1,c2,a2,b2,c3,c4,p2,a3,b3,c6,c7,a4,b4,c8,c9]
                pageDescendants = rootModel.getAllDescendantModels(true);

                // reverse so that we don't need a forward and a backward iterating loop
                // reversed [c9,c8,b4,a4,c7,c6,b3,a3,p2,c4,c3,b2,a2,c2,c1,b1,a1,p1]
                pageDescendants.reverse();
            } else {
                // children first [c1,c2,b1,a1,c3,c4,b2,a2,p1,c6,c7,b3,a3,c8,c9,b4,a4,p2]
                pageDescendants = rootModel.getAllDescendantModels(false);
            }

            // filter if opinionated
            if (typeof options.filter === "function") {
                pageDescendants = _.filter(pageDescendants, options.filter);
            }

            // find current index in array
            var modelIndex = _.findIndex(pageDescendants, function(pageDescendant) {
                if (pageDescendant.get("_id") === modelId) {
                    return true;
                }
                return false;
            });

            if (options.loop) {

                // normalize offset position to allow for overflow looping
                var typeCounts = {};
                pageDescendants.forEach(function(model) {
                    var type = model.get("_type");
                    typeCounts[type] = typeCounts[type] || 0;
                    typeCounts[type]++;
                });
                moveBy = moveBy % typeCounts[relativeDescriptor.type];

                // double up entries to allow for overflow looping
                pageDescendants = pageDescendants.concat(pageDescendants.slice(0));

            }

            for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {
                var descendant = pageDescendants[i];
                if (descendant.get("_type") === relativeDescriptor.type) {
                    if (movementCount === moveBy) {
                        return Adapt.findById(descendant.get("_id"));
                    }
                    movementCount++;
                }
            }

            return undefined;
        },

        getChildren: function () {
            if (this.get("_children")) return this.get("_children");

            var childrenCollection;

            if (!this._children) {
                childrenCollection = new Backbone.Collection();
            } else {
                var children = Adapt[this._children].where({_parentId: this.get("_id")});
                childrenCollection = new Backbone.Collection(children);
            }

            if (this.get('_type') == 'block' &&
                childrenCollection.length == 2 &&
                childrenCollection.models[0].get('_layout') !== 'left' &&
                this.get('_sortComponents') !== false) {
                // Components may have a 'left' or 'right' _layout,
                // so ensure they appear in the correct order
                // Re-order component models to correct it
                childrenCollection.comparator = '_layout';
                childrenCollection.sort();
            }

            this.set("_children", childrenCollection);

            return childrenCollection;
        },

        getAvailableChildModels: function() {
            return this.getChildren().where({
                _isAvailable: true
            });
        },

        /**
         * @deprecated since v2.2.0 please use getAvailableChildModels instead
         */
        getAvailableChildren: function() {
            Adapt.log.warn("DEPRECATED - Use getAvailableChildModels() as getAvailableChildren() may be removed in the future");

            return new Backbone.Collection(this.getChildren().where({
                _isAvailable: true
            }));
        },

        getParent: function () {
            if (this.get("_parent")) return this.get("_parent");
            if (this._parent === "course") {
                return Adapt.course;
            }
            var parent = Adapt.findById(this.get("_parentId"));
            this.set("_parent", parent);

            // returns a parent model
            return parent;
        },

        getAncestorModels: function(shouldIncludeChild) {
            var parents = [];
            var context = this;

            if (shouldIncludeChild) parents.push(context);

            while (context.has("_parentId")) {
                context = context.getParent();
                parents.push(context);
            }

            return parents.length ? parents : null;
        },

        /**
         * @deprecated since v2.2.0 please use getAncestorModels instead
         */
        getParents: function(shouldIncludeChild) {
            Adapt.log.warn("DEPRECATED - Use getAncestorModels() as getParents() may be removed in the future");

            var parents = [];
            var context = this;

            if (shouldIncludeChild) parents.push(context);

            while (context.has("_parentId")) {
                context = context.getParent();
                parents.push(context);
            }

            return parents.length ? new Backbone.Collection(parents) : null;
        },

        getSiblings: function (passSiblingsAndIncludeSelf) {
            var siblings;
            if (!passSiblingsAndIncludeSelf) {
                // returns a collection of siblings excluding self
                if (this._hasSiblingsAndSelf === false) {
                    return this.get("_siblings");
                }
                siblings = _.reject(Adapt[this._siblings].where({
                    _parentId: this.get('_parentId')
                }), function (model) {
                    return model.get('_id') == this.get('_id');
                }.bind(this));

                this._hasSiblingsAndSelf = false;

            } else {
                // returns a collection of siblings including self
                if (this._hasSiblingsAndSelf) {
                    return this.get("_siblings");
                }

                siblings = Adapt[this._siblings].where({
                    _parentId: this.get("_parentId")
                });
                this._hasSiblingsAndSelf = true;
            }

            var siblingsCollection = new Backbone.Collection(siblings);
            this.set("_siblings", siblingsCollection);
            return siblingsCollection;
        },

        setOnChildren: function (key, value, options) {

            var args = arguments;

            this.set.apply(this, args);

            if (!this._children) return;

            var children = this.getChildren();
            var models = children.models;
            for (var i = 0, len = models.length; i < len; i++) {
                var child = models[i];
                child.setOnChildren.apply(child, args);
            }

        },

        /**
         * @deprecated since v3.2.3 - please use `model.set('_isOptional', value)` instead
         */
        setOptional: function(value) {
            this.set({_isOptional: value});
        },

        checkLocking: function() {
            var lockType = this.get("_lockType");

            if (!lockType) return;

            switch (lockType) {
                case "sequential":
                    this.setSequentialLocking();
                    break;
                case "unlockFirst":
                    this.setUnlockFirstLocking();
                    break;
                case "lockLast":
                    this.setLockLastLocking();
                    break;
                case "custom":
                    this.setCustomLocking();
                    break;
                default:
                    console.warn("AdaptModel.checkLocking: unknown _lockType \"" +
                        lockType + "\" found on " + this.get("_id"));
            }
        },

        setSequentialLocking: function() {
            var children = this.getAvailableChildModels();

            for (var i = 1, j = children.length; i < j; i++) {
                children[i].set("_isLocked", !children[i - 1].get("_isComplete"));
            }
        },

        setUnlockFirstLocking: function() {
            var children = this.getAvailableChildModels();
            var isFirstChildComplete = children[0].get("_isComplete");

            for (var i = 1, j = children.length; i < j; i++) {
                children[i].set("_isLocked", !isFirstChildComplete);
            }
        },

        setLockLastLocking: function() {
            var children = this.getAvailableChildModels();
            var lastIndex = children.length - 1;

            for (var i = lastIndex - 1; i >= 0; i--) {
                if (!children[i].get("_isComplete")) {
                    return children[lastIndex].set("_isLocked", true);
                }
            }

            children[lastIndex].set("_isLocked", false);
        },

        setCustomLocking: function() {
            var children = this.getAvailableChildModels();

            for (var i = 0, j = children.length; i < j; i++) {
                var child = children[i];

                child.set("_isLocked", this.shouldLock(child));
            }
        },

        shouldLock: function(child) {
            var lockedBy = child.get("_lockedBy");

            if (!lockedBy) return false;

            for (var i = lockedBy.length - 1; i >= 0; i--) {
                var id = lockedBy[i];

                try {
                    var model = Adapt.findById(id);

                    if (!model.get("_isAvailable")) continue;
                    if (!model.get("_isComplete")) return true;
                }
                catch (e) {
                    console.warn("AdaptModel.shouldLock: unknown _lockedBy ID \"" + id +
                        "\" found on " + child.get("_id"));
                }
            }

            return false;
        },

        onIsComplete: function() {
            this.checkCompletionStatus();
            this.checkLocking();
        },

        /**
         * Internal event handler for all module events. Triggers event bubbling
         * through the module hierarchy when the event is included in
         * `this.bubblingEvents`.
         * @param {string} type Event name / type
         * @param {Backbone.Model} model Origin backbone model
         * @param {*} value New property value
         */
        onAll: function(type, model, value) {
            if (!_.contains(this.bubblingEvents, type)) return;
            var event = new ModelEvent(type, model, value);
            this.bubble(event);
        },

        /**
         * Internal event handler for bubbling events.
         * @param {ModelEvent} event
         */
        bubble: function(event) {
            if (!event.canBubble) return;
            event.addPath(this);
            this.trigger("bubble:" + event.type + " bubble", event);
        }

    });

    return AdaptModel;

});

define('core/js/models/articleModel',[
    'core/js/models/adaptModel'
], function (AdaptModel) {

    var ArticleModel = AdaptModel.extend({
        _parent:'contentObjects',
    	_siblings:'articles',
        _children: 'blocks'
    });

    return ArticleModel;

});

define('core/js/models/blockModel',[
    'core/js/models/adaptModel'
], function (AdaptModel) {

    var BlockModel = AdaptModel.extend({
        _parent:'articles',
    	_siblings:'blocks',
        _children: 'components',

        defaults: function() {
            return _.extend({
                _sortComponents: true
            }, AdaptModel.prototype.defaults);
        }
    });

    return BlockModel;

});

define('core/js/models/configModel',[
    'core/js/adapt'
], function (Adapt) {

    var ConfigModel = Backbone.Model.extend({

        defaults: {
            screenSize: {
                small: 520,
                medium: 760,
                large: 1024
            },
            _forceRouteLocking: false,
            _canLoadData: true,
            _disableAnimation: false
        },

        initialize: function(attrs, options) {
            this.url = options.url;
            // Fetch data & if successful trigger event to enable plugins to stop course files loading
            // Then check if course files can load
            // 'configModel:loadCourseData' event starts the core content collections and models being fetched
            this.fetch({
                success: function() {
                    Adapt.trigger('offlineStorage:prepare');

                    Adapt.wait.queue(function() {

                        Adapt.trigger('configModel:dataLoaded');

                        if (this.get('_canLoadData')) {
                            Adapt.trigger('configModel:loadCourseData');
                        }

                        if (this.get('_defaultDirection') === 'rtl'){
                            // We're going to use rtl style
                            $('html').addClass('dir-rtl');
                        }

                        // Check if animations should be disabled
                        var disableAnimationArray = this.get('_disableAnimationFor');
                        if (disableAnimationArray && disableAnimationArray.length > 0) {
                            for (var i = 0; i < disableAnimationArray.length; i++) {
                                if ($("html").is(disableAnimationArray[i])) {
                                    this.set('_disableAnimation', true);
                                    console.log('Animation disabled.');
                                }
                            }
                        }
                    }.bind(this));
                }.bind(this),
                error: function() {
                    console.log('Unable to load course/config.json');
                }
            });
        },

        loadData: function() {

        }

    });

   return ConfigModel;

});

define('core/js/models/contentObjectModel',[
    'core/js/models/adaptModel'
], function (AdaptModel) {

    var ContentObjectModel = AdaptModel.extend({
    	_parent:'course',
    	_siblings:'contentObjects',
        _children: 'contentObjects'
    });

    return ContentObjectModel;
});

define('core/js/models/componentModel',[
    'core/js/models/adaptModel'
], function (AdaptModel) {

    var ComponentModel = AdaptModel.extend({
        _parent:'blocks',
        _siblings:'components',

        defaults: AdaptModel.resultExtend('defaults', {
            _isA11yComponentDescriptionEnabled: true
        }),

        trackable: AdaptModel.resultExtend("trackable", [
            '_userAnswer'
        ])

    });

    return ComponentModel;

});

define('core/js/models/courseModel',[
    'core/js/adapt',
    'core/js/models/adaptModel'
], function (Adapt, AdaptModel) {

    var CourseModel = AdaptModel.extend({

        initialize: function(attrs, options) {
            AdaptModel.prototype.initialize.apply(this, arguments);
            Adapt.trigger('courseModel:dataLoading');

            this.url = options.url;

            this.on('sync', this.loadedData, this);
            if (this.url) {
                this.fetch({
                    error: _.bind(function(model, xhr, options) {
                        console.error("ERROR: unable to load file " + this.url);
                    }, this)
                });
            }
        },

        loadedData: function() {
            Adapt.trigger('courseModel:dataLoaded');
        },

        _children: "contentObjects"

    });

    return CourseModel;

});

define('core/js/enums/buttonStateEnum',[],function() {

    var BUTTON_STATE = ENUM([
        'SUBMIT',
        'CORRECT',
        'INCORRECT',
        'SHOW_CORRECT_ANSWER',
        'HIDE_CORRECT_ANSWER',
        'SHOW_FEEDBACK',
        'RESET'
    ]);

    return BUTTON_STATE;

});
define('core/js/models/questionModel',[
    'core/js/adapt',
    'core/js/models/componentModel',
    'core/js/enums/buttonStateEnum'
], function(Adapt, ComponentModel, BUTTON_STATE) {

    var QuestionModel = ComponentModel.extend({

        //////
        // Setup question types
        ////

        // Used to set model defaults
        defaults: function() {
            // Extend from the ComponentModel defaults
            return ComponentModel.resultExtend("defaults", {
                _isQuestionType: true,
                _shouldDisplayAttempts: false,
                _canShowModelAnswer: true,
                _canShowFeedback: true,
                _canShowMarking: true,
                _isSubmitted: false,
                _questionWeight: Adapt.config.get("_questionWeight"),
                _items: [],
            });
        },

        // Extend from the ComponentModel trackable
        trackable: ComponentModel.resultExtend("trackable", [
            '_isSubmitted',
            '_score',
            '_isCorrect',
            '_attemptsLeft'
        ]),

        init: function() {
            this.setupDefaultSettings();
            this.listenToOnce(Adapt, "adapt:initialize", this.onAdaptInitialize);
        },

        // Calls default methods to setup on questions
        setupDefaultSettings: function() {
            // Not sure this is needed anymore, keeping to maintain API
            this.setupWeightSettings();
            this.setupButtonSettings();
        },

        // Used to setup either global or local button text
        setupButtonSettings: function() {
            var globalButtons = Adapt.course.get("_buttons");

            // Check if  '_buttons' attribute exists and if not use the globally defined buttons.
            if (!this.has("_buttons")) {
                this.set("_buttons", globalButtons);
            } else {
                // Check all the components buttons.
                // If they are empty use the global defaults.
                var componentButtons = this.get("_buttons");

                for (var key in componentButtons) {
                    if (typeof componentButtons[key] === 'object') {
                        // Button text.
                        if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {
                            componentButtons[key].buttonText = globalButtons[key].buttonText;
                        }

                        // ARIA labels.
                        if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {
                            componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;
                        }
                    }

                    if (!componentButtons[key] && globalButtons[key]) {
                        componentButtons[key] = globalButtons[key];
                    }
                }
            }
        },

        // Used to setup either global or local question weight/score
        setupWeightSettings: function() {
            // Not needed as handled by model defaults, keeping to maintain API
        },

        //////
        // Selection restoration process
        ////


        // Used to add post-load changes to the model
        onAdaptInitialize: function() {
            this.restoreUserAnswers();
        },

        // Used to restore the user answers
        restoreUserAnswers: function() {},


        //////
        // Submit process
        ////

        // Use to check if the user is allowed to submit the question
        // Maybe the user has to select an item?
        canSubmit: function() {},

        // Used to update the amount of attempts the user has left
        updateAttempts: function() {
            if (!this.get('_attemptsLeft')) {
                this.set("_attemptsLeft", this.get('_attempts'));
            }
            this.set("_attemptsLeft", this.get('_attemptsLeft') - 1);
        },

        // Used to set _isEnabled and _isSubmitted on the model
        setQuestionAsSubmitted: function() {
            this.set({
                _isEnabled: false,
                _isSubmitted: true
            });
        },

        // This is important for returning or showing the users answer
        // This should preserve the state of the users answers
        storeUserAnswer: function() {},

        // Sets _isCorrect:true/false based upon isCorrect method below
        markQuestion: function() {

            if (this.isCorrect()) {
                this.set('_isCorrect', true);
            } else {
                this.set('_isCorrect', false);
            }

        },

         // Should return a boolean based upon whether to question is correct or not
        isCorrect: function() {},

        // Used to set the score based upon the _questionWeight
        setScore: function() {},

        // Checks if the question should be set to complete
        // Calls setCompletionStatus and adds complete classes
        checkQuestionCompletion: function() {

            var isComplete = (this.get('_isCorrect') || this.get('_attemptsLeft') === 0);

            if (isComplete) {
                this.setCompletionStatus();
            }

            return isComplete;

        },

        // Updates buttons based upon question state by setting
        // _buttonState on the model which buttonsView listens to
        updateButtons: function() {

            var isInteractionComplete = this.get('_isInteractionComplete');
            var isCorrect = this.get('_isCorrect');
            var isEnabled = this.get('_isEnabled');
            var buttonState = this.get('_buttonState');
            var canShowModelAnswer = this.get('_canShowModelAnswer');

            if (isInteractionComplete) {

                if (isCorrect || !canShowModelAnswer) {
                    // Use correct instead of complete to signify button state
                    this.set('_buttonState', BUTTON_STATE.CORRECT);

                } else {

                    switch (buttonState) {
                        case BUTTON_STATE.SUBMIT:
                        case BUTTON_STATE.HIDE_CORRECT_ANSWER:
                            this.set('_buttonState', BUTTON_STATE.SHOW_CORRECT_ANSWER);
                            break;
                        default:
                            this.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);
                    }

                }

            } else {

                if (isEnabled) {
                    this.set('_buttonState', BUTTON_STATE.SUBMIT);
                } else {
                    this.set('_buttonState', BUTTON_STATE.RESET);
                }
            }

        },

        // Used to setup the correct, incorrect and partly correct feedback
        setupFeedback: function() {
            if (!this.has('_feedback')) return;

            if (this.get('_isCorrect')) {
                this.setupCorrectFeedback();
            } else if (this.isPartlyCorrect()) {
                this.setupPartlyCorrectFeedback();
            } else {
                this.setupIncorrectFeedback();
            }
        },

        // Used by the question to determine if the question is incorrect or partly correct
        // Should return a boolean
        isPartlyCorrect: function() {},

        setupCorrectFeedback: function() {
            this.set({
                feedbackTitle: this.getFeedbackTitle(),
                feedbackMessage: this.get('_feedback').correct
            });
        },

        setupPartlyCorrectFeedback: function() {
            var feedback = this.get('_feedback')._partlyCorrect;

            if (feedback && feedback.final) {
                this.setAttemptSpecificFeedback(feedback);
            } else {
                this.setupIncorrectFeedback();
            }
        },

        setupIncorrectFeedback: function() {
            this.setAttemptSpecificFeedback(this.get('_feedback')._incorrect);
        },

        setAttemptSpecificFeedback: function(feedback) {
            var body = this.get('_attemptsLeft') && feedback.notFinal || feedback.final;

            this.set({
                feedbackTitle: this.getFeedbackTitle(),
                feedbackMessage: body
            });
        },

        getFeedbackTitle: function() {
            return this.get('_feedback').title || this.get('displayTitle') ||  this.get('title') || "";
        },

        /**
         * Used to determine whether the learner is allowed to interact with the question component or not.
         * @return {Boolean}
         */
        isInteractive: function() {
            return !this.get('_isComplete') || (this.get('_isEnabled') && !this.get('_isSubmitted'));
        },

        // Reset the model to let the user have another go (not the same as attempts)
        reset: function(type, force) {
            if (!this.get("_canReset") && !force) return;

            type = type || true; //hard reset by default, can be "soft", "hard"/true

            ComponentModel.prototype.reset.call(this, type, force);

            var attempts = this.get('_attempts');
            this.set({
                _attemptsLeft: attempts,
                _isCorrect: undefined,
                _isSubmitted: false,
                _buttonState: BUTTON_STATE.SUBMIT
            });
        },

        // Reset question for subsequent attempts
        setQuestionAsReset: function() {
            this.set({
                _isEnabled: true,
                _isSubmitted: false
            });
        },

        // Used by the question view to reset the stored user answer
        resetUserAnswer: function() {},

        refresh: function() {
            this.trigger('question:refresh');
        },

        getButtonState: function() {
            if (this.get('_isCorrect')) {
                return BUTTON_STATE.CORRECT;
            }

            if (this.get('_attemptsLeft') === 0) {
                 return this.get('_canShowModelAnswer') ? BUTTON_STATE.SHOW_CORRECT_ANSWER : BUTTON_STATE.INCORRECT;
            }

            return this.get('_isSubmitted') ? BUTTON_STATE.RESET : BUTTON_STATE.SUBMIT;
        },

        // Returns an object specific to the question type, e.g. if the question
        // is a 'choice' this should contain an object with:
        // - correctResponsesPattern[]
        // - choices[]
        getInteractionObject: function() {
            return {};
        },

        // Returns a string detailing how the user answered the question.
        getResponse: function() {},

        // Returns a string describing the type of interaction: "choice" and "matching" supported (see scorm wrapper)
        getResponseType: function() {}

    });

    return QuestionModel;

});

define('core/js/models/buildModel',[
    'core/js/adapt',
    'core/js/logging'
], function (Adapt) {

    var BuildModel = Backbone.Model.extend({

        defaults: {
            jsonext: 'json'
        },

        initialize: function(attrs, options) {
            this.url = options.url;
            // Fetch data & if successful trigger event to enable plugins to stop course files loading
            // Then check if course files can load
            // 'configModel:loadCourseData' event starts the core content collections and models being fetched
            this.fetch({
                success: _.bind(function() {
                    this.isLoaded = true;
                    Adapt.trigger('buildModel:dataLoaded');
                }, this),
                error: function() {
                    console.log('Unable to load adapt/js/build.js');
                    Adapt.trigger('buildModel:dataLoaded');
                }
            });
        },

        whenReady: function() {
            if (this.isLoaded) return Promise.resolve();
            return new Promise(function (resolve) {
                Adapt.once("buildModel:dataLoaded", resolve);
            }.bind(this));
        }

    });

    return Adapt.build = new BuildModel(null, {url: 'adapt/js/build.min.js', reset:true});

});

define('core/js/startController',[
    'core/js/adapt'
], function(Adapt) {

    var StartController = Backbone.Controller.extend({

        model: null,

        loadCourseData: function() {
            this.model = new Backbone.Model(Adapt.course.get("_start"));
        },

        setStartLocation: function() {
            if (!this.isEnabled()) return;
            window.history.replaceState('', '', this.getStartHash());
        },

        getStartHash: function(alwaysForce) {
            var startId = this.getStartId();

            var hasStartId = (startId)
                ? true
                : false;

            var isRouteSpecified = (_.indexOf(window.location.href,"#") > -1);
            var shouldForceStartId = alwaysForce || this.model.get("_force");
            var shouldNavigateToStartId = hasStartId && (!isRouteSpecified || shouldForceStartId);

            var startHash = "#/";
            if (shouldNavigateToStartId) {
                if (startId !== Adapt.course.get("_id")) {
                    startHash = "#/id/"+startId;
                }
            } else {
                //go to specified route or course main menu
                var hasLocationHash = (window.location.hash)
                    ? true
                    : false;

                startHash = hasLocationHash ? window.location.hash : startHash;
            }

            return startHash;
        },

        isEnabled: function() {
            if (!this.model || !this.model.get("_isEnabled")) return false;
            return true;
        },

        getStartId: function() {
            var startId = this.model.get("_id");
            var startIds = this.model.get("_startIds");
            var $html = $("html");

            var hasStartIdsConfiguration = (startIds && startIds.length > 0);
            if (hasStartIdsConfiguration) {
                for (var i = 0, l =  startIds.length; i < l; i++) {
                    var item = startIds[i];
                    var className =  item._className;
                    var skipIfComplete = item._skipIfComplete;

                    var model = Adapt.findById(item._id);

                    if (!model) {
                        console.log("startController: cannot find id", item._id);
                        continue;
                    }

                    if (skipIfComplete) {
                        if (model.get("_isComplete")) continue;
                    }

                    if (!className || $html.is(className) || $html.hasClass(className)) {
                        startId = item._id;
                        break;
                    }
                }
            }

            return startId;
        }

    });

    Adapt.once("adapt:start", function() {
        Adapt.startController.loadCourseData();
        Adapt.startController.setStartLocation();
    });

    return Adapt.startController = new StartController();

});

define('core/js/data',[
    'core/js/adapt',
    'core/js/collections/adaptCollection',
    'core/js/models/articleModel',
    'core/js/models/blockModel',
    'core/js/models/configModel',
    'core/js/models/contentObjectModel',
    'core/js/models/componentModel',
    'core/js/models/courseModel',
    'core/js/models/questionModel',
    'core/js/models/lockingModel',
    'core/js/models/buildModel',
    'core/js/startController'
], function(Adapt, AdaptCollection, ArticleModel, BlockModel, ConfigModel, ContentObjectModel, ComponentModel, CourseModel, QuestionModel) {

    var Data = Backbone.Controller.extend({

        mappedIds: {},

        init: function () {
            Adapt.build.whenReady().then(this.onBuildDataLoaded.bind(this));
        },

        onBuildDataLoaded: function() {
            $('html').attr('data-adapt-framework-version', Adapt.build.get('package').version);
            Adapt.config = new ConfigModel(null, {url: 'course/config.' + Adapt.build.get('jsonext'), reset:true});
            Adapt.config.on({
                'change:_activeLanguage': this.onLanguageChange.bind(this),
                'change:_defaultDirection': this.onDirectionChange.bind(this)
            });

            // Events that are triggered by the main Adapt content collections and models
            Adapt.once('configModel:loadCourseData', this.onLoadCourseData.bind(this));
        },

        onLanguageChange: function(model, language) {
            Adapt.offlineStorage.set('lang', language);
            this.loadCourseData(this.triggerDataReady.bind(this), language);
        },

        onDirectionChange: function(model, direction) {
            if (direction === 'rtl') {
                $('html').removeClass('dir-ltr').addClass('dir-rtl').attr('dir', 'rtl');
            } else {
                $('html').removeClass('dir-rtl').addClass('dir-ltr').attr('dir', 'ltr');
            }
        },

        /**
         * Before we actually go to load the course data, we first need to check to see if a language has been set
         * If it has we can go ahead and start loading; if it hasn't, apply the defaultLanguage from config.json
         */
        onLoadCourseData: function() {
            if (Adapt.config.get('_activeLanguage')) {
                this.loadCourseData(this.triggerDataReady.bind(this));
            } else {
                Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));
            }
        },

        loadCourseData: function(callback, newLanguage) {
            Adapt.on('adaptCollection:dataLoaded courseModel:dataLoaded', function() {
                this.checkDataIsLoaded(callback, newLanguage);
            }.bind(this));

            // All code that needs to run before adapt starts should go here
            var language = Adapt.config.get('_activeLanguage');
            var jsonext = Adapt.build.get('jsonext');
            var courseFolder = 'course/' + language +'/';

            $('html').attr('lang', language);

            Adapt.course = new CourseModel(null, {url:courseFolder + 'course.'+jsonext, reset:true});

            Adapt.contentObjects = new AdaptCollection(null, {
                model: ContentObjectModel,
                url: courseFolder +'contentObjects.'+jsonext
            });

            Adapt.articles = new AdaptCollection(null, {
                model: ArticleModel,
                url: courseFolder + 'articles.'+jsonext
            });

            Adapt.blocks = new AdaptCollection(null, {
                model: BlockModel,
                url: courseFolder + 'blocks.'+jsonext
            });

            Adapt.components = new AdaptCollection(null, {
                model: function(json) {

                    //use view+model object
                    var ViewModelObject = Adapt.componentStore[json._component];

                    if(!ViewModelObject) {
                        throw new Error('One or more components of type "'+json._component+'" were included in the course - but no component of that type is installed...');
                    }

                    //if model defined for component use component model
                    if (ViewModelObject.model) {
                        return new ViewModelObject.model(json);
                    }

                    var View = ViewModelObject.view || ViewModelObject;
                    //if question type use question model
                    if (View._isQuestionType) {
                        return new QuestionModel(json);
                    }

                    //otherwise use component model
                    return new ComponentModel(json);
                },
                url: courseFolder + 'components.' + jsonext
            });
        },

        checkDataIsLoaded: function(callback, newLanguage) {
            if (Adapt.contentObjects.models.length > 0 &&
                Adapt.articles.models.length > 0 &&
                Adapt.blocks.models.length > 0 &&
                Adapt.components.models.length > 0 &&
                Adapt.course.get('_id')) {

                this.mapAdaptIdsToObjects();

                Adapt.log.debug('Firing app:dataLoaded');

                try {
                    Adapt.trigger('app:dataLoaded');// Triggered to setup model connections in AdaptModel.js
                } catch(e) {
                    Adapt.log.error('Error during app:dataLoading trigger', e);
                }

                this.setupMapping();

                Adapt.wait.queue(function() {
                    callback(newLanguage);
                });

            }
        },

        mapAdaptIdsToObjects: function () {
            Adapt.contentObjects._byAdaptID = Adapt.contentObjects.groupBy('_id');
            Adapt.articles._byAdaptID = Adapt.articles.groupBy('_id');
            Adapt.blocks._byAdaptID = Adapt.blocks.groupBy('_id');
            Adapt.components._byAdaptID = Adapt.components.groupBy('_id');
        },

        setupMapping: function() {
            this.mappedIds = {};

            // Setup course Id
            this.mappedIds[Adapt.course.get('_id')] = 'course';

            var collections = ['contentObjects', 'articles', 'blocks', 'components'];

            collections.forEach(function(collection) {
                Adapt[collection].models.forEach(function(model) {
                    var id = model.get('_id');
                    this.mappedIds[id] = collection;
                }.bind(this));
            }.bind(this));
        },

        triggerDataReady: function(newLanguage) {
            if (newLanguage) {

                Adapt.trigger('app:languageChanged', newLanguage);

                _.defer(function() {
                    Adapt.startController.loadCourseData();
                    var hash = '#/';

                    if (Adapt.startController.isEnabled()) {
                        hash = Adapt.startController.getStartHash(true);
                    }

                    Backbone.history.navigate(hash, { trigger: true, replace: true });
                });
            }

            Adapt.log.debug('Firing app:dataReady');

            try {
                Adapt.trigger('app:dataReady');
            } catch(e) {
                Adapt.log.error('Error during app:dataReady trigger', e);
            }

            Adapt.wait.queue(this.triggerInit.bind(this));

        },

        triggerInit: function() {
            this.isReady = true;
            this.trigger('ready');
        },

        whenReady: function() {
            if (this.isReady) return Promise.resolve();

            return new Promise(function (resolve) {
                this.once('ready', resolve);
            }.bind(this));
        },

        /**
         * Looks up which collection a model belongs to
         * @param {string} id The id of the item you want to look up e.g. `"co-05"`
         * @return {string} One of the following (or `undefined` if not found):
         * - "course"
         * - "contentObjects"
         * - "blocks"
         * - "articles"
         * - "components"
         */
        mapById: function(id) {
            return this.mappedIds[id];
        },

        /**
         * Looks up a model by its `_id` property
         * @param {string} id The id of the item e.g. "co-05"
         * @return {Backbone.Model}
         */
        findById: function(id) {
            if (id === Adapt.course.get('_id')) {
                return Adapt.course;
            }

            var collectionType = Adapt.mapById(id);

            if (!collectionType) {
                console.warn('Adapt.findById() unable to find collection type for id: ' + id);
                return;
            }

            return Adapt[collectionType]._byAdaptID[id][0];
        }

    });

    return (Adapt.data = new Data());
});

define('core/js/offlineStorage',[
    'core/js/adapt'
], function(Adapt) {

    //Basic API for setting and getting name+value pairs
    //Allows registration of a single handler.

    var OfflineStorage = Backbone.Controller.extend({

        /**
         * set to true initially so that if there are no offlineStorage handlers (i.e. if contrib-spoor is not installed)
         * this can still be accessed OK
         */
        ready: true,
        _handler: undefined,

        /**
         * set .ready to false if an offlineStorage handler is being attached - we'll need to wait until the handler lets us know
         * it's ready before we can safely use offlineStorage
         */
        initialize: function(handler) {
            if (!handler) {
                return;
            }

            this.ready = false;
            this._handler = handler;
        },

        /**
         * Flag to indicate if an offlineStorage handler has been defined.
         * @returns {boolean} true if an offlineStorage handler has been defined, false otherwise
         */
        hasHandler: function() {
            return this._handler !== undefined;
        },

        set: function(name, value) {
            if (this._handler && this._handler.set) {
                return this._handler.set.apply(this._handler, arguments);
            }
            // if no handler has been defined, just store the data locally
            this[name] = value;
        },

        get: function(name) {
            if (this._handler && this._handler.get) {
                return this._handler.get.apply(this._handler, arguments);
            }
            // if no handler has been defined, check local data store
            return this[name];
        },

        /**
         * Some forms of offlineStorage could take time to initialise, this allows us to let plugins know when it's ready to be used
         */
        setReadyStatus: function() {
            this.ready = true;
            Adapt.trigger("offlineStorage:ready");
        }

    });

    Adapt.offlineStorage = new OfflineStorage();

    return Adapt.offlineStorage;

});

define('core/js/enums/completionStateEnum',[],function() {
  
      var COMPLETION_STATE = ENUM([
          'INCOMPLETE',
          'COMPLETED',
          'PASSED',
          'FAILED'
      ]);
  
      return COMPLETION_STATE;
  
  });
define('core/js/tracking',[
    'core/js/adapt',
    'core/js/enums/completionStateEnum'
], function(Adapt, COMPLETION_STATE) {

    var Tracking = Backbone.Controller.extend({

        _config: {
            _requireContentCompleted: true,
            _requireAssessmentCompleted: false
        },

        _assessmentState: null,

        initialize: function() {
            Adapt.once('configModel:dataLoaded', this.loadConfig.bind(this));
            Adapt.on('app:dataReady', this.setupEventListeners.bind(this));
        },

        setupEventListeners: function() {
            // Check if completion requires passing an assessment. 
            if (this._config._requireAssessmentCompleted) {
                this.listenTo(Adapt, {
                    'assessment:complete': this.onAssessmentComplete,
                    'assessment:restored': this.onAssessmentRestored
                });
            }

            // Check if completion requires completing all content.
            if (this._config._requireContentCompleted) {
                this.listenTo(Adapt.course, 'change:_isComplete', this.checkCompletion);
            }
        },

        /**
         * Store the assessment state.
         * @param {object} assessmentState - The object returned by Adapt.assessment.getState()
         */
        onAssessmentComplete: function(assessmentState) {
            this._assessmentState = assessmentState;

            this.checkCompletion();
        },

        /**
         * Restores the _assessmentState object when an assessment is registered.
         * @param {object} assessmentState - An object representing the overall assessment state
         */
        onAssessmentRestored: function(assessmentState) {
            this._assessmentState = assessmentState;  
        },

        /**
         * Evaluate the course and assessment completion.
         */
        checkCompletion: function() {
            var completionData = this.getCompletionData();

            if (completionData.status === COMPLETION_STATE.INCOMPLETE) {
                return;
            }

            Adapt.trigger('tracking:complete', completionData);
            Adapt.log.debug('tracking:complete', completionData);
        },

        /**
         * The return value of this function should be passed to the trigger of 'tracking:complete'.
         * @returns An object representing the user's course completion.
         */
        getCompletionData: function() {
            var completionData = {
                status: COMPLETION_STATE.INCOMPLETE,
                assessment: null
            };

            // Course complete is required.
            if (this._config._requireContentCompleted && !Adapt.course.get('_isComplete')) {
                // INCOMPLETE: course not complete.
                return completionData;
            }

            // Assessment completed required.
            if (this._config._requireAssessmentCompleted) {
                if (!this._assessmentState) {
                    // INCOMPLETE: assessment is not complete.
                    return completionData;
                }

                // PASSED/FAILED: assessment completed.
                completionData.status = this._assessmentState.isPass ? COMPLETION_STATE.PASSED : COMPLETION_STATE.FAILED;
                completionData.assessment = this._assessmentState;

                return completionData;
            }

            // COMPLETED: criteria met, no assessment requirements.
            completionData.status = COMPLETION_STATE.COMPLETED;

            return completionData;
        },

        /**
         * Set the _config object to the values retrieved from config.json.
         */
        loadConfig: function() {
            if (Adapt.config.has('_completionCriteria')) {
                this._config = Adapt.config.get('_completionCriteria');
            }
        }

    });

    Adapt.tracking = new Tracking();

    return Adapt.tracking;
});

define('core/js/device',[
    'core/js/adapt',
    'bowser'
], function(Adapt, Bowser) {

    var $html = $('html');
    var $window = $(window);

    Adapt.device = {
        touch: Modernizr.touchevents,
        screenWidth: getScreenWidth(),
        screenHeight: getScreenHeight(),
        browser: (Bowser.name || '').toLowerCase(),
        version: (Bowser.version || '').toLowerCase(),
        OS: getOperatingSystem().toLowerCase(),
        osVersion: Bowser.osversion || '',
        renderingEngine: getRenderingEngine()
    };

    // Define 'orientation' and 'aspectRatio' here once 'screenWidth' and 'screenHeight' have been set,
    // as both these functions are getters, essentially.
    Object.defineProperties(Adapt.device, {
        "orientation": {
            get: function () {
                return (this.screenWidth >= this.screenHeight) ? 'landscape' : 'portrait';
            }
        },
        "aspectRatio": {
            get: function () {
                return this.screenWidth / this.screenHeight;
            }
        }
    });

    Adapt.once('app:dataReady', function() {
        Adapt.device.screenSize = checkScreenSize();

        $html.addClass('size-' + Adapt.device.screenSize);
        
        if (Adapt.device.orientation) {
            $html.addClass('orientation-' + Adapt.device.orientation);
        }

        // As Adapt.config is available it's ok to bind the 'resize'.
        $window.on('resize orientationchange', onWindowResize);
    });

    /**
     * Compares the calculated screen width to the breakpoints defined in config.json.
     * 
     * @returns {string} 'large', 'medium' or 'small'
     */
    function checkScreenSize() {
        var screenSizeConfig = Adapt.config.get('screenSize');
        var screenSize;

        if (Adapt.device.screenWidth > screenSizeConfig.medium) {
            screenSize = 'large';
        } else if (Adapt.device.screenWidth > screenSizeConfig.small) {
            screenSize = 'medium';
        } else {
            screenSize = 'small';
        }

        return screenSize;
    }

    function getScreenWidth() {
        return isAppleDevice()
            ? getAppleScreenWidth()
            : window.innerWidth || $window.width();
    }

    function getScreenHeight() {
        return isAppleDevice()
            ? getAppleScreenHeight()
            : window.innerHeight || $window.height();
    }

    function getOperatingSystem() {
        var os = '';
        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android',
            'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];

        for (var i = 0; i < flags.length; i++) {
            if (Bowser[flags[i]]) {
                os = flags[i];
                break;
            }
        }

        if (os === '') {
            // Fall back to using navigator.platform in case Bowser can't detect the OS.
            var platform = navigator.platform;
            var platforms = ['Win', 'Mac', 'Linux'];
            os = 'PlatformUnknown';

            for (var i = 0; i < platforms.length; i++) {
                if (platform.indexOf(platforms[i]) != -1) {
                    os = platforms[i].toLowerCase();
                    break;
                }
            }

            // Set consistency with the Bowser flags.
            if (os == 'win') {
                os = 'windows';
            }
        }

        return os;
    }

    function getRenderingEngine() {
        var engine = '';
        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];

        for (var i = 0; i < flags.length; i++) {
            if (Bowser[flags[i]]) {
                engine = flags[i];
                break;
            }
        }

        return engine;
    }

    var onWindowResize = _.debounce(function onScreenSizeChanged() {
        // Calculate the screen properties.
        var previousWidth = Adapt.device.screenWidth;
        var previousHeight = Adapt.device.screenHeight;

        Adapt.device.screenWidth = getScreenWidth();
        Adapt.device.screenHeight = getScreenHeight();

        if (previousWidth === Adapt.device.screenWidth && previousHeight === Adapt.device.screenHeight) {
            // Do not trigger a change if the viewport hasn't actually changed.  Scrolling on iOS will trigger a resize.
            return;
        }

        var newScreenSize = checkScreenSize();

        if (newScreenSize !== Adapt.device.screenSize) {
            Adapt.device.screenSize = newScreenSize;

            $html.removeClass('size-small size-medium size-large').addClass('size-' + Adapt.device.screenSize);

            if (Adapt.device.orientation) {
                $html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + Adapt.device.orientation);
            }

            Adapt.trigger('device:changed', Adapt.device.screenSize);
        }

        Adapt.trigger('device:preResize device:resize device:postResize', Adapt.device.screenWidth);

    }, 100);

    function isAppleDevice() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    }

    function getAppleScreenWidth() {
        return (Math.abs(window.orientation) === 90) ? screen.height : screen.width;
    }

    function getAppleScreenHeight() {
        return (Math.abs(window.orientation) === 90) ? screen.width : screen.height;
    }

    function getAppleDeviceType() {
        var type = '';

        var flags = ['iphone', 'ipad', 'ipod'];

        for (var i = 0; i < flags.length; i++) {
            if (Bowser[flags[i]]) {
                type = flags[i];
                break;
            }
        }

        return type;
    }

    function pixelDensity() {
        var pixelDensity = (window.devicePixelRatio || 1);

        if (pixelDensity >= 3) {
            return 'ultra-high';
        } else if (pixelDensity >= 2) {
            return 'high';
        } else if (pixelDensity >= 1.5) {
            return 'medium';
        } else {
            return 'low';
        }
    }

    var browser = Adapt.device.browser.toLowerCase();
    // Convert 'msie' and 'internet explorer' to 'ie'.
    var browserString = browser.replace(/msie|internet explorer/, 'ie');
    browserString = browserString + ' version-' + Adapt.device.version + ' OS-' + Adapt.device.OS + ' ' + getAppleDeviceType();
    browserString += browserString.replace('.', '-').toLowerCase();

    $html.addClass(browserString + ' pixel-density-' + pixelDensity());
});

define('core/js/views/drawerView',[
    'core/js/adapt'
], function(Adapt) {

    var DrawerView = Backbone.View.extend({

        className: 'drawer display-none',
        disableAnimation: false,

        attributes: {
            'role': 'dialog',
            'aria-modal': 'true',
           // 'aria-labelledby': 'drawer-heading',
            'aria-hidden': 'true'
        },

        initialize: function() {
            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
            this._isVisible = false;
            this.drawerDir = 'right';
            if(Adapt.config.get('_defaultDirection')=='rtl'){//on RTL drawer on the left
                this.drawerDir = 'left';
            }
            this.setupEventListeners();
            this.render();
            this.drawerDuration = Adapt.config.get('_drawer')._duration;
            this.drawerDuration = (this.drawerDuration) ? this.drawerDuration : 400;
            // Setup cached selectors
            this.$wrapper = $('#wrapper');
        },

        setupEventListeners: function() {
            this.listenTo(Adapt, {
                'navigation:toggleDrawer': this.toggleDrawer,
                'drawer:triggerCustomView': this.openCustomView,
                'drawer:closeDrawer': this.onCloseDrawer,
                'remove': this.onCloseDrawer,
                'drawer:remove': this.remove
            });

            this._onKeyUp = _.bind(this.onKeyUp, this);
            this.setupEscapeKey();
        },

        setupEscapeKey: function() {
            $(window).on("keyup", this._onKeyUp);
        },

        onKeyUp: function(event) {
            if (event.which != 27) return;
            event.preventDefault();

            this.onCloseDrawer();
        },

        events: {
            'click .drawer-back': 'onBackButtonClicked',
            'click .drawer-close':'onCloseClicked'
        },

        render: function() {
            var template = Handlebars.templates['drawer']
            $(this.el).html(template({_globals: Adapt.course.get("_globals")})).prependTo('body');
            var shadowTemplate = Handlebars.templates['shadow'];
            $(shadowTemplate()).prependTo('body');
            // Set defer on post render
            _.defer(_.bind(function() {
                this.postRender();
            }, this));
            return this;
        },

        // Set tabindex for select elements
        postRender: function() {
            this.$('a, button, input, select, textarea').attr('tabindex', -1);

            this.checkIfDrawerIsAvailable();
        },

        openCustomView: function(view, hasBackButton) {
            // Set whether back button should display
            this._hasBackButton = hasBackButton;
            this._isCustomViewVisible = true;
            Adapt.trigger('drawer:empty');
            this.showDrawer();
            this.$('.drawer-holder').html(view);
        },

        checkIfDrawerIsAvailable: function() {
            if (this.collection.length == 0) {
                $('.navigation-drawer-toggle-button').addClass('display-none');
                Adapt.trigger('drawer:noItems');
            } else {
                $('.navigation-drawer-toggle-button').removeClass('display-none');
            }
        },

        onBackButtonClicked: function(event) {
            event.preventDefault();
            this.showDrawer(true);
        },

        onCloseClicked: function(event) {
            event.preventDefault();
            this.hideDrawer();
        },

        onCloseDrawer: function($toElement) {
            this.hideDrawer($toElement);
        },

        toggleDrawer: function() {
            if (this._isVisible && this._isCustomViewVisible === false) {
                this.hideDrawer();
            } else {
                this.showDrawer(true);
            }
        },

        showDrawer: function(emptyDrawer) {
            this.$el.removeClass('display-none').removeAttr('aria-hidden');
            //only trigger popup:opened if drawer is visible, pass popup manager drawer element
            if (!this._isVisible) {
                Adapt.a11y.popupOpened(this.$el);
                Adapt.a11y.scrollDisable('body');
                this._isVisible = true;
            }

            var drawerWidth = this.$el.width();
            // Sets tab index to 0 for all tabbable elements in Drawer
            this.$('a, button, input, select, textarea').attr('tabindex', 0);

            if (emptyDrawer) {
                this.$('.drawer-back').addClass('display-none');
                this._isCustomViewVisible = false;
                this.emptyDrawer();
                if (this.collection.models.length === 1) {
                    // This callback triggers openCustomView() and sets
                    // _isCustomViewVisible to true, causing toggleDrawer()
                    // to re-render the drawer on every toggle button press
                    Adapt.trigger(this.collection.models[0].get('eventCallback'));
                    // Set _isCustomViewVisible to false to prevent re-rendering
                    // the drawer and fix the toggle functionality on toggle button press
                    this._isCustomViewVisible = false;
                } else {
                    this.renderItems();
                    Adapt.trigger('drawer:openedItemView');
                }
            } else {
                if (this._hasBackButton && this.collection.models.length > 1) {
                    this.$('.drawer-back').removeClass('display-none');
                } else {
                    this.$('.drawer-back').addClass('display-none');
                }
                Adapt.trigger('drawer:openedCustomView');
            }

            //delay drawer animation until after background fadeout animation is complete
            if (this.disableAnimation) {
                $('#shadow').removeClass("display-none");

                var direction={};
                direction[this.drawerDir]=0;
                this.$el.css(direction);
                complete.call(this);

            } else {

                $('#shadow').velocity({opacity:1},{duration:this.drawerDuration, begin: _.bind(function() {
                    $("#shadow").removeClass("display-none");
                    complete.call(this);
                }, this)});

                var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;
                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';
                var direction={};
                direction[this.drawerDir]=0;
                this.$el.velocity(direction, this.drawerDuration, easing);

            }

            function complete() {
                this.addShadowEvent();
                Adapt.trigger('drawer:opened');

                //focus on first tabbable element in drawer
                Adapt.a11y.focusFirst(this.$el, { defer: true });
        }

        },

        emptyDrawer: function() {
            this.$('.drawer-holder').empty();
        },

        renderItems: function() {
            Adapt.trigger('drawer:empty');
            this.emptyDrawer();
            var models = this.collection.models;
            for (var i = 0, len = models.length; i < len; i++) {
                var item = models[i];
                new DrawerItemView({model: item});
            }
        },

        hideDrawer: function($toElement) {
            //only trigger popup:closed if drawer is visible
            if (this._isVisible) {
                Adapt.a11y.popupClosed($toElement);
                this._isVisible = false;
                Adapt.a11y.scrollEnable('body');
            } else {
                return;
            }

            if (this.disableAnimation) {

                var direction={};
                direction[this.drawerDir]=-this.$el.width();
                this.$el
                    .css(direction)
                    .addClass('display-none')
                    .attr('aria-hidden', 'true');

                $('#shadow').addClass("display-none");

                Adapt.trigger('drawer:closed');

            } else {

                var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;
                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';

                var direction={};
                direction[this.drawerDir]=-this.$el.width();
                this.$el.velocity(direction, this.drawerDuration, easing, _.bind(function() {
                    this.$el
                        .addClass('display-none')
                        .attr('aria-hidden', 'true');

                    Adapt.trigger('drawer:closed');
                }, this));

                $('#shadow').velocity({opacity:0}, {duration:this.drawerDuration, complete:function() {
                    $('#shadow').addClass("display-none");
                }});

            }

            this._isCustomViewVisible = false;
            this.removeShadowEvent();


        },

        addShadowEvent: function() {
            $('#shadow').one('click touchstart', _.bind(function() {
                this.onCloseDrawer();
            }, this));
        },

        removeShadowEvent: function() {
            $('#shadow').off('click touchstart');
        },

        remove: function() {
            Backbone.View.prototype.remove.apply(this, arguments);
            $(window).off("keyup", this._onKeyUp);

            Adapt.trigger('drawer:empty');
            this.collection.reset();
            $('#shadow').remove();
        }

    });

    var DrawerItemView = Backbone.View.extend({

        className: 'drawer-item',

        attributes: {
            role: 'listitem'
        },

        initialize: function() {
            this.listenTo(Adapt, 'drawer:empty', this.remove);
            this.render();
        },

        events: {
            'click .drawer-item-open': 'onDrawerItemClicked'
        },

        render: function() {
            var data = this.model.toJSON();
            var template = Handlebars.templates['drawerItem']
            $(this.el).html(template(data)).appendTo('.drawer-holder');
            return this;
        },

        onDrawerItemClicked: function(event) {
            event.preventDefault();
            var eventCallback = this.model.get('eventCallback');
            Adapt.trigger(eventCallback);
        }
    });

    return DrawerView;
});

define('core/js/drawer',[
    'core/js/adapt',
    'core/js/views/drawerView'
], function(Adapt, DrawerView) {

    var DrawerCollection = new Backbone.Collection(null, { comparator: 'drawerOrder' });
    var Drawer = {};

    Drawer.addItem = function(drawerObject, eventCallback) {
        drawerObject.eventCallback = eventCallback;
        DrawerCollection.add(drawerObject);
    };

    Drawer.triggerCustomView = function(view, hasBackButton) {
        if (hasBackButton !== false) {
            hasBackButton = true;
        }
        Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);
    };

    Adapt.on({
        'adapt:start': function() {
            new DrawerView({ collection: DrawerCollection });
        },
        'app:languageChanged': function() {
            Adapt.trigger('drawer:remove');
        }
    });

    Adapt.drawer = Drawer;

});

define('core/js/views/notifyPushView',[
    'core/js/adapt'
], function (Adapt) {

    var NotifyPushView = Backbone.View.extend({

        className: function () {
            var classes = 'notify-push ';
            classes += (this.model.get('_classes') || '');
            return classes;
        },

        attributes: {
            'role': 'dialog',
            'aria-labelledby': 'notify-push-heading',
            'aria-modal': 'false'
        },

        initialize: function () {
            this.listenTo(Adapt, {
                'notify:pushShown notify:pushRemoved': this.updateIndexPosition,
                'remove': this.remove
            });

            this.listenTo(this.model.collection, {
                'remove': this.updateIndexPosition,
                'change:_index': this.updatePushPosition
            });

            this.preRender();
            this.render();
        },

        events: {
            'click .notify-push-close': 'closePush',
            'click .notify-push-inner': 'triggerEvent'
        },

        preRender: function () {
            this.hasBeenRemoved = false;
        },

        render: function () {
            var data = this.model.toJSON();
            var template = Handlebars.templates['notifyPush'];
            this.$el.html(template(data)).appendTo('#wrapper');

            _.defer(this.postRender.bind(this));

            return this;
        },

        postRender: function () {
            this.$el.addClass('show');

            _.delay(this.closePush.bind(this), this.model.get('_timeout'));

            Adapt.trigger('notify:pushShown');
        },

        closePush: function (event) {
            if (event) {
                event.preventDefault();
            }

            // Check whether this view has been removed as the delay can cause it to be fired twice
            if (this.hasBeenRemoved === false) {

                this.hasBeenRemoved = true;

                this.$el.removeClass('show');

                _.delay(function () {
                    this.model.collection.remove(this.model);
                    Adapt.trigger('notify:pushRemoved', this);
                    this.remove();
                }.bind(this), 600);
            }
        },

        triggerEvent: function (event) {
            Adapt.trigger(this.model.get('_callbackEvent'));
            this.closePush();
        },

        updateIndexPosition: function () {
            if (!this.hasBeenRemoved) {
                var models = this.model.collection.models;
                for (var i = 0, len = models.length; i < len; i++) {
                    var index = i;
                    var model = models[i];
                    if (model.get('_isActive') === true) {
                        model.set('_index', index);
                        this.updatePushPosition();
                    }
                }
            }
        },

        updatePushPosition: function () {
            if (this.hasBeenRemoved) {
                return;
            }

            if (this.model.get('_index') != undefined) {
                var elementHeight = this.$el.height();
                var offset = 20;
                var navigationHeight = $('.navigation').height();
                var currentIndex = this.model.get('_index');
                var flippedIndex = (currentIndex == 0) ? 1 : 0;

                if (this.model.collection.where({ _isActive: true }).length === 1) {
                    flippedIndex = 0;
                }

                var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;
                this.$el.css('top', positionLowerPush);
            }
        }
    });

    return NotifyPushView;

});

define('core/js/models/notifyModel',[],function() {

    var NotifyModel = Backbone.Model.extend({
        defaults: {
            _isActive: false,
            _showIcon: false,
            _timeout: 3000
        }
    });

    return NotifyModel;

});

define('core/js/collections/notifyPushCollection',[
    'core/js/adapt',
    'core/js/views/notifyPushView',
    'core/js/models/notifyModel'
], function(Adapt, NotifyPushView, NotifyModel) {

    // Build a collection to store push notifications
    var NotifyPushCollection = Backbone.Collection.extend({

        model: NotifyModel,

        initialize: function() {
            this.listenTo(this, 'add', this.onPushAdded);
            this.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);
        },

        onPushAdded: function(model) {
            this.checkPushCanShow(model);
        },

        checkPushCanShow: function(model) {
            if (this.canShowPush()) {
                model.set('_isActive', true);
                this.showPush(model);
            }
        },

        canShowPush: function() {
            var availablePushNotifications = this.where({_isActive:true});
            if (availablePushNotifications.length >= 2) {
                return false;
            }
            return true;
        },

        showPush: function(model) {
            new NotifyPushView({
                model: model
            });
        },

        onRemovePush: function(view) {
            var inactivePushNotifications = this.where({_isActive:false});
            if (inactivePushNotifications.length > 0) {
                this.checkPushCanShow(inactivePushNotifications[0]);
            }
        }

    });

    return NotifyPushCollection;

});

define('core/js/views/notifyView',[
    'core/js/adapt'
], function(Adapt) {

    var NotifyView = Backbone.View.extend({

        className: function() {
            var classes = 'notify ';
            classes += (this.model.get('_classes') || '');
            return classes;
        },

        attributes: {
            'role': 'dialog',
            'aria-labelledby': 'notify-heading',
            'aria-modal': 'true'
        },

        disableAnimation: false,
        isOpen: false,
        hasOpened: false,

        initialize: function() {
            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;

            this.setupEventListeners();

            this.render();
        },

        setupEventListeners: function() {
            this.listenTo(Adapt, {
                'remove page:scrollTo': this.closeNotify,
                'notify:resize': this.resetNotifySize,
                'notify:cancel': this.cancelNotify,
                'notify:close': this.closeNotify,
                'device:resize': this.resetNotifySize
            });

            this._onKeyUp = this.onKeyUp.bind(this);
            this.setupEscapeKey();
        },

        setupEscapeKey: function() {
            $(window).on('keyup', this._onKeyUp);
        },

        onKeyUp: function(event) {
            if (event.which != 27) return;
            event.preventDefault();

            this.cancelNotify();
        },

        events: {
            'click .notify-popup-alert-button':'onAlertButtonClicked',
            'click .notify-popup-prompt-button': 'onPromptButtonClicked',
            'click .notify-popup-done': 'onCloseButtonClicked',
            'click .notify-shadow': 'onShadowClicked'
        },

        render: function() {
            var data = this.model.toJSON();
            var template = Handlebars.templates.notify;

            //hide notify container
            this.$el.css('visibility', 'hidden');
            //attach popup + shadow
            this.$el.html(template(data)).prependTo('body');
            //hide popup
            this.$('.notify-popup').css('visibility', 'hidden');
            //show notify container
            this.$el.css('visibility', 'visible');

            this.showNotify();
            return this;
        },

        onAlertButtonClicked: function(event) {
            event.preventDefault();
            //tab index preservation, notify must close before subsequent callback is triggered
            this.closeNotify();
            Adapt.trigger(this.model.get('_callbackEvent'), this);
        },

        onPromptButtonClicked: function(event) {
            event.preventDefault();
            //tab index preservation, notify must close before subsequent callback is triggered
            this.closeNotify();
            Adapt.trigger($(event.currentTarget).attr('data-event'), this);
        },

        onCloseButtonClicked: function(event) {
            event.preventDefault();
            //tab index preservation, notify must close before subsequent callback is triggered
            this.cancelNotify();
        },

        onShadowClicked: function(event) {
            event.preventDefault();
            if (this.model.get("_closeOnShadowClick") === false) return;
            this.cancelNotify();
        },

        cancelNotify: function() {
            if (this.model.get("_isCancellable") === false) return;
            //tab index preservation, notify must close before subsequent callback is triggered
            this.closeNotify();
            Adapt.trigger('notify:cancelled', this);
        },

        resetNotifySize: function() {
            $('.notify-popup').removeAttr('style');

            this.resizeNotify();
        },

        resizeNotify: function() {
            var windowHeight = $(window).height();
            var notifyHeight = this.$('.notify-popup').outerHeight();

            if (notifyHeight > windowHeight) {
                this.$('.notify-popup').css({
                    'height':'100%',
                    'top':0,
                    'overflow-y': 'scroll',
                    '-webkit-overflow-scrolling': 'touch'
                });
            } else {
                this.$('.notify-popup').css({
                    'margin-top': -(notifyHeight/2)
                });
            }
        },

        showNotify: function() {
            this.isOpen = true;
            this.addSubView();

            // Keep focus from previous action
            this.$previousActiveElement = $(document.activeElement);

            Adapt.trigger('notify:opened', this);

            this.$el.imageready(this.onLoaded.bind(this));
        },

        onLoaded: function() {
            if (this.disableAnimation) {
                this.$('.notify-shadow').css('display', 'block');
            } else {

                this.$('.notify-shadow').velocity({ opacity: 0 }, { duration: 0 }).velocity({ opacity: 1 }, {duration: 400, begin: function() {
                    this.$('.notify-shadow').css('display', 'block');
                }.bind(this)});

            }

            this.resizeNotify();

            if (this.disableAnimation) {

                this.$('.notify-popup').css('visibility', 'visible');
                this.onOpened();

            } else {

                this.$('.notify-popup').velocity({ opacity: 0 }, { duration: 0 }).velocity({ opacity: 1 }, { duration: 400, begin: function() {
                    // Make sure to make the notify visible and then set
                    // focus, disabled scroll and manage tabs
                    this.$('.notify-popup').css('visibility', 'visible');
                    this.onOpened();
                }.bind(this)});

            }
        },

        onOpened: function() {
            this.hasOpened = true;
            // Allows popup manager to control focus
            Adapt.a11y.popupOpened(this.$('.notify-popup'));
            Adapt.a11y.scrollDisable('body');
            $('html').addClass('notify');

            // Set focus to first accessible element
            Adapt.a11y.focusFirst(this.$('.notify-popup'), { defer: false });
        },

        addSubView: function() {

            this.subView = this.model.get("_view");
            if (!this.subView) return;

            this.$(".notify-popup-content-inner").append(this.subView.$el);

        },

        closeNotify: function (event) {
            // Prevent from being invoked multiple times - see https://github.com/adaptlearning/adapt_framework/issues/1659
            if (!this.isOpen) return;
            this.isOpen = false;

            // If closeNotify is called before showNotify has finished then wait
            // until it's open.
            if (!this.hasOpened) {
                this.listenToOnce(Adapt, 'popup:opened', function() {
                    // Wait for popup:opened to finish processing
                    _.defer(this.onCloseReady.bind(this));
                });
            } else {
                this.onCloseReady();
            }
        },

        onCloseReady: function() {
            if (this.disableAnimation) {

                this.$('.notify-popup').css('visibility', 'hidden');
                this.$el.css('visibility', 'hidden');

                this.remove();

            } else {

                this.$('.notify-popup').velocity({ opacity: 0 }, {duration: 400, complete: function() {
                    this.$('.notify-popup').css('visibility', 'hidden');
                }.bind(this)});

                this.$('.notify-shadow').velocity({ opacity: 0 }, {duration: 400, complete:function() {
                    this.$el.css('visibility', 'hidden');
                    this.remove();
                }.bind(this)});
            }

            Adapt.a11y.scrollEnable('body');
            $('html').removeClass('notify');

            // Return focus to previous active element
            Adapt.a11y.popupClosed(this.$previousActiveElement);
            // Return reference to the notify view
            Adapt.trigger('notify:closed', this);
        },

        remove: function() {
            this.removeSubView();
            $(window).off('keyup', this._onKeyUp);
            Backbone.View.prototype.remove.apply(this, arguments);
        },

        removeSubView: function() {
            if (!this.subView) return;
            this.subView.remove();
            this.subView = null;

        }

    });

    return NotifyView;

});

define('core/js/notify',[
    'core/js/adapt',
    'core/js/collections/notifyPushCollection',
    'core/js/views/notifyView',
    'core/js/models/notifyModel'
], function(Adapt, NotifyPushCollection, NotifyView, NotifyModel) {

    var Notify = Backbone.Controller.extend({

        notifyPushes: null,

        _warnFirstOnly: true,
        _warn: true,
        _hasWarned: false,

        initialize: function() {
            this.notifyPushes = new NotifyPushCollection();
            this.listenTo(Adapt, {
                'notify:popup': this._deprecated.bind(this, 'popup'),
                'notify:alert': this._deprecated.bind(this, 'alert'),
                'notify:prompt': this._deprecated.bind(this, 'prompt'),
                'notify:push': this._deprecated.bind(this, 'push')
            });
        },

        _deprecated: function(type, notifyObject) {
            if (this._warn && (this._warnFirstOnly && !this._hasWarned)) {
                Adapt.log.warn('NOTIFY DEPRECATED: Adapt.trigger(\'notify:'+type+'\', notifyObject); is no longer supported, please use Adapt.notify.'+type+'(notifyObject);');
                this._hasWarned = true;
            }
            return this.create(notifyObject, { _type: type });
        },

        create: function(notifyObject, defaults) {
            notifyObject =_.defaults({}, notifyObject, defaults, {
                _type: 'popup',
                _isCancellable: true,
                _showCloseButton: true,
                _closeOnShadowClick: true,
            });

            if (notifyObject._type === 'push') {
                this.notifyPushes.push(notifyObject);
                return;
            }

            return new NotifyView({
                model: new NotifyModel(notifyObject)
            });
        },

        /**
        * Creates a 'popup' notify
        * @param {Object} notifyObject An object containing all the settings for the popup
        * @param {string} notifyObject.title Title of the popup
        * @param {string} notifyObject.body Body of the popup
        * @param {Boolean} [notifyObject._showCloseButton=true] If set to `false` the popup will not have a close button. The learner will still be able to dismiss the popup by clicking outside of it or by pressing the Esc key. This setting is typically used mainly for popups that have a subview (where the subview contains the close button)
        * @param {Boolean} [notifyObject._isCancellable=true] If set to `false` the learner will not be able to close the popup - use with caution!
        * @param {string} [notifyObject._classes] A class name or (space separated) list of class names you'd like to be applied to the popup's `<div>`
        * @param {Backbone.View} [notifyObject._view] Subview to display in the popup instead of the standard view
        */
        popup: function(notifyObject) {
            return this.create(notifyObject, { _type: 'popup' });
        },

        /**
        * Creates an 'alert' notify popup
        * @param {Object} notifyObject An object containing all the settings for the alert popup
        * @param {string} notifyObject.title Title of the alert popup
        * @param {string} notifyObject.body Body of the alert popup
        * @param {string} notifyObject.confirmText Label for the popup confirm button
        * @param {Boolean} [notifyObject._isCancellable=true] If set to `false` only the confirm button can be used to dismiss/close the popup
        * @param {Boolean} [notifyObject._showIcon=false] If set to `true` an 'alert' icon will be displayed in the popup
        * @param {string} [notifyObject._callbackEvent] Event to trigger when the confirm button is clicked
        * @param {string} [notifyObject._classes] A class name or (space separated) list of class names you'd like to be applied to the popup's `<div>`
        * @param {Backbone.View} [notifyObject._view] Subview to display in the popup instead of the standard view
        */
        alert: function(notifyObject) {
            return this.create(notifyObject, { _type: 'alert' });
        },

        /**
        * Creates a 'prompt dialog' notify popup
        * @param {Object} notifyObject An object containing all the settings for the prompt dialog
        * @param {string} notifyObject.title Title of the prompt
        * @param {string} notifyObject.body Body of the prompt
        * @param {Object[]} notifyObject._prompts Array of objects that each define a button (and associated callback event) that you want shown in the prompt
        * @param {string} notifyObject._prompts[].promptText Label for this button
        * @param {string} notifyObject._prompts[]._callbackEvent Event to be triggered when this button is clicked
        * @param {Boolean} [notifyObject._isCancellable=true] If set to `false` only the confirm button can be used to dismiss/close the prompt
        * @param {Boolean} [notifyObject._showIcon=true] If set to `true` a 'query' icon will be displayed in the popup
        * @param {string} [notifyObject._callbackEvent] Event to trigger when the confirm button is clicked
        * @param {string} [notifyObject._classes] A class name or (space separated) list of class names you'd like to be applied to the popup's `<div>`
        * @param {Backbone.View} [notifyObject._view] Subview to display in the popup instead of the standard view
        */
        prompt: function(notifyObject) {
            return this.create(notifyObject, { _type: 'prompt' });
        },

        /**
        * Creates a 'push notification'
        * @param {Object} notifyObject An object containing all the settings for the push notification
        * @param {string} notifyObject.title Title of the push notification
        * @param {string} notifyObject.body Body of the push notification
        * @param {Number} [notifyObject._timeout=3000] Length of time (in milliseconds) the notification should left on-screen before automatically fading away
        * @param {string} notifyObject._callbackEvent Event to be triggered if the learner clicks on the push notification (not triggered if they use the close button)
        * @param {string} [notifyObject._classes] A class name or (space separated) list of class names you'd like to be applied to the popup's `<div>`
        */
        push: function(notifyObject) {
            return this.create(notifyObject, { _type: 'push' });
        }

    });

    return (Adapt.notify = new Notify());

});

define('core/js/models/routerModel',[
    'core/js/adapt'
], function (Adapt) {

 	var RouterModel = Backbone.Model.extend({

 		defaults: {
 			_canNavigate: true,
			_shouldNavigateFocus: true
 		},

 		lockedAttributes: {
 			_canNavigate: false,
			_shouldNavigateFocus: false
 		}
 		
 	});

 	return RouterModel;

 });

define('core/js/views/adaptView',[
    'core/js/adapt'
], function(Adapt) {

    var AdaptView = Backbone.View.extend({

        attributes: function() {
            return {
                "data-adapt-id": this.model.get('_id')
            };
        },

        initialize: function() {
            this.listenTo(Adapt, 'remove', this.remove);
            this.listenTo(this.model, {
                'change:_isVisible': this.toggleVisibility,
                'change:_isHidden': this.toggleHidden,
                'change:_isComplete': this.onIsCompleteChange
            });
            this.model.set( {
                '_globals': Adapt.course.get('_globals'),
                '_isReady': false
            });
            this._isRemoved = false;

            if (Adapt.location._currentId === this.model.get('_id')) {
                Adapt.parentView = this;
            }
            
            this.preRender();
            this.render();
            this.setupOnScreenHandler();
        },

        preRender: function() {},

        postRender: function() {
            this.addChildren();
        },

        render: function() {
            Adapt.trigger(this.constructor.type + 'View:preRender', this);

            var data = this.model.toJSON();
            data.view = this;
            var template = Handlebars.templates[this.constructor.template];
            this.$el.html(template(data));

            Adapt.trigger(this.constructor.type + 'View:render', this);

            _.defer(function() {
                // don't call postRender after remove
                if(this._isRemoved) return;

                this.postRender();
                Adapt.trigger(this.constructor.type + 'View:postRender', this);
            }.bind(this));

            return this;
        },

        setupOnScreenHandler: function() {
            var onscreen = this.model.get('_onScreen');

            if (!onscreen || !onscreen._isEnabled) return;

            this.$el.on('onscreen.adaptView', function (e, m) {

                if (!m.onscreen) return;

                var minVerticalInview = onscreen._percentInviewVertical || 33;

                if (m.percentInviewVertical < minVerticalInview) return;

                this.$el.addClass( onscreen._classes || 'onscreen' ).off('onscreen.adaptView');

            }.bind(this));
        },

        addChildren: function() {
            var nthChild = 0;
            var children = this.model.getChildren();
            var models = children.models;
            this.childViews = {};
            for (var i = 0, len = models.length; i < len; i++) {
                var model = models[i];
                if (!model.get('_isAvailable')) continue;

                nthChild++;
                model.set("_nthChild", nthChild);

                var ViewModelObject = this.constructor.childView || Adapt.componentStore[model.get("_component")];
                var ChildView = ViewModelObject.view || ViewModelObject;

                if (!ChildView) {
                    throw 'The component \'' + models[i].attributes._id + '\'' +
                    ' (\'' + models[i].attributes._component + '\')' +
                    ' has not been installed, and so is not available in your project.';
                }

                var $parentContainer = this.$(this.constructor.childContainer);
                var childView = new ChildView({ model: model });

                this.childViews[model.get('_id')] = childView;

                $parentContainer.append(childView.$el);
            }
        },

        findDescendantViews: function(isParentFirst) {
            var descendants = [];
            this.childViews && _.each(this.childViews, function(view) {
                if (isParentFirst) descendants.push(view);
                var children = view.findDescendantViews && view.findDescendantViews(isParentFirst);
                if (children) descendants.push.apply(descendants, children);
                if (!isParentFirst) descendants.push(view);
            });
            return descendants;
        },

        setReadyStatus: function() {
            this.model.set('_isReady', true);
        },

        setCompletionStatus: function() {
            if (this.model.get('_isVisible')) {
                this.model.set({
                    '_isComplete': true,
                    '_isInteractionComplete': true
                });
            }
        },

        resetCompletionStatus: function(type) {
            if (!this.model.get("_canReset")) return;

            var descendantComponents = this.model.findDescendantModels('components');
            if (descendantComponents.length === 0) {
                this.model.reset(type);
            } else {
                _.each(descendantComponents, function(model) {
                    model.reset(type);
                });
            }
        },

        preRemove: function() {},

        remove: function() {

            this.preRemove();
            this._isRemoved = true;

            Adapt.wait.for(function(end) {

                this.$el.off('onscreen.adaptView');
                this.model.setOnChildren('_isReady', false);
                this.model.set('_isReady', false);
                Backbone.View.prototype.remove.call(this);

                end();
            }.bind(this));

            return this;
        },

        setVisibility: function() {
            var visible = "visibility-hidden";
            if (this.model.get('_isVisible')) {
                visible = "";
            }
            return visible;
        },

        toggleVisibility: function() {
            if (this.model.get('_isVisible')) {
                return this.$el.removeClass('visibility-hidden');
            }
            this.$el.addClass('visibility-hidden');
        },

        setHidden: function() {
            var hidden = "";
            if (this.model.get('_isHidden')) {
                hidden = "display-none";
            }
            return hidden;
        },

        toggleHidden: function() {
            if (!this.model.get('_isHidden')) {
                return this.$el.removeClass('display-none');
            }
            this.$el.addClass('display-none');
        },

        onIsCompleteChange: function(model, isComplete){
            this.$el.toggleClass('completed', isComplete);
        },

        getChildViews: function() {
            return this.childViews;
        }

    });

    return AdaptView;

});

define('core/js/views/blockView',[
    'core/js/views/adaptView'
], function(AdaptView) {

    var BlockView = AdaptView.extend({

        className: function() {
            return "block " + 
            this.model.get('_id') +
            " " + this.model.get('_classes') + 
            " " + this.setVisibility() +
            " " + this.setHidden() +
            " nth-child-" +
            this.model.get("_nthChild") +
            " " + (this.model.get('_isComplete') ? 'completed' : '');
        }

    }, {
        childContainer: '.component-container',
        type: 'block',
        template: 'block'
    });

    return BlockView;

});

define('core/js/views/articleView',[
    'core/js/views/adaptView',
    'core/js/views/blockView'
], function(AdaptView, BlockView) {

    var ArticleView = AdaptView.extend({
        
        className: function() {
            return "article " +
            this.model.get('_id') +
            " " + this.model.get('_classes') +
            " " + this.setVisibility() +
            " " + this.setHidden() +
            " nth-child-" +
            this.model.get("_nthChild") +
            " " + (this.model.get('_isComplete') ? 'completed' : '');
        }

    }, {
        childContainer: '.block-container',
        childView: BlockView,
        type: 'article',
        template: 'article'
    });

    return ArticleView;

});

define('core/js/views/pageView',[
    'core/js/adapt',
    'core/js/views/adaptView',
    'core/js/views/articleView'
], function(Adapt, AdaptView, ArticleView) {

    var PageView = AdaptView.extend({

        attributes: function() {
            return AdaptView.resultExtend('attributes', {
                "aria-labelledby": this.model.get('_id')+"-heading",
                "role": "main"
            }, this);
        },

        className: function() {
            return "page " +
            this.model.get('_id') +
            " " + this.model.get('_classes') +
            " " + this.setVisibility() +
            " " + (this.model.get('_isComplete') ? 'completed' : '');
        },

        preRender: function() {
            $.inview.lock('pageView');
            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
            this.$el.css('opacity', 0);
            this.listenTo(this.model, 'change:_isReady', this.isReady);
        },

        isReady: function() {
            if (!this.model.get('_isReady')) return;

            var performIsReady = function() {
                $('.loading').hide();
                $(window).scrollTop(0);
                Adapt.trigger('pageView:ready', this);
                $.inview.unlock('pageView');
                var styleOptions = { opacity: 1 };
                if (this.disableAnimation) {
                    this.$el.css(styleOptions);
                    $.inview();
                } else {
                    this.$el.velocity(styleOptions, {
                        duration: 'fast',
                        complete: function() {
                            $.inview();
                        }
                    });
                }
                $(window).scroll();
            }.bind(this);

            Adapt.wait.queue(function() {
                _.defer(performIsReady);
            });

        },

        remove: function() {
            if (this.$pageLabel) {
                this.$pageLabel.remove();
            }
            AdaptView.prototype.remove.call(this);
        }

    }, {
        childContainer: '.article-container',
        childView: ArticleView,
        type: 'page',
        template: 'page'
    });

    return PageView;

});

define('core/js/router',[
    'core/js/adapt',
    'core/js/models/routerModel',
    'core/js/views/pageView',
    'core/js/startController'
], function(Adapt, RouterModel, PageView) {

    Adapt.router = new RouterModel(null, { reset: true });

    var Router = Backbone.Router.extend({

        // Flag to indicate if the router has tried to redirect to the current location.
        _isCircularNavigationInProgress: false,

        initialize: function() {
            this.showLoading();

            // Store #wrapper element and html to cache for later use.
            this.$wrapper = $('#wrapper');
            this.$html = $('html');

            Adapt.once('app:dataReady', function() {
                document.title = Adapt.course.get('title');
            });

            this.listenTo(Adapt, {
                'navigation:backButton': this.navigateToPreviousRoute,
                'navigation:homeButton': this.navigateToHomeRoute,
                'navigation:skipNavigation': this.skipNavigation,
                'navigation:parentButton': this.navigateToParent,
                'router:navigateTo': this.navigateToArguments
            });
        },

        routes: {
            '': 'handleRoute',
            'id/:id': 'handleRoute',
            ':pluginName(/*location)(/*action)': 'handleRoute'
        },

        pruneArguments: function(args) {
            var prunedArgs = _.toArray(args);

            if (prunedArgs.length !== 0) {
                // Remove any null arguments.
                prunedArgs = _.without(args, null);
            }

            return prunedArgs;
        },

        handleRoute: function() {
            var args = this.pruneArguments(arguments);

            if (Adapt.router.get('_canNavigate')) {
                // Reset _isCircularNavigationInProgress protection as code is allowed to navigate away.
                this._isCircularNavigationInProgress = false;
            }

            // Check if the current page is in the process of navigating to itself.
            // It will redirect to itself if the URL was changed and _canNavigate is false.
            if (this._isCircularNavigationInProgress === false) {
                // Trigger an event pre 'router:location' to allow extensions to stop routing.
                Adapt.trigger('router:navigate', args);
            }

            // Re-check as _canNavigate can be set to false on 'router:navigate' event.
            if (Adapt.router.get('_canNavigate')) {
                // Disable navigation whilst rendering.
                Adapt.router.set('_canNavigate', false, { pluginName: 'adapt' });

                switch (args.length) {
                    case 1:
                        // If only one parameter assume it's the ID.
                        return this.handleId.apply(this, args);
                    case 2:
                        // If there are two parameters assume it's a plugin.
                        return this.handlePluginRouter.apply(this, args);
                    default:
                        // Route to course home page.
                        return this.handleCourse();
                }
            }

            if (this._isCircularNavigationInProgress) {
                // Navigation correction finished.
                // Router has successfully re-navigated to the current _id as the URL was changed
                // while _canNavigate: false
                this._isCircularNavigationInProgress = false;
                return;
            }

            // Cancel navigation to stay at the current location.
            this._isCircularNavigationInProgress = true;
            Adapt.trigger('router:navigationCancelled', args);

            // Reset URL to the current one.
            this.navigateToCurrentRoute(true);
        },

        handlePluginRouter: function(pluginName, location, action) {
            var pluginLocation = pluginName;

            if (location) {
                pluginLocation = pluginLocation + '-' +location;

                if (action) {
                    pluginLocation = pluginLocation + '-' + action;
                }
            }

            this.updateLocation(pluginLocation, null, null, function() {
                Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);
                Adapt.trigger('router:plugin', pluginName, location, action);

                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
            });
        },

        handleCourse: function() {
            if (Adapt.course.has('_start')) {
                // Do not allow access to the menu when the start controller is enabled.
                var startController = Adapt.course.get('_start');

                if (startController._isEnabled == true && startController._isMenuDisabled == true) {
                    return;
                }
            }

            this.showLoading();

            this.removeViews(_.bind(function() {
                Adapt.course.set('_isReady', false);

                this.setContentObjectToVisited(Adapt.course);

                this.updateLocation('course', null, null, _.bind(function() {
                    Adapt.once('menuView:ready', function() {
                        // Allow navigation.
                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
                        this.handleNavigationFocus();
                    }.bind(this));

                    Adapt.trigger('router:menu', Adapt.course);
                }, this));
            }, this));
        },

        handleId: function(id) {
            var currentModel = Adapt.findById(id);
            var type = '';

            if (!currentModel) {
                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
                return;
            }

            type = currentModel.get('_type');

            switch (type) {
                case 'page':
                case 'menu':
                    if (currentModel.get('_isLocked') && Adapt.config.get('_forceRouteLocking')) {
                        Adapt.log.warn('Unable to navigate to locked id: ' + id);
                        Adapt.router.set('_canNavigate', true, {pluginName: 'adapt'});
                        if (Adapt.location._previousId === undefined) {
                            return this.navigate('#/', { trigger: true, replace: true });
                        } else {
                            return Backbone.history.history.back();
                        }
                    } else {
                        this.showLoading();
                        this.removeViews(_.bind(function() {

                            this.setContentObjectToVisited(currentModel);

                            if (type == 'page') {
                                var location = 'page-' + id;
                                this.updateLocation(location, 'page', id, _.bind(function() {
                                    Adapt.once('pageView:ready', function() {
                                        // Allow navigation.
                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
                                        this.handleNavigationFocus();
                                    }.bind(this));
                                    Adapt.trigger('router:page', currentModel);
                                    this.$wrapper.append(new PageView({ model: currentModel }).$el);
                                }, this));
                            } else {
                                var location = 'menu-' + id;
                                this.updateLocation(location, 'menu', id, _.bind(function() {
                                    Adapt.once('menuView:ready', function() {
                                        // Allow navigation.
                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
                                        this.handleNavigationFocus();
                                    }.bind(this));
                                    Adapt.trigger('router:menu', currentModel);
                                }, this));
                            }
                        }, this));
                    }
                    break;
                default:
                    // Allow navigation.
                    Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });
                    Adapt.navigateToElement('.' + id, { replace: true });
            }
        },

        removeViews: function(onComplete) {
            Adapt.remove();

            Adapt.wait.queue(onComplete);
        },

        showLoading: function() {
            $('.loading').show();
        },

        navigateToArguments: function(args) {
            args = this.pruneArguments(args);

            var options = { trigger: false, replace: false };

            switch (args.length) {
                case 0:
                    this.navigate('#/', options);
                    break;
                case 1:
                    if (Adapt.findById(args[0])) {
                        this.navigate('#/id/' + args[0], options);
                    } else {
                        this.navigate('#/' + args[0], options);
                    }
                    break;
                case 2:
                case 3:
                    this.navigate('#/' + args.join('/'), options);
                    break;
                default:
                    Adapt.log.warn('DEPRECATED - use Backbone.history.navigate or ' +
                        'window.location.href instead of Adapt.trigger("router:navigateTo")');
                    this.handleRoute.apply(this, args);
            }
        },

        skipNavigation: function() {
            Adapt.a11y.focusFirst('.' + Adapt.location._contentType);
        },

        navigateToPreviousRoute: function(force) {
            // Sometimes a plugin might want to stop the default navigation.
            // Check whether default navigation has changed.
            if (Adapt.router.get('_canNavigate') || force) {
                if (!Adapt.location._currentId) {
                    return Backbone.history.history.back();
                }
                if (Adapt.location._previousContentType === 'page' && Adapt.location._contentType === 'menu') {
                    return this.navigateToParent();
                }
                if (Adapt.location._previousContentType === 'page') {
                    return Backbone.history.history.back();
                }
                if (Adapt.location._currentLocation === 'course') {
                    return;
                }
                this.navigateToParent();
            }
        },

        navigateToHomeRoute: function(force) {
            if (Adapt.router.get('_canNavigate') || force ) {
                this.navigate('#/', { trigger: true });
            }
        },

        navigateToCurrentRoute: function(force) {
            if (Adapt.router.get('_canNavigate') || force) {
                if (!Adapt.location._currentId) {
                    return;
                }
                var currentId = Adapt.location._currentId;
                var route = (currentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + currentId;
                this.navigate(route, { trigger: true, replace: true });
            }
        },

        navigateToParent: function(force) {
            if (Adapt.router.get('_canNavigate') || force) {
                var parentId = Adapt.contentObjects.findWhere({ _id: Adapt.location._currentId }).get('_parentId');
                var route = (parentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + parentId;
                this.navigate(route, { trigger: true });
            }
        },

        setContentObjectToVisited: function(model) {
            model.set('_isVisited', true);
        },

        updateLocation: function(currentLocation, type, id, onComplete) {
            // Handles updating the location.
            Adapt.location._previousId = Adapt.location._currentId;
            Adapt.location._previousContentType = Adapt.location._contentType;

            if (currentLocation === 'course') {
                Adapt.location._currentId = Adapt.course.get('_id');
                Adapt.location._contentType = 'menu';
                Adapt.location._lastVisitedMenu = currentLocation;
            } else if (!type) {
                Adapt.location._currentId = null;
                Adapt.location._contentType = null;
            } else if (_.isString(id)) {
                Adapt.location._currentId = id;
                Adapt.location._contentType = type;

                if (type === 'menu') {
                    Adapt.location._lastVisitedType = 'menu';
                    Adapt.location._lastVisitedMenu = id;
                } else if (type === 'page') {
                    Adapt.location._lastVisitedType = 'page';
                    Adapt.location._lastVisitedPage = id;
                }
            }

            Adapt.location._currentLocation = currentLocation;

            var locationModel = Adapt.findById(id) || Adapt.course;
            var htmlClassName = locationModel && locationModel.get('_htmlClassName') || '';

            var classes = (Adapt.location._currentId) ? 'location-'
                    + Adapt.location._contentType
                    + ' location-id-'
                    + Adapt.location._currentId :
                    'location-' + Adapt.location._currentLocation;

            var previousClasses = Adapt.location._previousClasses;
            if (previousClasses) {
                this.$html.removeClass(previousClasses);
            }

            Adapt.location._previousClasses = classes + ' ' + htmlClassName;

            this.$html
                .addClass(classes)
                .addClass(htmlClassName)
                .attr('data-location', Adapt.location._currentLocation);

            this.$wrapper
                .removeClass()
                .addClass(classes)
                .attr('data-location', Adapt.location._currentLocation);

            this.setDocumentTitle();

            // Trigger event when location changes.
            Adapt.trigger('router:location', Adapt.location);

            Adapt.wait.queue(onComplete);
        },

        setDocumentTitle: function() {
            if (!Adapt.location._currentId) return;

            var currentModel = Adapt.findById(Adapt.location._currentId);
            var pageTitle = '';

            if (currentModel && currentModel.get('_type') !== 'course') {
                var currentTitle = currentModel.get('title');

                if (currentTitle) {
                    pageTitle = ' | ' + currentTitle;
                }
            }

            var courseTitle = Adapt.course.get('title');
            var documentTitle = $('<div>' + courseTitle + pageTitle + '</div>').text();

            Adapt.once('pageView:ready menuView:ready', function() {
                document.title = documentTitle;
            });
        },

        handleNavigationFocus: function() {
            if (!Adapt.router.get("_shouldNavigateFocus")) return;
            // Body will be forced to accept focus to start the
            // screen reader reading the page.
            Adapt.a11y.focus('body');
        }
    });

    return new Router({ model: new Backbone.Model() });

});

define('core/js/helpers',[
    'handlebars',
    'core/js/adapt'
], function(Handlebars, Adapt){

    var defaultAriaLevels = {
        '_menu': 1,
        '_menuItem': 2,
        '_page': 1,
        '_article': 2,
        '_block': 3,
        '_component': 4,
        '_componentItem': 5,
        '_notify': 1
    };

    var helpers = {

        lowercase: function(text) {
            return text.toLowerCase();
        },

        capitalise:  function(text) {
            return text.charAt(0).toUpperCase() + text.slice(1);
        },

        inc: function(index) {
            return index+1;
        },

        dec: function(index) {
            return index-1;
        },

        odd: function (index) {
            return (index +1) % 2 === 0  ? 'even' : 'odd';
        },

        equals: function(value, text, block) {
            return helpers.compare.call(this, value, '==', text, block);
        },

        compare: function(value, operator, text, block) {
            // Comparison operators
            switch (operator) {
            case '===':
                if (value === text) return block.fn(this);
                break;
            case '=': case '==':
                if (value == text) return block.fn(this);
                break;
            case '>=':
                if (value >= text) return block.fn(this);
                break;
            case '<=':
                if (value <= text) return block.fn(this);
                break;
            case '>':
                if (value > text) return block.fn(this);
                break;
            case '<':
                if (value < text) return block.fn(this);
                break;
            }
            return block.inverse(this);
        },

        math: function(lvalue, operator, rvalue, options) {
            // Mathematical operators
            lvalue = parseFloat(lvalue);
            rvalue = parseFloat(rvalue);
            switch (operator) {
            case '+': return lvalue + rvalue;
            case '-': return lvalue - rvalue;
            case '*': return lvalue * rvalue;
            case '/': return lvalue / rvalue;
            case '%': return lvalue % rvalue;
            }
        },

        /**
         * Equivalent to:
         *  if (conditionA || conditionB)
         * @example
         * {{#any displayTitle body instruction}}
         * <div class='component__header {{_component}}__header'></div>
         * {{/any}}
         */
        any: function() {
            var args = Array.prototype.slice.call(arguments, 0, -1);
            var block = Array.prototype.slice.call(arguments, -1)[0];

            return _.any(args) ? block.fn(this) : block.inverse(this);
        },

        /**
         * Equivalent to:
         *  if (conditionA && conditionB)
         * @example
         * {{#all displayTitle body instruction}}
         * <div class='component__header {{_component}}__header'></div>
         * {{/all}}
         */
        all: function() {
            var args = Array.prototype.slice.call(arguments, 0, -1);
            var block = Array.prototype.slice.call(arguments, -1)[0];

            return _.all(args) ? block.fn(this) : block.inverse(this);
        },

        /**
         * Allow JSON to be a template i.e. you can use handlebars {{expressions}} within your JSON
         */
        compile: function(template, context) {
            if (!template) {
                return '';
            }
            if (template instanceof Object) template = template.toString();
            var data = this;
            if (context) {
                // choose between a passed argument context or the default handlebars helper context
                data = (!context.data || !context.data.root ? context : context.data.root);
            }
            return Handlebars.compile(template)(data);
        },

        /**
         * Allow JSON to be a template and accessible text
         */
        compile_a11y_text: function(template, context) {
            Adapt.a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
            return helpers.compile.call(this, template, context);
        },

        /**
         * Allow JSON to be a template and normalized text
         */
        compile_a11y_normalize: function(template, context) {
            if (!template) {
                return '';
            }
            if (template instanceof Object) template = template.toString();
            return Handlebars.helpers.a11y_normalize.call(this, helpers.compile.call(this, template, context));
        },

        /**
         * Remove all html tags except styling tags
         */
        compile_a11y_remove_breaks: function(template, context) {
            if (!template) {
                return '';
            }
            return Handlebars.helpers.a11y_remove_breaks.call(this, helpers.compile.call(this, template, context));
        },

        /**
         * makes the _globals object in course.json available to a template
         */
        import_globals: function(context) {
            if (context.data.root._globals) {
                return '';
            }
            context.data.root._globals = Adapt.course.get('_globals');
            return '';
        },

        /**
         * makes the Adapt module data available to a template
         */
        import_adapt: function(context) {

            if (context.data.root.Adapt) {
                return;
            }
            var adapt = context.data.root.Adapt = {};

            var i, l, name;

            var directImport = ['config','course'];
            for (i = 0, l = directImport.length; i < l; i++) {
                name = directImport[i];
                // convert the model to a json object and add to the current context
                adapt[name] = Adapt[name].toJSON();
            }

            var indexedImport = ['contentObjects','articles','blocks','components'];
            for (i = 0, l = indexedImport.length; i < l; i++) {
                name = indexedImport[i];
                // convert the collection of models to an array of json objects
                var importArray = Adapt[name].toJSON();
                // convert the array of json models to an object indexed by id
                var importIndex = {};
                for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {
                    var item = importArray[i1];
                    importIndex[item._id] = item;
                }
                // add the indexed object to the current context
                adapt[name] = importIndex;
            }

            return '';

        },

        /**
         * Allow components to fetch their component description.
         *
         * Creates an aria label using the `a11y_aria_label` helper containing
         * the component description specified in the
         * `_globals._component[componentName].ariaRegion`. This value is defined
         * in the `properties.schema:globals.ariaRegion`.
         *
         * @param {string} [override]
         * @returns {string}
         */
        component_description: function(override, context) {
            if (!this._isA11yComponentDescriptionEnabled) {
                return;
            }
            var isNotDefined = (!this._globals._components || !this._globals._components['_'+this._component]);
            if (isNotDefined) {
                return;
            }
            var hasOverride = (arguments.length > 1);
            var description;
            if (hasOverride) {
                description = override;
                description = helpers.compile(description, context);
            } else {
                description = this._globals._components['_'+this._component].ariaRegion;
                description = helpers.compile(description, override);
            }
            if (!description) {
                return;
            }
            return new Handlebars.SafeString('<div class="aria-label">'+description+'</div>');
        },

        a11y_text: function(text) {
            Adapt.a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
            return text;
        },

        /**
         * Handlebars helper for `Adapt.a11y.normalize(htmls)`.
         *
         * @param {string} htmls Any htmls.
         * @returns {string}
         */
        a11y_normalize: function(htmls) {
            return Adapt.a11y.normalize.apply(Adapt.a11y, arguments);
        },

        /**
         * Handlebars helper for `Adapt.a11y.removeBreaks(htmls)`.
         *
         * @param {string} htmls Any htmls.
         * @returns {string}
         */
        a11y_remove_breaks: function(htmls) {
            return Adapt.a11y.removeBreaks.apply(Adapt.a11y, arguments);
        },

        /**
         * Creates a div styled with tiny, transparent text.
         * It it absolutely positioned.
         * The text is not visibly readable but is read by screen readers.
         *
         * @param {string} htmls
         * @returns {string}
         */
        a11y_aria_label: function(htmls) {
            var values = Array.prototype.slice.call(arguments, 0,-1);
            values = values.filter(Boolean);
            return new Handlebars.SafeString('<div class="aria-label">'+values.join(' ')+'</div>');
        },

        /**
         * Creates a div styled with tiny, transparent text.
         * It it relatively positioned.
         * The text is not visibly readable but is read by screen readers.
         *
         * @param {string} htmls Aria label texts.
         * @returns {string}
         */
        a11y_aria_label_relative: function(htmls) {
            var values = Array.prototype.slice.call(arguments, 0,-1);
            values = values.filter(Boolean);
            return new Handlebars.SafeString('<div class="aria-label relative">'+values.join(' ')+'</div>');
        },

        /**
         * Creates a div styled with tiny, transparent text and `role"=img"`.
         * It is used for representing an image to a screen reader user in an
         * order which cannot be represented in the DOM in a way that achieves the
         * styling objectives.
         * It it absolutely positioned.
         * The text is not visibly readable but is read by screen readers.
         *
         * @param {string} texts Aria label texts.
         * @returns {string}
         */
        a11y_aria_image: function(texts) {
            var values = Array.prototype.slice.call(arguments, 0,-1);
            values = values.filter(Boolean);
            return new Handlebars.SafeString('<div class="aria-label" role="img" aria-label="'+values.join(' ')+'"></div>');
        },

        /**
         * Returns an `a` tag which when receiving focus causes the focus to wrap
         * to the top of the readable document.
         *
         * @returns {string}
         */
        a11y_wrap_focus: function() {
            var cfg = Adapt.config.get('_accessibility');
            if (cfg._isPopupWrapFocusEnabled === false) return '';
            return new Handlebars.SafeString('<a class="a11y-focusguard a11y-ignore a11y-ignore-focus" role="presentation">&nbsp;</a>');
        },

        /**
         * Creates the attributes for a subject heading text. `role="heading"` and
         * `aria-level="#"`. It will use the `_ariaLevel` attribute from the current
         * context if specified, a number if given as the `levelOrType` parameter,
         * or a name from the configured aria levels hash.
         *
         * @param {number|string} levelOrType
         * @returns {string}
         */
        a11y_attrs_heading: function(levelOrType) {
            // get the global configuration from config.json
            var cfg = Adapt.config.get('_accessibility');
            // default level to use if nothing overrides it
            var level = 1;

            // first check to see if the Handlebars context has an override
            if (this._ariaLevel) {
                levelOrType = this._ariaLevel;
            }

            if (isNaN(levelOrType) === false) {
                // if a number is passed just use this
                level = levelOrType;
            } else if (_.isString(levelOrType)) {
                // if a string is passed check if it is defined in global configuration
                cfg._ariaLevels = cfg._ariaLevels || defaultAriaLevels;
                if (cfg._ariaLevels && cfg._ariaLevels['_'+levelOrType] !== undefined) {
                    level = cfg._ariaLevels['_'+levelOrType];
                }
            }

            return new Handlebars.SafeString(' role="heading" aria-level="'+level+'" ');
        },

        a11y_attrs_tabbable: function() {
            Adapt.a11y.log.deprecated('a11y_attrs_tabbable should not be used. tabbable elements should be natively tabbable.');
            return new Handlebars.SafeString(' role="region" tabindex="0" ');
        },

        /**
         * Produce display text with alternative screen reader version.
         * @param {string} visible Text that will be displayed on screen
         * @param {string} alternatives Text that will be read by the screen reader (instead of what's displayed on screen)
         * @example {{a11y_alt_text '$5bn' 'five billion dollars'}} or {{a11y_alt_text 'Here are some bits to read' 'There are' _items.length 'items to read'}}
         */
        a11y_alt_text: function(visible, alternatives) {
            var values = Array.prototype.slice.call(arguments, 1, -1);
            values = values.filter(Boolean);
            return new Handlebars.SafeString('<span aria-hidden="true">'+visible+'</span><span class="aria-label">'+values.join(' ')+'</span>');
        }

    };

    // Compatibility references
    _.extend(helpers, {

        if_value_equals: function() {
            Adapt.a11y.log.deprecated('if_value_equals, use equals instead.');
            return helpers.equals.apply(this, arguments);
        },

        numbers: function() {
            Adapt.a11y.log.deprecated('numbers, use inc instead.');
            return helpers.inc.apply(this, arguments);
        },

        lowerCase: function() {
            Adapt.a11y.log.deprecated('lowerCase, use lowercase instead.');
            return helpers.lowercase.apply(this, arguments);
        }

    });

    for (var name in helpers) {
        if (!helpers.hasOwnProperty(name)) continue;
        Handlebars.registerHelper(name, helpers[name]);
    }

    return helpers;

});

define('core/js/scrolling',[
    'core/js/adapt'
], function(Adapt) {

    var Scrolling = Backbone.Controller.extend({

        $html: null,
        $app: null,
        isLegacyScrolling : true,

        initialize: function() {
            this._checkApp();
            Adapt.once('configModel:dataLoaded', this._loadConfig.bind(this));
        },

        _checkApp: function() {
            this.$html = $('html');
            this.$app = $('#app');
            if (this.$app.length) return;
            this.$app = $('<div id="app">');
            $('body').append(this.$app);
            this.$app.append($('#wrapper'));
            Adapt.log.warn("UPDATE - Your html file needs to have #app adding. See https://github.com/adaptlearning/adapt_framework/issues/2168");
        },

        _loadConfig: function() {
            var config = Adapt.config.get("_scrollingContainer");
            if (!config || !config._isEnabled) return;
            var limitTo = config._limitToSelector;
            var isIncluded = !limitTo || (this.$html.is(limitTo) || this.$html.hasClass(limitTo));
            if (!isIncluded) return;
            this.isLegacyScrolling = false;
            this._addStyling();
            this._fixJQuery();
            this._fixScrollTo();
            this._fixBrowser();
        },

        _addStyling: function() {
            this.$html.addClass("adapt-scrolling");
        },

        _fixJQuery: function() {
            var selectorScrollTop = $.fn.scrollTop;
            var $app = Adapt.scrolling.$app;
            $.fn.scrollTop = function() {
                if (this[0] === window || this[0] === document.body) {
                    return selectorScrollTop.apply($app, arguments);
                }
                return selectorScrollTop.apply(this, arguments);
            };
            var selectorOffset = $.fn.offset;
            $.fn.offset = function(coordinates) {
                if (coordinates) {
                    return selectorOffset.apply(this, arguments);
                }
                var $app = Adapt.scrolling.$app;
                var $element = this;
                var elementOffset = selectorOffset.call($element);
                var isCorrectedContainer = $element.parents().add($element).filter('html,body,#app').length;
                if (!isCorrectedContainer) {
                    // Do not adjust the offset measurement as not in $app container and isn't html or body
                    return elementOffset;
                }
                // Adjust measurement by scrolling and offset of $app container
                var scrollTop = parseInt($app.scrollTop());
                var scrollLeft = parseInt($app.scrollLeft());
                var appOffset = selectorOffset.call($app);
                elementOffset.top += (scrollTop - appOffset.top);
                elementOffset.left += (scrollLeft - appOffset.left);
                return elementOffset;
            };
        },

        _fixScrollTo: function() {
            var selectorScrollTo = $.fn.scrollTo;
            var scrollTo = $.scrollTo;
            var $app = Adapt.scrolling.$app;
            $.fn.scrollTo = function(target, duration, settings) {
                if (this[0] === window || this[0] === document.body) {
                    return selectorScrollTo.apply($app, arguments);
                }
                return selectorScrollTo.apply(this, arguments);
            };
            $.scrollTo = function(target, duration, settings) {
                return selectorScrollTo.apply($app, arguments);
            };
            _.extend($.scrollTo, scrollTo);
        },

        _fixBrowser: function() {
            var app = Adapt.scrolling.$app[0];
            window.scrollTo = function(x, y) {
                app.scrollTop = y || 0;
                app.scrollLeft = x || 0;
            };
            var $window = $(window);
            this.$app.on("scroll", function() {
                $window.scroll();
            });
        }

    });

    Adapt.scrolling = new Scrolling();

    Adapt.scrollTo = function(selector, settings) {
        // Get the current location - this is set in the router
        var location = (Adapt.location._contentType) ?
            Adapt.location._contentType : Adapt.location._currentLocation;
        // Trigger initial scrollTo event
        Adapt.trigger(location+':scrollTo', selector);
        //Setup duration variable passed upon arguments
        var settings = (settings || {});
        var disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
        if (disableScrollToAnimation) {
            settings.duration = 0;
        }
        else if (!settings.duration) {
            settings.duration = $.scrollTo.defaults.duration;
        }

        var offsetTop = 0;
        if (Adapt.scrolling.isLegacyScrolling) {
            offsetTop = -$(".navigation").outerHeight();
            // prevent scroll issue when component description aria-label coincident with top of component
            if ($(selector).hasClass('component')) {
                offsetTop -= $(selector).find('.aria-label').height() || 0;
            }
        }

        if (!settings.offset) settings.offset = { top: offsetTop, left: 0 };
        if (settings.offset.top === undefined) settings.offset.top = offsetTop;
        if (settings.offset.left === undefined) settings.offset.left = 0;

        if (settings.offset.left === 0) settings.axis = "y";

        if (Adapt.get("_canScroll") !== false) {
            // Trigger scrollTo plugin
            $.scrollTo(selector, settings);
        }

        // Trigger an event after animation
        // 300 milliseconds added to make sure queue has finished
        _.delay(function() {
            Adapt.a11y.focusNext(selector);
            Adapt.trigger(location+':scrolledTo', selector);
        }, settings.duration+300);
    };

});

define('core/js/views/headingView',[
    'core/js/adapt'
], function(Adapt) {

    var HeadingView = Backbone.View.extend({

        initialize: function() {
            this.listenTo(Adapt, "remove", this.remove);
            this.listenTo(this.model, "change:_isComplete", this.render);
            this.render();
        },

        render: function() {
            var template = Handlebars.templates[this.constructor.template];
            var data = this.model.toJSON();
            var customHeadingType = this.$el.attr('data-a11y-heading-type');
            if (customHeadingType) data._type = customHeadingType;
            this.$el.html(template(data));
            this.checkCompletion();
        },

        checkCompletion: function() {
            var isComplete = this.model.get("_isComplete");
            this.$el
            .toggleClass("complete", isComplete)
            .toggleClass("incomplete", !isComplete);
        }

    }, {
        template: 'heading'
    });

    return HeadingView;

});

define('core/js/headings',[
    './adapt',
    './views/headingView'
], function(Adapt, HeadingView) {

    var Headings = Backbone.Controller.extend({

        initialize: function() {
            var types = [ 'menu', 'page', 'article', 'block', 'component' ];
            var eventNames = types.concat(['']).join('View:render ');
            this.listenTo(Adapt, eventNames, this.onViewRender);
        },

        onViewRender: function(view) {
            var $headingSeats = view.$('.js-heading');
            $headingSeats.each(function(index, el) {
                new HeadingView({
                    el: el,
                    model: view.model
                });
            });
        }

    });

    return new Headings();

});



define('core/js/views/navigationView',[
    'core/js/adapt'
], function(Adapt) {

    var NavigationView = Backbone.View.extend({

        className: "navigation",

        initialize: function() {
            this.listenToOnce(Adapt, {
                'courseModel:dataLoading': this.remove
            });
            this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);
            this.template = "navigation";
            this.preRender();
        },

        events: {
            'click [data-event]':'triggerEvent'
        },

        attributes: {
            'role': 'navigation'
        },

        preRender: function() {
            Adapt.trigger('navigationView:preRender', this);
            this.render();
        },

        render: function() {
            var template = Handlebars.templates[this.template];
            this.$el.html(template(
                {
                    _globals: Adapt.course.get("_globals"),
                    _accessibility: Adapt.config.get("_accessibility")
                }
            )).insertBefore('#app');

            _.defer(_.bind(function() {
                Adapt.trigger('navigationView:postRender', this);
            }, this));

            return this;
        },

        triggerEvent: function(event) {
            event.preventDefault();
            var currentEvent = $(event.currentTarget).attr('data-event');
            Adapt.trigger('navigation:' + currentEvent);
        },

        hideNavigationButton: function(model) {
            if (model.get('_type') === "course") {
                $('.navigation-back-button, .navigation-home-button').addClass('display-none');
            } else {
                this.showNavigationButton();
            }
        },

        showNavigationButton: function() {
            $('.navigation-back-button, .navigation-home-button').removeClass('display-none');
        }

    });

    return NavigationView;

});

define('core/js/navigation',[
    'core/js/adapt',
    'core/js/views/navigationView'
], function(Adapt, NavigationView) {


    var NavigationController = Backbone.Controller.extend({

        initialize: function() {
            this.listenTo(Adapt, 'adapt:preInitialize', this.addNavigationBar);
        },

        addNavigationBar: function() {

            var adaptConfig = Adapt.course.get('_navigation');

            if (adaptConfig && adaptConfig._isDefaultNavigationDisabled) {
                Adapt.trigger('navigation:initialize');
                return;
            }

            Adapt.navigation = new NavigationView();// This should be triggered after 'app:dataReady' as plugins might want to manipulate the navigation
        }

    });

    return new NavigationController();

});

define('core/js/views/componentView',[
    'core/js/adapt',
    'core/js/views/adaptView'
], function(Adapt, AdaptView) {

    var ComponentView = AdaptView.extend({

        attributes: function() {
            if (!this.model.get("_isA11yRegionEnabled")) {
                return AdaptView.resultExtend('attributes', {}, this);
            }
            return AdaptView.resultExtend('attributes', {
                "aria-labelledby": this.model.get('_id')+"-heading",
                "role": "region"
            }, this);
        },

        className: function() {
            return [
                'component',
                this.model.get('_component') +'-component',
                this.model.get('_id'),
                this.model.get('_classes'),
                this.setVisibility(),
                this.setHidden(),
                'component-' + this.model.get('_layout'),
                'nth-child-' + this.model.get('_nthChild'),
                (this.model.get('_isComplete') ? 'completed' : '')
            ].join(' ');
        },

        renderState: function() {
            Adapt.log.warn("REMOVED - renderState is removed and moved to item title");
        },

        /**
         * Allows components that want to use inview for completion to set that up
         * @param {string} [inviewElementSelector] Allows to you to specify (via a selector) which DOM element to use for inview.
         * Defaults to `'.component-inner'` if not supplied.
         * @param {function} [callback] Allows you to specify what function is called when the component has been viewed, should
         * you want to perform additional checks before setting the component to completed - see adapt-contrib-assessmentResults
         * for an example. Defaults to `view.setCompletionStatus` if not specified.
         */
        setupInviewCompletion: function(inviewElementSelector, callback) {
            this.$inviewElement = this.$(inviewElementSelector || '.component-inner');
            this.inviewCallback = (callback || this.setCompletionStatus);

            this.$inviewElement.on('inview.componentView', this.onInview.bind(this));
        },

        removeInviewListener: function() {
            if (!this.$inviewElement) return;
            this.$inviewElement.off('inview.componentView');
            this.$inviewElement = null;
        },

        onInview: function(event, visible, visiblePartX, visiblePartY) {
            if (!visible) return;

            switch (visiblePartY) {
                case 'top':
                    this.hasSeenTop = true;
                    break;
                case 'bottom':
                    this.hasSeenBottom = true;
                    break;
                case 'both':
                    this.hasSeenTop = this.hasSeenBottom = true;
            }

            if (!this.hasSeenTop || !this.hasSeenBottom) return;

            this.inviewCallback();

            if (this.model.get('_isComplete')) {
                this.removeInviewListener();
            }
        },

        postRender: function() {},

        remove: function() {
            this.removeInviewListener();

            AdaptView.prototype.remove.call(this);
        }

    }, {
        type:'component'
    });

    return ComponentView;

});

define('components/adapt-contrib-narrative/js/modeEnum',[],function() {

    return new ENUM([
        'SMALL',
        'LARGE'
    ]);

});

define('components/adapt-contrib-narrative/js/narrativeView',[
    'core/js/adapt',
    'core/js/views/componentView',
    './modeEnum'
], function(Adapt, ComponentView, MODE) {
    'use strict';

    var NarrativeView = ComponentView.extend({

        _isInitial: true,

        events: {
            'click .narrative-strapline-title': 'openPopup',
            'click .narrative-controls': 'onNavigationClicked',
            'click .narrative-indicators .narrative-progress': 'onProgressClicked'
        },

        preRender: function() {
            this.listenTo(Adapt, {
                'device:changed device:resize': this.reRender,
                'notify:closed': this.closeNotify
            });
            this.renderMode();

            this.listenTo(this.model.get('_children'), {
                'change:_isActive': this.onItemsActiveChange,
                'change:_isVisited': this.onItemsVisitedChange
            });

            this.checkIfResetOnRevisit();
            this.calculateWidths();
        },

        onItemsActiveChange: function(item, _isActive) {
            if (_isActive === true) {
                this.setStage(item);
            }
        },

        onItemsVisitedChange: function(item, isVisited) {
            if (!isVisited) return;
            this.$('[data-index="' + item.get('_index') + '"]').addClass('visited');
        },

        calculateMode: function() {
            var mode = Adapt.device.screenSize === 'large' ?
                MODE.LARGE :
                MODE.SMALL;
            this.model.set('_mode', mode);
        },

        renderMode: function() {
            this.calculateMode();
            if (this.isLargeMode()) {
                this.$el.addClass('mode-large').removeClass('mode-small');
            } else {
                this.$el.addClass('mode-small').removeClass('mode-large');
            }
        },

        isLargeMode: function() {
            return this.model.get('_mode') === MODE.LARGE;
        },

        postRender: function() {
            this.renderMode();
            this.setupNarrative();

            this.$('.narrative-slider').imageready(this.setReadyStatus.bind(this));

            if (Adapt.config.get('_disableAnimation')) {
                this.$el.addClass('disable-animation');
            }
        },

        checkIfResetOnRevisit: function() {
            var isResetOnRevisit = this.model.get('_isResetOnRevisit');
            // If reset is enabled set defaults
            if (isResetOnRevisit) {
                this.model.reset(isResetOnRevisit);
            }
        },

        setupNarrative: function() {
            this.renderMode();
            var items = this.model.get('_children');
            if (!items || !items.length) return;

            var activeItem = this.model.getActiveItem();
            if (!activeItem) {
                activeItem = this.model.getItem(0);
                activeItem.toggleActive(true);
            } else {
                // manually trigger change as it is not fired on reentry
                items.trigger('change:_isActive', activeItem, true);
            }

            this.calculateWidths();

            if (!this.isLargeMode() && !this.model.get('_wasHotgraphic')) {
                this.replaceInstructions();
            }
            this.setupEventListeners();
            this._isInitial = false;
        },

        calculateWidths: function() {
            var itemCount = this.model.get('_children').length;
            var narrativeWidthRatio = this.model.get('narrativeWidthRatio');
            this.model.set({
                '_totalWidth': 100 * itemCount,
                '_itemWidth': 100 / itemCount,
              '_slideContainerWidth': narrativeWidthRatio && window && window.innerWidth > 765 ? (parseInt(narrativeWidthRatio) - 2) : undefined,
              '_contentWidth': narrativeWidthRatio && window && window.innerWidth > 765 ? (100 - parseInt(narrativeWidthRatio) - 2) : undefined
            });
        },

        resizeControl: function() {
            var previousMode = this.model.get('_mode');
            this.renderMode();
            if (previousMode !== this.model.get('_mode')) this.replaceInstructions();
            this.evaluateNavigation();
            var activeItem = this.model.getActiveItem();
            if (activeItem) this.setStage(activeItem);
        },

        reRender: function() {
            if (this.model.get('_wasHotgraphic') && this.isLargeMode()) {
                this.replaceWithHotgraphic();
            } else if(this.model.get('_wasGuidedtour') && this.isLargeMode()) {
              this.replaceWithGuidedtour();
            }else {
                this.resizeControl();
            }
        },

        closeNotify: function() {
            this.evaluateCompletion();
        },

        replaceInstructions: function() {
            if (this.isLargeMode()) {
                this.$('.narrative-instruction-inner').html(this.model.get('instruction'));
            } else if (this.model.get('mobileInstruction') && !this.model.get('_wasHotgraphic')) {
                this.$('.narrative-instruction-inner').html(this.model.get('mobileInstruction'));
            }
        },

        replaceWithHotgraphic: function() {
            if (!Adapt.componentStore.hotgraphic) throw "Hotgraphic not included in build";
            var HotgraphicView = Adapt.componentStore.hotgraphic.view;

            var model = this.prepareHotgraphicModel();
            var newHotgraphic = new HotgraphicView({ model: model });
            var $container = $(".component-container", $("." + this.model.get("_parentId")));

            $container.html(newHotgraphic.$el);
            this.remove();
            $.a11y_update();
            _.defer(function() {
                //Adapt.trigger('device:resize');
            });
        },

        prepareHotgraphicModel: function() {
            var model = this.model;
            model.resetActiveItems();
            model.set({
                '_isPopupOpen': false,
                '_component': 'hotgraphic',
                'body': model.get('originalBody'),
                'instruction': model.get('originalInstruction')
            });

            return model;
        },

        replaceWithGuidedtour: function() {
          if (!Adapt.componentStore.guidedtour) throw "Guidedtour not included in build";
          var GuidedtourView = Adapt.componentStore.guidedtour.view;

          var model = this.prepareGuidedtourModel();
          var newGuidedtour = new GuidedtourView({ model: model });
          var $container = $(".component-container", $("." + this.model.get("_parentId")));

          $container.html(newGuidedtour.$el);
          this.remove();
          $.a11y_update();
          _.defer(function() {
              //Adapt.trigger('device:resize');
          });
      },

      prepareGuidedtourModel: function() {
          var model = this.model;
          model.set({
              '_component': 'guidedtour',
              'body': model.get('originalBody'),
              'instruction': model.get('originalInstruction')
          });

          return model;
      },

        moveSliderToIndex: function(itemIndex) {
            var offset = this.model.get('_itemWidth') * itemIndex;
            if (Adapt.config.get('_defaultDirection') === 'ltr') {
                offset *= -1;
            }
            var cssValue = 'translateX('+offset+'%)';
            var $sliderElm = this.$('.narrative-slider');
            var $straplineHeaderElm = this.$('.narrative-strapline-header-inner');

            $sliderElm.css('transform', cssValue);
            $straplineHeaderElm.css('transform', cssValue);

            if (Adapt.config.get('_disableAnimation') || this._isInitial) {
                this.onTransitionEnd();
            } else {
                $sliderElm.one('transitionend', this.onTransitionEnd.bind(this));
            }
        },

        onTransitionEnd: function() {
            if (this._isInitial) return;

            var index = this.model.getActiveItem().get('_index');
            if (this.isLargeMode()) {
                this.$('.narrative-content-item[data-index="'+index+'"]').a11y_focus();
            } else {
                this.$('.narrative-strapline-title').a11y_focus();
            }
        },

        setStage: function(item) {
            var index = item.get('_index');
            if (this.isLargeMode()) {
                // Set the visited attribute for large screen devices
                item.toggleVisited(true);
            }

            var $slideGraphics = this.$('.narrative-slider-graphic');
            this.$('.narrative-progress:visible').removeClass('selected').filter('[data-index="'+index+'"]').addClass('selected');
            $slideGraphics.children('.controls').a11y_cntrl_enabled(false);
            $slideGraphics.filter('[data-index="'+index+'"]').children('.controls').a11y_cntrl_enabled(true);
            this.$('.narrative-content-item').addClass('narrative-hidden').a11y_on(false).filter('[data-index="'+index+'"]').removeClass('narrative-hidden').a11y_on(true);
            this.$('.narrative-strapline-title').a11y_cntrl_enabled(false).filter('[data-index="'+index+'"]').a11y_cntrl_enabled(true);

            this.evaluateNavigation();
            this.evaluateCompletion();
            this.moveSliderToIndex(index);
        },

        evaluateNavigation: function() {
            var active = this.model.getActiveItem();
            if (!active) return;

            var currentStage = active.get('_index');
            var itemCount = this.model.get('_children').length;

            var isAtStart = currentStage === 0;
            var isAtEnd = currentStage === itemCount - 1;

            this.$('.narrative-control-left').toggleClass('narrative-hidden', isAtStart);
            this.$('.narrative-control-right').toggleClass('narrative-hidden', isAtEnd);
        },

        evaluateCompletion: function() {
            if (this.model.areAllItemsCompleted()) {
                this.trigger('allItems');
            }
        },

        openPopup: function(event) {
            event && event.preventDefault();

            var currentItem = this.model.getActiveItem();
            Adapt.trigger('notify:popup', {
                title: currentItem.get('title'),
                body: currentItem.get('body')
            });

            Adapt.on('popup:opened', function() {
                // Set the visited attribute for small and medium screen devices
                currentItem.toggleVisited(true);
            });
        },

        onNavigationClicked: function(event) {
            var stage = this.model.getActiveItem().get('_index');

            if ($(event.currentTarget).hasClass('narrative-control-right')) {
                this.model.setActiveItem(++stage);
            } else if ($(event.currentTarget).hasClass('narrative-control-left')) {
                this.model.setActiveItem(--stage);
            }
        },

        onProgressClicked: function(event) {
            event && event.preventDefault();
            var clickedIndex = $(event.target).data('index');
            this.model.setActiveItem(clickedIndex);
        },

        setupEventListeners: function() {
            if (this.model.get('_setCompletionOn') === 'inview') {
                this.setupInviewCompletion('.component-widget');
            }
        }

    });

    return NarrativeView;

});
define('core/js/models/itemModel',[],function() {

    var ItemModel = Backbone.Model.extend({

        defaults: {
            _isActive: false,
            _isVisited: false
        },

        reset: function() {
            this.set({ _isActive: false, _isVisited: false });
        },

        toggleActive: function(isActive) {
            if (isActive === undefined) {
                isActive = !this.get('_isActive');
            }

            this.set('_isActive', isActive);
        },

        toggleVisited: function(isVisited) {
            if (isVisited === undefined) {
                isVisited = !this.get('_isVisited');
            }

            this.set('_isVisited', isVisited);
        }

    });

    return ItemModel;

});

define('core/js/models/itemsComponentModel',[
    'core/js/models/componentModel',
    'core/js/models/itemModel'
], function(ComponentModel, ItemModel) {

    var ItemsComponentModel = ComponentModel.extend({

        toJSON: function() {
            var json = _.clone(this.attributes);
            json._items = this.get('_children').toJSON();

            return json;
        },

        init: function() {
            this.setUpItems();

            this.listenTo(this.get('_children'), {
                'change:_isVisited': this.checkCompletionStatus
            });
        },

        setUpItems: function() {
            var items = this.get('_items') || []; // see https://github.com/adaptlearning/adapt_framework/issues/2480
            items.forEach(function(item, index) {
                item._index = index;
            });

            this.set('_children', new Backbone.Collection(items, { model: ItemModel }));
        },

        getItem: function(index) {
            return this.get('_children').findWhere({ _index: index });
        },

        getVisitedItems: function() {
            return this.get('_children').where({ _isVisited: true });
        },

        getActiveItems: function() {
            return this.get('_children').where({ _isActive: true });
        },

        getActiveItem: function() {
            return this.get('_children').findWhere({ _isActive: true });
        },

        areAllItemsCompleted: function() {
            return this.getVisitedItems().length === this.get('_children').length;
        },

        checkCompletionStatus: function() {
            if (this.areAllItemsCompleted()) {
                this.setCompletionStatus();
            }
        },

        reset: function(type, force) {
            this.get('_children').each(function(item) { item.reset(); });

            ComponentModel.prototype.reset.call(this, type, force);
        },

        resetActiveItems: function() {
            this.get('_children').each(function(item) { item.toggleActive(false); });
        },

        setActiveItem: function(index) {
            var activeItem = this.getActiveItem();
            if (activeItem) activeItem.toggleActive(false);
            this.getItem(index).toggleActive(true);
        }

    });

    return ItemsComponentModel;

});

define('components/adapt-contrib-narrative/js/adapt-contrib-narrative',[
    'core/js/adapt',
    './narrativeView',
    'core/js/models/itemsComponentModel'
], function(Adapt, NarrativeView, ItemsComponentModel) {

    return Adapt.register('narrative', {
        model: ItemsComponentModel,
        view: NarrativeView
    });

});

define('components/adapt-esdc-tour/js/guidedtourView',[
  'core/js/adapt',
  'core/js/views/componentView'
], function (Adapt, ComponentView) {
  'use strict';

  var GuidedTourView = ComponentView.extend({

    events: {
      'click .start-tour': 'onStartTour'
    },

    initialize: function () {
      ComponentView.prototype.initialize.call(this);
      this.checkIfResetOnRevisit();
      this.scrollToPositionBound = this.scrollToPosition.bind(this);
      this.listenTo(Adapt, 'device:changed', this.reRender);
      this.listenTo(Adapt, 'device:resize', this.setStartButton);
    },
    reRender: function () {
      if (Adapt.device.screenSize !== 'large') {
        this.replaceWithNarrative();
      }
    },

    replaceWithNarrative: function () {
      this.stopListening(Adapt, 'device:resize', this.scrollToPositionBound);
      var NarrativeView = Adapt.getViewClass('narrative');

      var model = this.prepareNarrativeModel();
      var newNarrative = new NarrativeView({ model: model });
      var $container = $(".component-container", $("." + this.model.get("_parentId")));

      newNarrative.reRender();
      newNarrative.setupNarrative();
      $container.html(newNarrative.$el);
      //Adapt.trigger('device:resize');
      _.defer(this.remove.bind(this));
    },

    prepareNarrativeModel: function () {
      var model = this.model;
      model.set({
        '_component': 'narrative',
        '_wasGuidedtour': true,
        'originalBody': model.get('body'),
        'originalInstruction': model.get('instruction')
      });

      // Check if active item exists, default to 0
      var activeItem = model.getActiveItem();
      if (!activeItem) {
        model.getItem(0).toggleActive(true);
      }

      // Swap mobile body and instructions for desktop variants.
      if (model.get('mobileBody')) {
        model.set('body', model.get('mobileBody'));
      }
      if (model.get('mobileInstruction')) {
        model.set('instruction', model.get('mobileInstruction'));
      }

      return model;
    },

    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      // If reset is enabled set defaults
      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },

    preRender: function () {
      this.steps = this.model.get('_items');
      if (this.steps && this.steps.length >= 2) {
        this.model.set('active', true);
        this.steps.forEach(function (step) {
          var img = new Image();
          img.src = step._graphic.src;
        });
        const globals = Adapt.course.get('_globals');
        var guidedtour = globals._components._guidedtour;
        this.model.set('guidedtour', guidedtour);

        var componentModel = this.model;
        var blockModel = Adapt.findById(componentModel.get("_parentId"));
        var articleModel = Adapt.findById(blockModel.get("_parentId"));

        var models = [componentModel, blockModel, articleModel];
        var titleLevel = 1;

        models.forEach(function (model) {
          if (model.get('displayTitle').length >= 1) {
            titleLevel++;
          }
        })
        this.model.set('_ariaLevel', (titleLevel + 1))
      }

      if (Adapt.device.screenSize === 'large') {
        this.render();
      } else {
        this.reRender();
      }

    },

    postRender: function () {
      var self = this;
      if (this.model.get('active')) {
        var initialImage = this.$el.find('.guidedtour-graphic img');
        if(initialImage){
          self.setStartButton();
        }
        initialImage.on('load', function () {
          self.setStartButton();
        });
        var guidedtour = this.model.get('guidedtour');
        this.componentID = this.$el.attr('data-adapt-id');

        this.tour = new Shepherd.Tour({
          defaultStepOptions: {
            cancelIcon: {
              enabled: true
            },
            scrollTo: false
          }
        });


        this.verifyCompletion = function () {
          if (Object.values(this.steps).every(step => step.inView === true)) {
            this.setCompletionStatus();
          }
        };

        this.previousStep = function (tour, stepIndex) {
          var loading = this.$el.find('.loading-step')[0];
          loading.focus({ preventScroll: true });
          var step = this.steps[stepIndex];
          this.loadImage(step).then(() => {
            tour.back();
          }
          );
        };

        this.nextStep = function (tour, stepIndex) {
          var loading = this.$el.find('.loading-step')[0];
          loading.focus({ preventScroll: true });
          this.steps[stepIndex].inView = true;
          var step = this.steps[stepIndex];
          this.loadImage(step).then(() => {
            tour.next();
          }
          );
        };

        this.loadImage = function (step) {
          return new Promise((resolve, reject) => {
            var self = this;
            const wrapper = this.$el.find('.guidedtour-graphic');
            const img = this.$el.find(`.guidedtour-graphic img`)[0];
            var fullWidth = step._graphic._forceFullWidth ? true : false;
            img.onload = () => {
              wrapper.toggleClass('full-width', fullWidth);
              resolve(img);
            }
            img.onerror = reject;
            img.src = step._graphic.src;
          })
        };


        this.tour.on('cancel', function (e) {
          self.stopListening(Adapt, 'device:resize', self.scrollToPositionBound);
          self.loadImage(self.steps[0]).then(() => {
            self.scrollToPositionBound();
            self.$el.find('.guidedtour-graphic img').addClass('tour-disabled');
            self.$el.find('.start-tour.active-button').removeClass('display-none');
            var button = self.$el.find('.start-tour.active-button')[0];
            button.focus({preventScroll: true});
            self.verifyCompletion();
          })
        });

        this.tour.on('start', function (e) {
          self.listenTo(Adapt, 'device:resize', self.scrollToPositionBound);
        });

        this.steps.forEach(function (step, index) {

          var templateTitle = Handlebars.templates['stepTitle'];

          var templateOptions = {
            title: step.title,
            itemNumber: index + 1,
            totalItems: self.steps.length,
            ariaLevel: self.model.get('_ariaLevel'),
            hidePagination: self.model.get('_hidePagination')
          };

          var templatePagination = Adapt.course.get("_globals")._components._guidedtour.stepPagination || '{{itemNumber}} / {{totalItems}}';
          templateOptions.paginationLabel = Handlebars.compile(templatePagination)(templateOptions);

          var templatePaginationAria = Adapt.course.get("_globals")._components._guidedtour.stepPaginationAria || 'Step {{itemNumber}} of {{totalItems}}';
          templateOptions.paginationAria = Handlebars.compile(templatePaginationAria)(templateOptions);

          var stepObject = {
            title: templateTitle(templateOptions),
            text: `<img src="${step._graphic.src}" class="sr-only" alt="${step._graphic.alt}"/>${step.body}`,
            classes: !step._pin._bordercolor || step._pin._bordercolor === 'rgba(0, 0, 0, 0)' ? 'no-border' : 'border',
            buttons: [
              {
                action() {
                  return index === 0 ? self.tour.cancel() : self.previousStep(this, (index - 1));
                },
                classes: 'shepherd-button-secondary',
                text: index === 0 ? guidedtour.closeText : guidedtour.previousText
              },
              {
                action() {
                  return index === (self.steps.length - 1) ? self.tour.cancel() : self.nextStep(this, (index + 1));
                },
                text: index === (self.steps.length - 1) ? guidedtour.closeText : guidedtour.nextText
              }
            ],
            id: `step-${index}-${self.componentID}`,
            attachTo: {
              element: `div[data-adapt-id="${self.componentID}"] .tour-item-${index}`,
              on: step._pin._bubbledirection !== 'none' ? step._pin._bubbledirection : 'bottom'
            },
            arrow: step._pin._bubbledirection !== 'none',
            borderColor: step._pin._bordercolor,
            when: {
              show: function () {
                var dialog = $(this.el);
                dialog.addClass(`step-${index}-${self.componentID}`);
                dialog.css(`--shepherd-border-color`, this.options.borderColor);
                self.scrollToPositionBound()
              }
            }
          }
          self.tour.addStep(stepObject);
        })
      }
      this.$('.guidedtour-widget').imageready(this.setReadyStatus.bind(this));
      if (this.model.get('_setCompletionOn') === 'inview') {
        this.setupInviewCompletion('.component-widget');
      }
    },

    remove: function () {
      if (this.model.get('active') && this.tour) {
        this.tour.complete();
      }
      Backbone.View.prototype.remove.call(this);
    },

    setStartButton: function () {
      var img = this.$el.find('.guidedtour-graphic img');
      var navHeight = $('.navigation').height();
      var win = $(window);
      var winHeight = win.height();
      var viewHeight = winHeight + navHeight;
      var imgHeight = img.outerHeight(true);
      var imageBiggerThanView = imgHeight > (viewHeight - navHeight);
      if (imageBiggerThanView) {
        this.$el.find('.guidedtour-widget .top-button').toggleClass('active-button', true);
        this.$el.find('.guidedtour-graphic .over-button').toggleClass('active-button', false);
      } else {
        this.$el.find('.guidedtour-graphic .over-button').toggleClass('active-button', true);
        this.$el.find('.guidedtour-widget .top-button').toggleClass('active-button', false);
      }
    },

    onStartTour: function () {
      this.steps[0].inView = true;
      var self = this;
      _.delay(function () {
        self.$el.find('.start-tour').addClass('display-none');
        self.$el.find('.guidedtour-graphic img').removeClass('tour-disabled');
        self.tour.start();
      }, 300)
    },

    scrollToPosition: function () {
      var self = this;
      var tour = self.tour;
      var currentStep = tour.getCurrentStep();
      var stepId = currentStep.id;
      _.delay(function () {
        var stepElem = $(`.shepherd-element.${stepId}`);
        var img = self.$el.find('.guidedtour-graphic img');
        var navHeight = $('.navigation').height();
        var win = $(window);
        var winScrollTop = win.scrollTop();
        var winHeight = win.height();
        var viewHeight = winHeight + navHeight;
        var imgOffset = img.offset();
        var imgHeight = img.outerHeight(true);
        var imgTop = imgOffset.top;
        var imgBottom = imgTop + imgHeight;
        var centerImg = imgTop + (imgHeight / 2) - (viewHeight / 2);
        var imgInView = imgTop > winScrollTop + navHeight && imgBottom < winScrollTop + winHeight;
        var imageBiggerThanView = imgHeight > (viewHeight - navHeight);
        var instructions = self.$el.find('.guidedtour-instruction-inner');
        var instructionsExist = instructions.length > 0;

        if (stepElem.length > 0) {
          var stepOffset = stepElem.offset();
          var stepHeight = stepElem.outerHeight(true);
          var stepTop = stepOffset.top;
          var stepBottom = stepTop + stepHeight;
          var imgNotCentered = centerImg !== winScrollTop;
          var imgLowerThanView = imgBottom > winScrollTop + winHeight;
          var imgHigherThanView = imgTop < winScrollTop + navHeight;
          var stepHigherThanImg = stepTop < imgTop;
          var stepLowerThanImg = stepBottom > imgBottom;
          var viewLowerThanStep = winScrollTop + navHeight > stepTop;
          var viewHigherThanStep = winScrollTop + winHeight < stepBottom;
          var stepInsideImg = imgTop < stepTop && imgBottom > stepBottom;
          var centerStep = stepTop + (stepHeight / 2) - navHeight;
          var viewOnCenterStep = centerStep - (viewHeight / 2) + navHeight;
          var nearBottom = (imgBottom - centerStep) < (viewHeight / 2) + navHeight;
          var nearTop = (centerStep - imgTop) < (viewHeight / 2) + navHeight;
          var viewOnImageBottom = imgBottom - (viewHeight - navHeight);
          var viewOnImageTop = imgTop - navHeight;

          if (stepLowerThanImg && ((viewHigherThanStep || imgHigherThanView) || (imageBiggerThanView && viewHigherThanStep))) {
            window.scrollTo({ top: stepBottom - winHeight, behavior: 'smooth' });
            //console.log('bottom of step!')
          } else if (stepHigherThanImg && ((viewLowerThanStep || imgLowerThanView) || (imageBiggerThanView && viewLowerThanStep))) {
            window.scrollTo({ top: stepTop - navHeight, behavior: 'smooth' });
            //console.log('top of step!')
          } else if (stepInsideImg && imageBiggerThanView) {
            if (nearBottom) {
              //console.log('bottom of image!');
              window.scrollTo({ top: viewOnImageBottom, behavior: 'smooth' });
            } else if (nearTop) {
              //console.log('top of image!');
              window.scrollTo({ top: viewOnImageTop, behavior: 'smooth' });
            } else {
              //console.log('center of step!')
              window.scrollTo({ top: viewOnCenterStep, behavior: 'smooth' });
            }
          } else if (stepInsideImg && imgNotCentered && !imgInView) {
            window.scrollTo({ top: centerImg, behavior: 'smooth' });
            //console.log('middle of image!')
          }
        } else {
          if (!imgInView && !imageBiggerThanView) {
            window.scrollTo({ top: centerImg, behavior: 'smooth' });
            //console.log('middle of image!')
          } else if (imageBiggerThanView) {
            if (instructionsExist) {
              var instructionsOffset = instructions.offset();
              var instructionsTop = instructionsOffset.top - navHeight;
              window.scrollTo({ top: instructionsTop, behavior: 'smooth' });
              //console.log('instructions!');
            } else {
              var button = self.$el.find('.top-button');
              var buttonOffset = button.offset();
              var buttonTop = buttonOffset.top - navHeight;
              window.scrollTo({ top: buttonTop, behavior: 'smooth' });
              //console.log('top of button!');
            }
          }
        }
      }, 50);
    },
  });

  return GuidedTourView;

});

define('components/adapt-esdc-tour/js/adapt-esdc-tour',[
	'core/js/adapt',
	'./guidedtourView',
	'core/js/models/itemsComponentModel'
], function (Adapt, GuidedtourView, ItemsComponentModel) {

	function loadScript(scriptObject, callback) {
		var head = document.getElementsByTagName('head')[0];
		var script = document.createElement('script');

		script.type = scriptObject.type || 'text/javascript';

		if (scriptObject.src) {
			script.src = scriptObject.src;
		}

		if (scriptObject.text) {
			script.text = scriptObject.text;
		}

		if (callback) {
			// Then bind the event to the callback function.
			// There are several events for cross browser compatibility.
			script.onreadystatechange = callback;
			script.onload = callback;
		}

		// Append the <script> tag.
		head.appendChild(script);
	}

	function setShepherdJS() {
		Adapt.wait ? Adapt.wait.begin() : Adapt.trigger("plugin:beginWait");
		var src = "./assets/shepherd/shepherd.js";
		loadScript({ src: src }, function () {
			Adapt.wait ? Adapt.wait.end() : Adapt.trigger("plugin:endWait");
		});
	}

	Adapt.once("app:dataReady", setShepherdJS)

	return Adapt.register('guidedtour', {
		model: ItemsComponentModel,
		view: GuidedtourView
	});

});
define('extensions/Adapt-accessibilityfixes/js/adapt-mathJax',["core/js/adapt"], function (Adapt) {

	function loadScript(scriptObject, callback) {
		var head = document.getElementsByTagName('head')[0];
		var script = document.createElement('script');

		script.type = scriptObject.type || 'text/javascript';

		if (scriptObject.src) {
			script.src = scriptObject.src;
		}

		if (scriptObject.text) {
			script.text = scriptObject.text;
		}

		if (callback) {
			// Then bind the event to the callback function.
			// There are several events for cross browser compatibility.
			script.onreadystatechange = callback;
			script.onload = callback;
		}

		// Append the <script> tag.
		head.appendChild(script);
	}

	function setUpMathJax() {
		Adapt.once("i18n:ready", function () {
			Adapt.wait ? Adapt.wait.begin() : Adapt.trigger("plugin:beginWait");
			var src = "./assets/Adapt-accessibilityfixes.js";
			loadScript({ src: src }, function () {
				Adapt.wait ? Adapt.wait.end() : Adapt.trigger("plugin:endWait");
			});
		})
	}

	Adapt.once("app:dataReady", setUpMathJax)
});
define('extensions/Adapt-accessibilitystatement/js/adapt-loader',["core/js/adapt"], function (Adapt) {

	function loadScript(scriptObject, callback) {
		var head = document.getElementsByTagName('head')[0];
		var script = document.createElement('script');

		script.type = scriptObject.type || 'text/javascript';

		if (scriptObject.src) {
			script.src = scriptObject.src;
		}

		if (scriptObject.text) {
			script.text = scriptObject.text;
		}

		if (callback) {
			// Then bind the event to the callback function.
			// There are several events for cross browser compatibility.
			script.onreadystatechange = callback;
			script.onload = callback;
		}

		// Append the <script> tag.
		head.appendChild(script);
	}

	function setUpMathJax() {
		Adapt.once("i18n:ready", function () {
			Adapt.wait ? Adapt.wait.begin() : Adapt.trigger("plugin:beginWait");
			var src = "./assets/Adapt-accessibilitystatement.js";
			loadScript({ src: src }, function () {
				Adapt.wait ? Adapt.wait.end() : Adapt.trigger("plugin:endWait");
			});
		})
	}

	Adapt.once("app:dataReady", setUpMathJax)
});
define('extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking',[
    'core/js/adapt'
], function(Adapt) {

    var Bookmarking = Backbone.Controller.extend({

        bookmarkLevel: null,
        watchViewIds: null,
        watchViews: [],
        restoredLocationID: null,
        currentLocationID: null,

        initialize: function () {
            this.listenToOnce(Adapt, 'router:location', this.onAdaptInitialize);
        },

        onAdaptInitialize: function() {
            if (!this.checkIsEnabled()) return;
            this.setupEventListeners();
            this.checkRestoreLocation();
        },

        checkIsEnabled: function() {
            var courseBookmarkModel = Adapt.course.get('_bookmarking');
            if (!courseBookmarkModel || !courseBookmarkModel._isEnabled) return false;
            if (!Adapt.offlineStorage) return false;
            return true;
        },

        setupEventListeners: function() {
            this._onScroll = _.debounce(this.checkLocation.bind(this), 1000);
            this.listenTo(Adapt, {
                'menuView:ready': this.setupMenu,
                'pageView:preRender': this.setupPage
            });
        },

        checkRestoreLocation: function() {
            this.restoredLocationID = Adapt.offlineStorage.get('location');

            if (!this.restoredLocationID || this.restoredLocationID === 'undefined') return;

            this.listenToOnce(Adapt, 'pageView:ready menuView:ready', this.restoreLocation);
        },

        restoreLocation: function() {
            _.defer(function() {
                this.stopListening(Adapt, 'pageView:ready menuView:ready', this.restoreLocation);

                if ((this.restoredLocationID === Adapt.location._currentId) || !Adapt.findById(this.restoredLocationID)) {
                    return;
                }
                var locationOnscreen = $('.' + this.restoredLocationID).onscreen();
                var isLocationOnscreen = locationOnscreen && (locationOnscreen.percentInview > 0);
                var isLocationFullyInview = locationOnscreen && (locationOnscreen.percentInview === 100);
                if (isLocationOnscreen && isLocationFullyInview) {
                    return;
                }

                if(Adapt.course.get('_bookmarking')._showPrompt === false) {
                    this.navigateToPrevious();
                    return;
                }
                this.showPrompt();

            }.bind(this));
        },

        showPrompt: function() {
            var courseBookmarkModel = Adapt.course.get('_bookmarking');
            var buttons = courseBookmarkModel._buttons || { yes: 'Yes', no: 'No' };

            this.listenToOnce(Adapt, {
                'bookmarking:continue': this.navigateToPrevious,
                'bookmarking:cancel': this.navigateCancel
            });

            var promptObject = {
                title: courseBookmarkModel.title,
                body: courseBookmarkModel.body,
                _prompts:[
                    {
                        promptText: buttons.yes || 'Yes',
                        _callbackEvent: 'bookmarking:continue'
                    },
                    {
                        promptText: buttons.no || 'No',
                        _callbackEvent: 'bookmarking:cancel'
                    }
                ],
                _showIcon: true
            };

            var accessibility = Adapt.config.get('_accessibility');
            if (!accessibility || !accessibility._isActive) {
                Adapt.trigger('notify:prompt', promptObject);
                return;
            }

            $('.loading').show();
            $('#a11y-focuser').focus();
            $('body').attr('aria-hidden', true);
            _.delay(function() {
                $('.loading').hide();
                $('body').removeAttr('aria-hidden');
                Adapt.trigger('notify:prompt', promptObject);
            }, 3000);
        },

        navigateToPrevious: function() {
            _.defer(function() {
                var isSinglePage = Adapt.contentObjects.models.length == 1;
                Backbone.history.navigate('#/id/' + this.restoredLocationID, {trigger: true, replace: isSinglePage});
            }.bind(this));

            this.stopListening(Adapt, 'bookmarking:cancel');
        },

        navigateCancel: function() {
            this.stopListening(Adapt, 'bookmarking:continue');
        },

        resetLocationID: function () {
            this.setLocationID('');
        },

        /**
         * if the learner navigates to the top-level menu, clear the stored bookmark
         * if it's a sub-menu, store the menu's id as the bookmark
         */
        setupMenu: function(menuView) {
            var menuModel = menuView.model;

            if (!menuModel.get('_parentId')) {
                this.resetLocationID();
                return;
            }

            this.setLocationID(menuModel.get('_id'));
        },

        /**
         * Calculates what the bookmarking 'level' will be for any given page.
         * First sets a default using the course-level setting (or 'component' if that's not been set)
         * then checks to see if that's being overridden at page level or not
         * @param {Backbone.Model} pageModel The model for the current page view
         * @return {String} Either 'page', 'block', or 'component' - with 'component' being the default
         */
        getBookmarkLevel: function(pageModel) {
            var defaultLevel = Adapt.course.get('_bookmarking')._level || 'component';
            var bookmarkModel = pageModel.get('_bookmarking');
            var isInherit = !bookmarkModel || !bookmarkModel._level || bookmarkModel._level === 'inherit';
            return isInherit ? defaultLevel : bookmarkModel._level;
        },

        /**
         * Sets up bookmarking for the page the learner just navigated to
         * If bookmarking is disabled for the current page, clear the stored bookmark and return.
         * Otherwise, bookmark the page then - if necessary - set up to calculate which block or component
         * should be bookmarked as the learner scrolls up/down the page
         * @param {Backbone.View} pageView The current page view
         */
        setupPage: function (pageView) {
            var pageBookmarkModel = pageView.model.get('_bookmarking');
            if (pageBookmarkModel && pageBookmarkModel._isEnabled === false) {
                this.resetLocationID();
                return;
            }

            this.setLocationID(pageView.model.get('_id'));

            this.bookmarkLevel = this.getBookmarkLevel(pageView.model);
            if (this.bookmarkLevel === 'page') {
                return;
            }

            this.watchViewIds = pageView.model.findDescendantModels(this.bookmarkLevel + 's').map(function(desc) {
                return desc.get('_id');
            });

            this.listenTo(Adapt, this.bookmarkLevel + 'View:postRender', this.captureViews);
            this.listenToOnce(Adapt, 'remove', this.releaseViews);

            $(window).on('scroll', this._onScroll);
        },

        captureViews: function (view) {
            this.watchViews.push(view);
        },

        setLocationID: function (id) {
            if (!Adapt.offlineStorage) return;
            if (this.currentLocationID == id) return;
            Adapt.offlineStorage.set('location', id);
            this.currentLocationID = id;
        },

        releaseViews: function () {
            this.watchViews.length = 0;
            this.watchViewIds.length = 0;
            this.stopListening(Adapt, 'remove', this.releaseViews);
            this.stopListening(Adapt, this.bookmarkLevel + 'View:postRender', this.captureViews);
            $(window).off('scroll', this._onScroll);
        },

        checkLocation: function() {
            var highestOnscreen = 0;
            var highestOnscreenLocation = '';

            for (var i = 0, l = this.watchViews.length; i < l; i++) {
                var view = this.watchViews[i];

                var isViewAPageChild = (this.watchViewIds.indexOf(view.model.get('_id')) > -1 );

                if ( !isViewAPageChild ) continue;

                var element = $('.' + view.model.get('_id'));
                var measurements = element.onscreen();

                if (!measurements.onscreen) continue;
                if (measurements.percentInview > highestOnscreen) {
                    highestOnscreen = measurements.percentInview;
                    highestOnscreenLocation = view.model.get('_id');
                }
            }

            //set location as most inview component
            if (highestOnscreenLocation) this.setLocationID(highestOnscreenLocation);
        }

    });

    return new Bookmarking();

});

define('extensions/adapt-contrib-glossary/js/adapt-contrib-glossaryItemView',[
    'core/js/adapt'
], function(Adapt) {

    var GlossaryItemView = Backbone.View.extend({

        className: "glossary-item",

        events: {
            'click .glossary-item-term': 'onGlossaryItemClicked'
        },

        initialize: function() {
            this.listenTo(Adapt, {
                'remove drawer:closed': this.remove,
                'glossary:descriptionOpen': this.descriptionOpen
            });
            this.setupModel();
            this.listenTo(this.model, 'change:_isVisible', this.onGlossaryItemVisibilityChange);
            this.render();
        },

        setupModel: function() {
            this.model.set({
                '_isVisible': true,
                '_isDescriptionOpen': false
            });
        },

        render: function() {
            var template = Handlebars.templates["glossaryItem"];
            this.$el.html(template(this.model.toJSON()));
            _.defer(_.bind(function() {
                this.postRender();
            }, this));
            return this;
        },

        postRender: function() {
            this.listenTo(Adapt, {
                'drawer:openedItemView': this.remove,
                'drawer:triggerCustomView': this.remove
            });
        },

        onGlossaryItemClicked: function(event) {
            event && event.preventDefault();
            Adapt.trigger('glossary:descriptionOpen', this.model.cid);
        },

        toggleGlossaryItemDescription: function() {
            if(this.model.get('_isDescriptionOpen')) {
                this.hideGlossaryItemDescription();
            } else {
                this.showGlossaryItemDescription();
            }
        },

        /**
         * show the glossary item description and highlight the selected term.
         */
        showGlossaryItemDescription: function() {
            var $glossaryItemTerm = this.$('.glossary-item-term');
            var description = $glossaryItemTerm.addClass('selected').siblings('.glossary-item-description').slideDown(200, function() {
                $(description).a11y_focus();
            });
            $glossaryItemTerm.attr('aria-expanded', true);
            this.model.set('_isDescriptionOpen', true);
        },

        /**
         * hide the glossary item description and un-highlight the selected term.
         */
        hideGlossaryItemDescription: function() {
            this.$('.glossary-item-description').stop(true, true).slideUp(200);
            this.model.set('_isDescriptionOpen', false);

            this.$('.glossary-item-term').removeClass('selected').attr('aria-expanded', false);
        },

        // This function will decide whether this glossary item's description should be visible or not.
        descriptionOpen: function(viewId) {
            if(viewId == this.model.cid) {
                this.toggleGlossaryItemDescription();
            } else if(this.model.get('_isDescriptionOpen')) {
                this.hideGlossaryItemDescription();
            }
        },

        // This function should call upon glossary item model attribute '_isVisible' gets change.
        onGlossaryItemVisibilityChange: function() {
            if(this.model.get('_isDescriptionOpen')) {
                this.hideGlossaryItemDescription();
            }
            if(this.model.get('_isVisible')) {
                this.$el.removeClass('display-none');
            } else {
                this.$el.addClass('display-none');
            }
        }
    });

    return GlossaryItemView;

});
define('extensions/adapt-contrib-glossary/js/adapt-contrib-glossaryView',[
    'core/js/adapt',
    './adapt-contrib-glossaryItemView'
], function(Adapt, GlossaryItemView) {

    var GlossaryView = Backbone.View.extend({

        className: "glossary",

        events: {
            'keyup input.glossary-textbox': 'onInputTextBoxValueChange',
            'input input.glossary-textbox': 'onInputTextBoxValueChange',
            'paste input.glossary-textbox': 'onInputTextBoxValueChange',
            'change input.glossary-checkbox': 'onInputTextBoxValueChange',
            'click .glossary-cancel-button': 'onCancelButtonClick'
        },

        itemViews: null,

        initialize: function() {
            this.listenTo(Adapt, 'remove drawer:closed', this.remove);

            this.setupModel();

            this.render();
        },

        checkForTermToShow: function() {
            if(this.$el.data('termtoshow') === undefined) return;

            for(var i = 0, count = this.itemViews.length; i < count; i++) {
                var itemView = this.itemViews[i];
                if(itemView.model.get('term').toLowerCase() === this.$el.data('termtoshow').toLowerCase()) {
                    Adapt.trigger('glossary:descriptionOpen', itemView.model.cid);
                    break;
                }
            }
        },

        remove: function() {
            if($('html').is('.ie8')) {
                this.$('.input.glossary-textbox').off('propertychange', this.onInputTextBoxValueChange);
            }

            this.itemViews = null;

            Backbone.View.prototype.remove.apply(this, arguments);
        },

        setupModel: function() {
            this.arrangeGlossaryItemsToAscendingOrder();
        },

        arrangeGlossaryItemsToAscendingOrder: function() {
            function caseInsensitiveComparator(model1, model2) {
                return model1.get('term').toLowerCase().localeCompare(model2.get('term').toLowerCase());
            }

            this.collection.comparator = caseInsensitiveComparator;
            this.collection.sort();
        },

        render: function() {
            var template = Handlebars.templates["glossary"];
            this.$el.html(template(this.model.toJSON()));
            this.renderGlossaryItems();
            _.defer(_.bind(function() {
                this.postRender();
            }, this));
            return this;
        },

        renderGlossaryItems: function() {
            this.itemViews = [];
            var $glossaryItemContainer = this.$('.glossary-items-container').empty();
            _.each(this.collection.models, function(item, index) {
                var itemView = new GlossaryItemView({model: item});
                itemView.$el.appendTo($glossaryItemContainer);
                // store a reference to each of the views so that checkForTermToShow can search through them
                this.itemViews.push(itemView);
            }, this);
        },

        postRender: function() {
            this.checkForTermToShow();

            this.listenTo(Adapt, {
                'drawer:openedItemView': this.remove,
                'drawer:triggerCustomView': this.remove
            });

            if($('html').is('.ie8')) {
                this.$('.input.glossary-textbox').on('propertychange', this.onInputTextBoxValueChange);
            }
        },

        onInputTextBoxValueChange: _.debounce(function(event) {
            this.showItemNotFoundMessage(false);
            var searchItem = this.$('input.glossary-textbox').val().toLowerCase();
            var shouldSearchInDescription = this.$('input.glossary-checkbox').is(":checked");

            var searchItemsAlert = this.model.get("searchItemsAlert") || "";

            if(searchItem.length > 0) {
                this.$('.glossary-cancel-button').removeClass('display-none');
                var filteredItems = this.getFilteredGlossaryItems(searchItem, shouldSearchInDescription);
                this.$('.glossary-alert').html(Handlebars.compile(searchItemsAlert)({ filteredItems: filteredItems }));
                this.showFilterGlossaryItems(filteredItems);
            } else {
                this.$('.glossary-cancel-button').addClass('display-none');
                this.showGlossaryItems(true);
            }
        }, 200),

        onCancelButtonClick: function(event) {
            if(event && event.preventDefault) event.preventDefault();
            var $input = this.$('input.glossary-textbox');
            $input.val("").trigger("input");
            _.defer(function() {
                $input.focus();
            });
        },

        // create array of filtered items on basis of supplied arguments.
        getFilteredGlossaryItems: function(searchItem, shouldSearchInDescription) {
            var terms = searchItem.split(' ');

            return this.collection.filter(function(model) {
                return _.every(terms, function(term) {
                    var title = model.get('term').toLowerCase();
                    var description = model.get('description').toLowerCase();

                    return shouldSearchInDescription ?
                        title.indexOf(term) !== -1 || description.indexOf(term) !== -1 :
                        title.indexOf(term) !== -1;
                });
            });
        },

        // show only the filtered glossary items or no item found message
        showFilterGlossaryItems: function(filteredItems) {
            this.showGlossaryItems(false);
            if(filteredItems.length > 0) {
                _.each(filteredItems, function(item, index) {
                    item.set('_isVisible', true);
                });
            } else {
                this.showItemNotFoundMessage(true);
            }
        },

        // show/hide the item not found message.
        showItemNotFoundMessage: function(_isVisible) {
            var $itemNotFound = this.$('.glossary-item-not-found');

            if(!_isVisible && !$itemNotFound.hasClass('display-none')) {
                $itemNotFound.addClass('display-none');
            } else if(_isVisible && $itemNotFound.hasClass('display-none')) {
                $itemNotFound.removeClass('display-none');
            }
        },

        // change the visibility of all glossary items
        showGlossaryItems: function(_isVisible) {
            _.invoke(this.collection.models, 'set', { '_isVisible': _isVisible });
        }

    });

    return GlossaryView;

});

define('extensions/adapt-contrib-glossary/js/adapt-contrib-glossary',[
    'core/js/adapt',
    './adapt-contrib-glossaryView'
], function(Adapt, GlossaryView) {
    
    function setupGlossary(glossaryModel, glossaryItems) {

        glossaryModel = new Backbone.Model(glossaryModel);

        var options = {
            model: glossaryModel,
            collection: new Backbone.Collection(glossaryItems)
        };

        Adapt.on('glossary:showGlossary', function() {
            Adapt.drawer.triggerCustomView(new GlossaryView(options).$el);
        });

        /**
         * handler for links in the content in the following format:
         * <a href='#' data-glossaryterm='term name'>glossary term link</a>
         * these links should trigger the glossary to open with that term automatically selected
         */
        $('body').on('click.glossary', 'a[data-glossaryterm]', function(e) {
            if(e) e.preventDefault();

            var newoptions = _.clone(options);
            newoptions.attributes = {
                "data-termtoshow": e.currentTarget.getAttribute('data-glossaryterm')
            };

            Adapt.drawer.triggerCustomView(new GlossaryView(newoptions).$el);
        });
    }

    function initGlossary() {
        var courseGlossary = Adapt.course.get('_glossary');

        // do not proceed until glossary enabled on course.json
        if (!courseGlossary || !courseGlossary._isEnabled) {
            return;
        }

        var drawerObject = {
            title: courseGlossary.title,
            description: courseGlossary.description,
            className: 'glossary-drawer',
            drawerOrder: courseGlossary._drawerOrder || 0
        };

        Adapt.drawer.addItem(drawerObject, 'glossary:showGlossary');

        setupGlossary(courseGlossary, courseGlossary._glossaryItems);
    }

    Adapt.on('app:dataReady', initGlossary);

});

define('extensions/adapt-contrib-pageLevelProgress/js/completionCalculations',[
    'core/js/adapt'
], function(Adapt) {

    var Completion = Backbone.Controller.extend({

        subProgressCompleted: 0,
        subProgressTotal: 0,
        nonAssessmentCompleted: 0,
        nonAssessmentTotal: 0,
        assessmentCompleted: 0,
        assessmentTotal: 0

    });

    // Calculate completion of a contentObject
    function calculateCompletion(contentObjectModel) {

        var completion = new Completion();

        var viewType = contentObjectModel.get('_type');
        var isComplete = contentObjectModel.get('_isComplete') ? 1 : 0;
        var children;

        switch (viewType) {
            case 'page':
                // If it's a page
                children = contentObjectModel.findDescendantModels('components', {
                    where: {
                        _isAvailable: true,
                        _isOptional: false
                    }
                });

                var availableChildren = filterAvailableChildren(children);
                var components = getPageLevelProgressEnabledModels(availableChildren);

                var nonAssessmentComponents = getNonAssessmentComponents(components);

                completion.nonAssessmentTotal = nonAssessmentComponents.length;
                completion.nonAssessmentCompleted = getComponentsCompleted(nonAssessmentComponents).length;

                var assessmentComponents = getAssessmentComponents(components);

                completion.assessmentTotal = assessmentComponents.length;
                completion.assessmentCompleted = getComponentsInteractionCompleted(assessmentComponents).length;

                if (contentObjectModel.get('_pageLevelProgress')._excludeAssessments !== true) {
                    completion.subProgressCompleted = contentObjectModel.get('_subProgressComplete') || 0;
                    completion.subProgressTotal = contentObjectModel.get('_subProgressTotal') || 0;
                }

                var showPageCompletionCourse = Adapt.course.get('_pageLevelProgress') && Adapt.course.get('_pageLevelProgress')._showPageCompletion !== false;
                var showPageCompletionPage = contentObjectModel.get('_pageLevelProgress') && contentObjectModel.get('_pageLevelProgress')._showPageCompletion !== false;

                if (showPageCompletionCourse && showPageCompletionPage) {
                    // optionally add one point extra for page completion to eliminate incomplete pages and full progress bars
                    // if _showPageCompletion is true then the progress bar should also consider it so add 1 to nonAssessmentTotal
                    completion.nonAssessmentCompleted += isComplete;
                    completion.nonAssessmentTotal += 1;
                }

                break;
            case 'menu': case 'course':
                // If it's a sub-menu
                children = contentObjectModel.get('_children').models;
                children.forEach(function(contentObject) {
                    var completionObject = calculateCompletion(contentObject);
                    completion.subProgressCompleted += completionObject.subProgressCompleted || 0;
                    completion.subProgressTotal += completionObject.subProgressTotal || 0;
                    completion.nonAssessmentTotal += completionObject.nonAssessmentTotal;
                    completion.nonAssessmentCompleted += completionObject.nonAssessmentCompleted;
                    completion.assessmentTotal += completionObject.assessmentTotal;
                    completion.assessmentCompleted += completionObject.assessmentCompleted;
                });
                break;

        }

        return completion;
    }

    function getNonAssessmentComponents(models) {
        return models.filter(function(model) {
            return !model.get('_isPartOfAssessment');
        });
    }

    function getAssessmentComponents(models) {
        return models.filter(function(model) {
            return model.get('_isPartOfAssessment');
        });
    }

    function getComponentsCompleted(models) {
        return models.filter(function(item) {
            return item.get('_isComplete');
        });
    }

    function getComponentsInteractionCompleted(models) {
        return models.filter(function(item) {
            return item.get('_isComplete');
        });
    }

    //Get only those models who were enabled for pageLevelProgress
    function getPageLevelProgressEnabledModels(models) {
        return models.filter(function(model) {
            var config = model.get('_pageLevelProgress');
            return config && config._isEnabled;
        });
    }

    function unavailableInHierarchy(parents) {
        if (!parents) return;
        return parents.some(function(parent) {
            return !parent.get('_isAvailable');
        });
    }

    function filterAvailableChildren(children) {
        var availableChildren = [];

        for (var i = 0, count = children.length; i < count; i++) {
            var parents = children[i].getAncestorModels();
            if (unavailableInHierarchy(parents)) continue;
            availableChildren.push(children[i]);
        }

        return availableChildren;
    }

    function calculatePercentageComplete(model) {
        var completionObject = calculateCompletion(model);
        // take all assessment, nonassessment and subprogress into percentage
        // this allows the user to see if assessments have been passed, if assessment components can be retaken, and all other component's completion
        var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;
        var total  = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;
        var percentageComplete = Math.floor((completed / total)*100);
        return percentageComplete;
    }

    return {
        calculateCompletion: calculateCompletion,
        calculatePercentageComplete: calculatePercentageComplete,
        getPageLevelProgressEnabledModels: getPageLevelProgressEnabledModels,
        filterAvailableChildren: filterAvailableChildren
    };

});

define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressIndicatorView',[
    'core/js/adapt'
], function(Adapt) {

    var PageLevelProgressIndicatorView = Backbone.View.extend({

        initialize: function(options) {
            options = options || {};
            this.calculatePercentage = options.calculatePercentage || this.calculatePercentage;
            this.ariaLabel = options.ariaLabel || '';
            this.type = options.type || this.model.get('_type');
            this.addClasses();
            this.checkAria();
            this.setUpEventListeners();
            this.render();
            this.refresh();
        },

        addClasses: function() {
            this.$el.addClass([
                'pagelevelprogress-indicator',
                this.type + '-indicator'
            ].join(' '));
        },

        checkAria: function() {
            if (this.ariaLabel) return;
            this.$el.attr('aria-hidden', true);
        },

        setUpEventListeners: function() {
            this.listenTo(Adapt, 'remove', this.remove);
            this.listenTo(this.model, 'change:_isComplete', this.refresh);
            if (!this.collection) return;
            this.listenTo(this.collection, 'change:_isComplete', this.refresh);
        },

        refresh: function() {
            this.checkCompletion();
            this.render();
        },

        checkCompletion: function() {
            var percentage = this.calculatePercentage();
            this.model.set('percentageComplete', percentage);
            this.$el
                .toggleClass('complete', percentage === 100)
                .toggleClass('incomplete', percentage !== 100);
        },

        calculatePercentage: function() {
            return this.model.get('_isComplete') ? 100 : 0;
        },

        render: function() {
            var data = this.model.toJSON();
            data.ariaLabel = this.ariaLabel;
            data.type = this.type;
            var template = Handlebars.templates[this.constructor.template];
            this.$el.html(template(data));
        }

    }, {
        template: 'pageLevelProgressIndicator'
    });

    return PageLevelProgressIndicatorView;

});

define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressItemView',[
    'core/js/adapt',
    './PageLevelProgressIndicatorView'
], function(Adapt, PageLevelProgressIndicatorView) {

    var PageLevelProgressItemView = Backbone.View.extend({

        className: function () {
            return [
                'pagelevelprogress-item drawer-item',
                this.model.get('_type') + '-indicator'
            ].join(' ');
        },

        attributes: {
            'role': 'listitem'
        },

        initialize: function() {
            this.listenTo(Adapt, 'remove', this.remove);
            this.render();
            this.addIndicator();
        },

        render: function() {
            var data = this.model.toJSON();
            var template = Handlebars.templates[this.constructor.template];
            this.$el.html(template(data));
        },

        addIndicator: function() {
            if (this.model.get('_isOptional')) return;
            var item = new PageLevelProgressIndicatorView({
                model: this.model
            });
            this.$('.js-indicator').append(item.$el);
        }

    }, {
        template: 'pageLevelProgressItem'
    });

    return PageLevelProgressItemView;

});

define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView',[
   'core/js/adapt',
   './PageLevelProgressItemView'
], function(Adapt, PageLevelProgressItemView) {

    var PageLevelProgressView = Backbone.View.extend({

        className: 'pagelevelprogress',

        events: {
            'click .pagelevelprogress-item button': 'scrollToPageElement'
        },

        initialize: function() {
            this.listenTo(Adapt, 'remove', this.remove);
            this.render();
            this.addChildren();
        },

        scrollToPageElement: function(event) {
            if (event && event.preventDefault) event.preventDefault();

            var $target = $(event.currentTarget);
            if ($target.is('.disabled')) return;

            var currentComponentSelector = '.' + $target.attr('data-pagelevelprogress-id');

            Adapt.once('drawer:closed', function() {
                Adapt.scrollTo(currentComponentSelector, { duration: 400 });
            }).trigger('drawer:closeDrawer', $(currentComponentSelector));
        },

        render: function() {
            var template = Handlebars.templates['pageLevelProgress'];
            this.$el.html(template({}));
        },

        addChildren: function() {
            var $children = this.$('.js-children');
            this.collection.each(function(model) {
                $children.append(new PageLevelProgressItemView({
                    model: model
                }).$el);
            }.bind(this));
        }

    });

    return PageLevelProgressView;

});

define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView',[
    'core/js/adapt',
    './completionCalculations',
    './PageLevelProgressView',
    './PageLevelProgressIndicatorView'
], function(Adapt, completionCalculations, PageLevelProgressView, PageLevelProgressIndicatorView) {

    var PageLevelProgressNavigationView = Backbone.View.extend({

        tagName: 'button',

        className: 'base pagelevelprogress-navigation',

        events: {
            'click': 'onProgressClicked'
        },

        initialize: function() {
            _.bindAll(this, 'updateProgressBar');
            this.setUpEventListeners();
            this.render();
            this.addIndicator();
            this.deferredUpdate();
        },

        setUpEventListeners: function() {
            this.listenTo(Adapt, {
                'remove': this.remove,
                'router:location': this.updateProgressBar,
                'pageLevelProgress:update': this.refreshProgressBar
            });
        },

        render: function() {
            var template = Handlebars.templates['pageLevelProgressNavigation'];
            this.$el.html(template({}));
        },

        addIndicator: function() {
            this.indicatorView = new PageLevelProgressIndicatorView({
                model: this.model,
                collection: this.collection,
                calculatePercentage: this._getPageCompletionPercentage,
                ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar
            });
            this.$el.prepend(this.indicatorView.$el);
        },

        _getPageCompletionPercentage: function() {
            return completionCalculations.calculatePercentageComplete(this.model);
        },

        deferredUpdate: function() {
            _.defer(this.updateProgressBar);
        },

        updateProgressBar: function() {
            this.indicatorView.refresh();
        },

        refreshProgressBar: function() {
            this.collection.repopulate();
            this.updateProgressBar();
        },

        onProgressClicked: function(event) {
            if (event && event.preventDefault) event.preventDefault();
            Adapt.drawer.triggerCustomView(new PageLevelProgressView({
                collection: this.collection
            }).$el, false);
        },

        remove: function() {
            Backbone.View.prototype.remove.call(this);
            this.collection.reset();
        }

    });

    return PageLevelProgressNavigationView;

});

define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressCollection',[
    './completionCalculations'
], function(completionCalculations) {

    var PageLevelProgressCollection = Backbone.Collection.extend({

        initialize: function(models, options) {
            if (!options || !options.pageModel) return;
            this._pageModel = options.pageModel;
            this.repopulate();
        },

        repopulate: function() {
            this.reset();
            if (!this._pageModel) return;

            var allDescendants = this._pageModel.getAllDescendantModels(true);
            var currentPageItems = allDescendants.filter(function(item) {
                return item.get('_isAvailable') === true;
            });
            var availableItems = completionCalculations.filterAvailableChildren(currentPageItems);
            var enabledProgressItems = completionCalculations.getPageLevelProgressEnabledModels(availableItems);

            this.add(enabledProgressItems);
        }

    });

    return PageLevelProgressCollection;

});

define('extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress',[
    'core/js/adapt',
    './completionCalculations',
    './PageLevelProgressNavigationView',
    './PageLevelProgressIndicatorView',
    './PageLevelProgressCollection'
], function(Adapt, completionCalculations, PageLevelProgressNavigationView, PageLevelProgressIndicatorView, PageLevelProgressCollection) {

    var PageLevelProgress = Backbone.Controller.extend({

        initialize: function() {
            Adapt.on({
                'app:dataReady': this.onDataReady.bind(this),
                'app:languageChanged': function() {
                    // Removes only those event handlers created by setUpEventListeners
                    // see https://github.com/adaptlearning/adapt_framework/issues/2368
                    this.stopListening();
                }.bind(this)
            });
        },

        getCourseConfig: function() {
            return Adapt.course.get('_pageLevelProgress');
        },

        onDataReady: function() {
            // Do not proceed if pageLevelProgress is not enabled in course.json
            var coursePLPConfig = this.getCourseConfig();
            if (!coursePLPConfig || !coursePLPConfig._isEnabled) {
                return;
            }
            this.setUpEventListeners();
        },

        setUpEventListeners: function() {
            var headerIndicatorTypes = [
                'menu',
                'page',
                'article',
                'block',
                'component'
            ];

            var headerIndicatorEventNames = headerIndicatorTypes
                .concat(['']).join('View:render ');

            this.listenTo(Adapt, headerIndicatorEventNames, this.renderHeaderIndicatorView);

            this.listenTo(Adapt, {
                'menuView:postRender': this.renderMenuItemIndicatorView,
                'router:page': this.renderNavigationView
            });

            this.listenTo(Adapt.course, 'bubble:change:_isComplete', this.onCompletionChange);
        },

        onCompletionChange: function(event) {
            if (!Adapt.location._currentId) return;

            var currentModel = Adapt.findById(Adapt.location._currentId);
            var completionState = {
                currentLocation: completionCalculations.calculatePercentageComplete(currentModel),
                course: completionCalculations.calculatePercentageComplete(Adapt.course)
            };
            var hasChanged = !_.isMatch(this._previousCompletionState, completionState);
            if (!hasChanged) return;

            this._previousCompletionState = completionState;
            Adapt.trigger('pageLevelProgress:percentageCompleteChange', completionState);
        },

        renderHeaderIndicatorView: function(view) {
            var model = view.model;

            var config = model.get('_pageLevelProgress');
            if (!config || !config._isEnabled || !config._isCompletionIndicatorEnabled) {
                return;
            }

            var pageModel = model.findAncestor('contentObjects');
            var pageConfig = pageModel && pageModel.get('_pageLevelProgress');
            if (pageConfig && !pageConfig._isEnabled) {
                return;
            }

            var $headings = view.$('.js-heading');
            $headings.each(function(index, el) {
                var $el = $(el);
                var indicatorView = new PageLevelProgressIndicatorView({
                    model: model
                });
                indicatorView.$el.insertAfter($el);
            });
        },

        // This should add/update progress on menuView
        renderMenuItemIndicatorView: function(view) {
            // Do not render on menu, only render on menu items
            if (view.model.get('_id') === Adapt.location._currentId) {
                return;
            }

            // Progress bar should not render for course viewType
            var viewType = view.model.get('_type');
            if (viewType === 'course') {
                return;
            }

            // Do not proceed if pageLevelProgress is not enabled for the content object
            var pageLevelProgress = view.model.get('_pageLevelProgress');
            if (!pageLevelProgress || !pageLevelProgress._isEnabled) {
                return;
            }

            view.$el.find('.js-menu-item-progress').append(new PageLevelProgressIndicatorView({
                model: view.model,
                type: 'menu-item',
                calculatePercentage: this._getMenuItemCompletionPercentage.bind(view),
                ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar
            }).$el);
        },

        _getMenuItemCompletionPercentage: function() {
            return completionCalculations.calculatePercentageComplete(this.model);
        },

        // This should add/update progress on page navigation bar
        renderNavigationView: function(pageModel) {
            // Do not render if turned off at course level
            var coursePLPConfig = this.getCourseConfig();
            if (coursePLPConfig && coursePLPConfig._isShownInNavigationBar === false) {
                return;
            }

            // Do not proceed if pageLevelProgress is not enabled for the content object
            var pagePLPConfig = pageModel.get('_pageLevelProgress');
            if (!pagePLPConfig || !pagePLPConfig._isEnabled) {
                return;
            }

            var collection = new PageLevelProgressCollection(null, {
                pageModel: pageModel
            });

            if (collection.length === 0) {
                return;
            }

            $('.navigation-drawer-toggle-button').after(new PageLevelProgressNavigationView({
                model: pageModel,
                collection: collection
            }).$el);
        }

    });

    Adapt.pageLevelProgress = new PageLevelProgress();

});

define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView',[
    'core/js/adapt'
], function(Adapt) {

    var ResourcesView = Backbone.View.extend({

        className: 'resources',

        initialize: function() {
            this.listenTo(Adapt, 'remove', this.remove);
            this.render();
        },

        events: {
            'click .resources-filter button': 'onFilterClicked'
        },

        render: function() {
            this.$el.html(Handlebars.templates.resources({
                model: this.model.toJSON(),
                resources: this.collection.toJSON()
            }));

            _.defer(function() {
                this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);
            }.bind(this));

            return this;
        },

        onFilterClicked: function(e) {
            if (e && e.preventDefault) e.preventDefault();

            this.$('.resources-filter button').removeClass('selected');

            var items;
            var filter = $(e.currentTarget).addClass('selected').attr('data-filter');
            if (filter === 'all') {
                items = this.$('.resources-item').removeClass('display-none');
            } else {
                this.$('.resources-item').removeClass('display-none').not('.' + filter).addClass('display-none');
                items = this.$('.resources-item.' + filter);
            }

            if (items.length > 0) $(items[0]).a11y_focus();
        }
    });

    return ResourcesView;
});

define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers',[
    'handlebars',
    'core/js/adapt'
], function(Handlebars, Adapt) {

    var helpers = {

        resources_has_type: function(resources, type, block) {
            var hasType = _.some(resources, _.matcher({_type: type}));
            return hasType ? block.fn(this) : block.inverse(this);
        },

        resources_has_multiple_types: function(resources, block) {
            if (resources.length === 1) return block.inverse(this);

            var allSameType = _.every(resources, _.matcher({_type: resources[0]._type}));
            return allSameType ? block.inverse(this) : block.fn(this);
        },

        resources_get_column_count: function(resources) {
            return _.uniq(_.pluck(resources, '_type')).length + 1;// add 1 for the 'All' button column
        },

        /**
         * IE doesn't support the 'download' attribute
         * https://github.com/adaptlearning/adapt_framework/issues/1559
         * and iOS just opens links with that attribute in the same window
         * https://github.com/adaptlearning/adapt_framework/issues/1852
         */
        resources_force_download: function(resource, block) {
            if (Adapt.device.browser === 'internet explorer' || Adapt.device.OS === 'ios') {
                return block.inverse(this);
            }

            return (resource._forceDownload || resource.filename) ? block.fn(this) : block.inverse(this);
        }

    };

    for (var name in helpers) {
        if (helpers.hasOwnProperty(name)) {
            Handlebars.registerHelper(name, helpers[name]);
        }
    }

});

define('extensions/adapt-contrib-resources/js/adapt-contrib-resources',[
    'core/js/adapt',
    './adapt-contrib-resourcesView',
    './adapt-contrib-resourcesHelpers'
], function(Adapt, ResourcesView, ResourcesHelpers) {

    function setupResources(resourcesData) {

        var resourcesModel = new Backbone.Model(resourcesData);
        var resourcesCollection = new Backbone.Collection(resourcesModel.get('_resourcesItems'));

        Adapt.on('resources:showResources', function() {
            Adapt.drawer.triggerCustomView(new ResourcesView({
                model: resourcesModel,
                collection: resourcesCollection
            }).$el);
        });

    }

    function initResources() {

        var courseResources = Adapt.course.get('_resources');

        // do not proceed until resource set on course.json
        if (!courseResources || courseResources._isEnabled === false) return;

        var drawerObject = {
            title: courseResources.title,
            description: courseResources.description,
            className: 'resources-drawer',
            drawerOrder: courseResources._drawerOrder || 0
        };

        Adapt.drawer.addItem(drawerObject, 'resources:showResources');

        setupResources(courseResources);

    }

    Adapt.on('adapt:start', initResources);

});

define ('extensions/adapt-contrib-spoor/js/scorm/wrapper',[
    'libraries/SCORM_API_wrapper'
], function(pipwerks) {

    /*
        IMPORTANT: This wrapper uses the Pipwerks SCORM wrapper and should therefore support both SCORM 1.2 and 2004. Ensure any changes support both versions.
    */

    var ScormWrapper = function() {
        /* configuration */
        this.setCompletedWhenFailed = true;// this only applies to SCORM 2004
        /**
         * whether to commit each time there's a change to lesson_status or not
         */
        this.commitOnStatusChange = true;
        /**
         * how frequently (in minutes) to commit automatically. set to 0 to disable.
         */
        this.timedCommitFrequency = 10;
        /**
         * how many times to retry if a commit fails
         */
        this.maxCommitRetries = 5;
        /**
         * time (in milliseconds) to wait between retries
         */
        this.commitRetryDelay = 1000;

        /**
         * prevents commit from being called if there's already a 'commit retry' pending.
         */
        this.commitRetryPending = false;
        /**
         * how many times we've done a 'commit retry'
         */
        this.commitRetries = 0;
        /**
         * not currently used - but you could include in an error message to show when data was last saved
         */
        this.lastCommitSuccessTime = null;
        /**
         * The exit state to use when course isn't completed yet
         */
        this.exitStateIfIncomplete = "auto";
        /**
         * The exit state to use when the course has been completed/passed
         */
        this.exitStateIfComplete = "auto";


        this.timedCommitIntervalID = null;
        this.retryCommitTimeoutID = null;
        this.logOutputWin = null;
        this.startTime = null;
        this.endTime = null;

        this.lmsConnected = false;
        this.finishCalled = false;

        this.logger = Logger.getInstance();
        this.scorm = pipwerks.SCORM;
        /**
         * Prevent the Pipwerks SCORM API wrapper's handling of the exit status
         */
        this.scorm.handleExitMode = false;

        this.suppressErrors = false;

        if (window.__debug)
            this.showDebugWindow();

        if ((window.API && window.API.__offlineAPIWrapper) || (window.API_1484_11 && window.API_1484_11.__offlineAPIWrapper))
            this.logger.error("Offline SCORM API is being used. No data will be reported to the LMS!");
    };

    // static
    ScormWrapper.instance = null;

    /******************************* public methods *******************************/

    // static
    ScormWrapper.getInstance = function() {
        if (ScormWrapper.instance === null)
            ScormWrapper.instance = new ScormWrapper();

        return ScormWrapper.instance;
    };

    ScormWrapper.prototype.getVersion = function() {
        return this.scorm.version;
    };

    ScormWrapper.prototype.setVersion = function(value) {
        this.logger.debug("ScormWrapper::setVersion: " + value);
        this.scorm.version = value;
    };

    ScormWrapper.prototype.initialize = function() {
        this.logger.debug("ScormWrapper::initialize");
        this.lmsConnected = this.scorm.init();

        if (this.lmsConnected) {
            this.startTime = new Date();

            this.initTimedCommit();
        }
        else {
            this.handleError("Course could not connect to the LMS");
        }

        return this.lmsConnected;
    };

    /**
    * allows you to check if this is the user's first ever 'session' of a SCO, even after the lesson_status has been set to 'incomplete'
    */
    ScormWrapper.prototype.isFirstSession = function() {
        return (this.getValue(this.isSCORM2004() ? "cmi.entry" :"cmi.core.entry") === "ab-initio");
    };

    ScormWrapper.prototype.setIncomplete = function() {
        this.setValue(this.isSCORM2004() ? "cmi.completion_status" : "cmi.core.lesson_status", "incomplete");

        if(this.commitOnStatusChange) this.commit();
    };

    ScormWrapper.prototype.setCompleted = function() {
        this.setValue(this.isSCORM2004() ? "cmi.completion_status" : "cmi.core.lesson_status", "completed");

        if(this.commitOnStatusChange) this.commit();
    };

    ScormWrapper.prototype.setPassed = function() {
        if (this.isSCORM2004()) {
            this.setValue("cmi.completion_status", "completed");
            this.setValue("cmi.success_status", "passed");
        }
        else {
            this.setValue("cmi.core.lesson_status", "passed");
        }

        if(this.commitOnStatusChange) this.commit();
    };

    ScormWrapper.prototype.setFailed = function() {
        if (this.isSCORM2004()) {
            this.setValue("cmi.success_status", "failed");

            if(this.setCompletedWhenFailed) {
                this.setValue("cmi.completion_status", "completed");
            }
        }
        else {
            this.setValue("cmi.core.lesson_status", "failed");
        }

        if(this.commitOnStatusChange) this.commit();
    };

    ScormWrapper.prototype.getStatus = function() {
        var status = this.getValue(this.isSCORM2004() ? "cmi.completion_status" : "cmi.core.lesson_status");

        switch(status.toLowerCase()) {// workaround for some LMSes (e.g. Arena) not adhering to the all-lowercase rule
            case "passed":
            case "completed":
            case "incomplete":
            case "failed":
            case "browsed":
            case "not attempted":
            case "not_attempted":// mentioned in SCORM 2004 docs but not sure it ever gets used
            case "unknown": //the SCORM 2004 version of not attempted
                return status;
            default:
                this.handleError("ScormWrapper::getStatus: invalid lesson status '" + status + "' received from LMS");
                return null;
        }
    };

    ScormWrapper.prototype.setStatus = function(status) {
        switch (status.toLowerCase()){
            case "incomplete":
                this.setIncomplete();
            break;
            case "completed":
                this.setCompleted();
            break;
            case "passed":
                this.setPassed();
            break;
            case "failed":
                this.setFailed();
            break;
            default:
                this.handleError("ScormWrapper::setStatus: the status '" + status + "' is not supported.");
        }
    };

    ScormWrapper.prototype.getScore = function() {
        return this.getValue(this.isSCORM2004() ? "cmi.score.raw" : "cmi.core.score.raw");
    };

    ScormWrapper.prototype.setScore = function(_score, _minScore, _maxScore) {
        if (this.isSCORM2004()) {
            this.setValue("cmi.score.raw", _score);
            this.setValue("cmi.score.min", _minScore);
            this.setValue("cmi.score.max", _maxScore);

            var range = _maxScore - _minScore;
            var scaledScore = ((_score - _minScore) / range).toFixed(7);
            this.setValue("cmi.score.scaled", scaledScore);
        }
        else {
            this.setValue("cmi.core.score.raw", _score);

            if(this.isSupported("cmi.core.score.min")) this.setValue("cmi.core.score.min", _minScore);

            if(this.isSupported("cmi.core.score.max")) this.setValue("cmi.core.score.max", _maxScore);
        }
    };

    ScormWrapper.prototype.getLessonLocation = function() {
        return this.getValue(this.isSCORM2004() ? "cmi.location" : "cmi.core.lesson_location");
    };

    ScormWrapper.prototype.setLessonLocation = function(_location) {
        this.setValue(this.isSCORM2004() ? "cmi.location" : "cmi.core.lesson_location", _location);
    };

    ScormWrapper.prototype.getSuspendData = function() {
        return this.getValue("cmi.suspend_data");
    };

    ScormWrapper.prototype.setSuspendData = function(_data) {
        this.setValue("cmi.suspend_data", _data);
    };

    ScormWrapper.prototype.getStudentName = function() {
        return this.getValue(this.isSCORM2004() ? "cmi.learner_name" : "cmi.core.student_name");
    };

    ScormWrapper.prototype.getStudentId = function(){
        return this.getValue(this.isSCORM2004() ? "cmi.learner_id":"cmi.core.student_id");
    };

    ScormWrapper.prototype.setLanguage = function(_lang){
        if(this.isSCORM2004()) {
            this.setValue("cmi.learner_preference.language", _lang);
        } else {
            if(this.isSupported("cmi.student_preference.language")) {
                this.setValue("cmi.student_preference.language", _lang);
            }
        }
    };

    ScormWrapper.prototype.commit = function() {
        this.logger.debug("ScormWrapper::commit");

        if (this.lmsConnected) {
            if (this.commitRetryPending) {
                this.logger.debug("ScormWrapper::commit: skipping this commit call as one is already pending.");
            }
            else {
                if (this.scorm.save()) {
                    this.commitRetries = 0;
                    this.lastCommitSuccessTime = new Date();
                }
                else {
                    if (this.commitRetries < this.maxCommitRetries && !this.finishCalled) {
                        this.commitRetries++;
                        this.initRetryCommit();
                    }
                    else {
                        var _errorCode = this.scorm.debug.getCode();

                        var _errorMsg = "Course could not commit data to the LMS";
                        _errorMsg += "\nError " + _errorCode + ": " + this.scorm.debug.getInfo(_errorCode);
                        _errorMsg += "\nLMS Error Info: " + this.scorm.debug.getDiagnosticInfo(_errorCode);

                        this.handleError(_errorMsg);
                    }
                }
            }
        }
        else {
            this.handleError("Course is not connected to the LMS");
        }
    };

    ScormWrapper.prototype.finish = function() {
        this.logger.debug("ScormWrapper::finish");

        if (this.lmsConnected && !this.finishCalled) {
            this.finishCalled = true;

            if(this.timedCommitIntervalID !== null) {
                window.clearInterval(this.timedCommitIntervalID);
            }

            if(this.commitRetryPending) {
                window.clearTimeout(this.retryCommitTimeoutID);
                this.commitRetryPending = false;
            }

            if (this.logOutputWin && !this.logOutputWin.closed) {
                this.logOutputWin.close();
            }

            this.endTime = new Date();

            if (this.isSCORM2004()) {
                this.scorm.set("cmi.session_time", this.convertToSCORM2004Time(this.endTime.getTime() - this.startTime.getTime()));
                this.scorm.set("cmi.exit", this.getExitState());
            } else {
                this.scorm.set("cmi.core.session_time", this.convertToSCORM12Time(this.endTime.getTime() - this.startTime.getTime()));
                this.scorm.set("cmi.core.exit", this.getExitState());
            }

            // api no longer available from this point
            this.lmsConnected = false;

            if (!this.scorm.quit()) {
                this.handleError("Course could not finish");
            }
        }
        else {
            this.handleError("Course is not connected to the LMS");
        }
    };

    ScormWrapper.prototype.recordInteraction = function(id, response, correct, latency, type) {
        if(this.isSupported("cmi.interactions._count")) {
            switch(type) {
                case "choice":
                    this.recordInteractionMultipleChoice.apply(this, arguments);
                    break;

                case "matching":
                    this.recordInteractionMatching.apply(this, arguments);
                    break;

                case "numeric":
                    this.isSCORM2004() ? this.recordInteractionScorm2004.apply(this, arguments) : this.recordInteractionScorm12.apply(this, arguments);
                    break;

                case "fill-in":
                    this.recordInteractionFillIn.apply(this, arguments);
                    break;

                default:
                    console.error("ScormWrapper.recordInteraction: unknown interaction type of '" + type + "' encountered...");
            }
        }
        else {
            this.logger.info("ScormWrapper::recordInteraction: cmi.interactions are not supported by this LMS...");
        }
    };

    /****************************** private methods ******************************/
    ScormWrapper.prototype.getValue = function(_property) {
        this.logger.debug("ScormWrapper::getValue: _property=" + _property);

        if(this.finishCalled) {
            this.logger.debug("ScormWrapper::getValue: ignoring request as 'finish' has been called");
            return;
        }

        if (this.lmsConnected) {
            var _value = this.scorm.get(_property);
            var _errorCode = this.scorm.debug.getCode();
            var _errorMsg = "";

            if (_errorCode !== 0) {
                if (_errorCode === 403) {
                    this.logger.warn("ScormWrapper::getValue: data model element not initialized");
                }
                else {
                    _errorMsg += "Course could not get " + _property;
                    _errorMsg += "\nError Info: " + this.scorm.debug.getInfo(_errorCode);
                    _errorMsg += "\nLMS Error Info: " + this.scorm.debug.getDiagnosticInfo(_errorCode);

                    this.handleError(_errorMsg);
                }
            }
            this.logger.debug("ScormWrapper::getValue: returning " + _value);
            return _value + "";
        }
        else {
            this.handleError("Course is not connected to the LMS");
        }
    };

    ScormWrapper.prototype.setValue = function(_property, _value) {
        this.logger.debug("ScormWrapper::setValue: _property=" + _property + " _value=" + _value);

        if(this.finishCalled) {
            this.logger.debug("ScormWrapper::setValue: ignoring request as 'finish' has been called");
            return;
        }

        if (this.lmsConnected) {
            var _success = this.scorm.set(_property, _value);
            var _errorCode = this.scorm.debug.getCode();
            var _errorMsg = "";

            if (!_success) {
                /*
                * Some LMSes have an annoying tendency to return false from a set call even when it actually worked fine.
                * So, we should throw an error _only_ if there was a valid error code...
                */
                if(_errorCode !== 0) {
                    _errorMsg += "Course could not set " + _property + " to " + _value;
                    _errorMsg += "\nError Info: " + this.scorm.debug.getInfo(_errorCode);
                    _errorMsg += "\nLMS Error Info: " + this.scorm.debug.getDiagnosticInfo(_errorCode);

                    this.handleError(_errorMsg);
                }
                else {
                    this.logger.warn("ScormWrapper::setValue: LMS reported that the 'set' call failed but then said there was no error!");
                }
            }

            return _success;
        }
        else {
            this.handleError("Course is not connected to the LMS");
        }
    };

    /**
    * used for checking any data field that is not 'LMS Mandatory' to see whether the LMS we're running on supports it or not.
    * Note that the way this check is being performed means it wouldn't work for any element that is
    * 'write only', but so far we've not had a requirement to check for any optional elements that are.
    */
    ScormWrapper.prototype.isSupported = function(_property) {
        this.logger.debug("ScormWrapper::isSupported: _property=" + _property);

        if(this.finishCalled) {
            this.logger.debug("ScormWrapper::isSupported: ignoring request as 'finish' has been called");
            return;
        }

        if (this.lmsConnected) {
            var _value = this.scorm.get(_property);
            var _errorCode = this.scorm.debug.getCode();

            return (_errorCode === 401 ? false : true);
        }
        else {
            this.handleError("Course is not connected to the LMS");
            return false;
        }
    };

    ScormWrapper.prototype.initTimedCommit = function() {
        this.logger.debug("ScormWrapper::initTimedCommit");

        if(this.timedCommitFrequency > 0) {
            var delay = this.timedCommitFrequency * (60 * 1000);
            this.timedCommitIntervalID = window.setInterval(this.commit.bind(this), delay);
        }
    };

    ScormWrapper.prototype.initRetryCommit = function() {
        this.logger.debug("ScormWrapper::initRetryCommit " + this.commitRetries + " out of " + this.maxCommitRetries);

        this.commitRetryPending = true;// stop anything else from calling commit until this is done

        this.retryCommitTimeoutID = window.setTimeout(this.doRetryCommit.bind(this), this.commitRetryDelay);
    };

    ScormWrapper.prototype.doRetryCommit = function() {
        this.logger.debug("ScormWrapper::doRetryCommit");

        this.commitRetryPending = false;

        this.commit();
    };

    ScormWrapper.prototype.handleError = function(_msg) {
        this.logger.error(_msg);

        if (!this.suppressErrors && (!this.logOutputWin || this.logOutputWin.closed) && confirm("An error has occured:\n\n" + _msg + "\n\nPress 'OK' to view debug information to send to technical support."))
            this.showDebugWindow();
    };

    ScormWrapper.prototype.getInteractionCount = function(){
        var count = this.getValue("cmi.interactions._count");
        return count === "" ? 0 : count;
    };

    ScormWrapper.prototype.recordInteractionScorm12 = function(id, response, correct, latency, type) {

        id = this.trim(id);

        var cmiPrefix = "cmi.interactions." + this.getInteractionCount();

        this.setValue(cmiPrefix + ".id", id);
        this.setValue(cmiPrefix + ".type", type);
        this.setValue(cmiPrefix + ".student_response", response);
        this.setValue(cmiPrefix + ".result", correct ? "correct" : "wrong");
        if (latency !== null && latency !== undefined) this.setValue(cmiPrefix + ".latency", this.convertToSCORM12Time(latency));
        this.setValue(cmiPrefix + ".time", this.getCMITime());
    };


    ScormWrapper.prototype.recordInteractionScorm2004 = function(id, response, correct, latency, type) {

        id = this.trim(id);

        var cmiPrefix = "cmi.interactions." + this.getInteractionCount();

        this.setValue(cmiPrefix + ".id", id);
        this.setValue(cmiPrefix + ".type", type);
        this.setValue(cmiPrefix + ".learner_response", response);
        this.setValue(cmiPrefix + ".result", correct ? "correct" : "incorrect");
        if (latency !== null && latency !== undefined) this.setValue(cmiPrefix + ".latency", this.convertToSCORM2004Time(latency));
        this.setValue(cmiPrefix + ".timestamp", this.getISO8601Timestamp());
    };


    ScormWrapper.prototype.recordInteractionMultipleChoice = function(id, response, correct, latency, type) {

        if(this.isSCORM2004()) {
            response = response.replace(/,|#/g, "[,]");
        } else {
            response = response.replace(/#/g, ",");
            response = this.checkResponse(response, 'choice');
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;

        scormRecordInteraction.call(this, id, response, correct, latency, type);
    };


    ScormWrapper.prototype.recordInteractionMatching = function(id, response, correct, latency, type) {

        response = response.replace(/#/g, ",");

        if(this.isSCORM2004()) {
            response = response.replace(/,/g, "[,]");
            response = response.replace(/\./g, "[.]");
        } else {
            response = this.checkResponse(response, 'matching');
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;

        scormRecordInteraction.call(this, id, response, correct, latency, type);
    };


    ScormWrapper.prototype.recordInteractionFillIn = function(id, response, correct, latency, type) {

        var maxLength = this.isSCORM2004() ? 250 : 255;

        if(response.length > maxLength) {
            response = response.substr(0, maxLength);

            this.logger.warn("ScormWrapper::recordInteractionFillIn: response data for " + id + " is longer than the maximum allowed length of " + maxLength + " characters; data will be truncated to avoid an error.");
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;

        scormRecordInteraction.call(this, id, response, correct, latency, type);
    };

    ScormWrapper.prototype.showDebugWindow = function() {

        if (this.logOutputWin && !this.logOutputWin.closed) {
            this.logOutputWin.close();
        }

        this.logOutputWin = window.open("log_output.html", "Log", "width=600,height=300,status=no,scrollbars=yes,resizable=yes,menubar=yes,toolbar=yes,location=yes,top=0,left=0");

        if (this.logOutputWin)
            this.logOutputWin.focus();

        return;
    };

    ScormWrapper.prototype.convertToSCORM12Time = function(msConvert) {

        var msPerSec = 1000;
        var msPerMin = msPerSec * 60;
        var msPerHour = msPerMin * 60;

        var ms = msConvert % msPerSec;
        msConvert = msConvert - ms;

        var secs = msConvert % msPerMin;
        msConvert = msConvert - secs;
        secs = secs / msPerSec;

        var mins = msConvert % msPerHour;
        msConvert = msConvert - mins;
        mins = mins / msPerMin;

        var hrs = msConvert / msPerHour;

        if(hrs > 9999) {
            return "9999:99:99.99";
        }
        else {
            var str = [this.padWithZeroes(hrs,4), this.padWithZeroes(mins, 2), this.padWithZeroes(secs, 2)].join(":");
            return (str + '.' + Math.floor(ms/10));
        }
    };

    /**
    * Converts milliseconds into the SCORM 2004 data type 'timeinterval (second, 10,2)'
    * this will output something like 'P1DT3H5M0S' which indicates a period of time of 1 day, 3 hours and 5 minutes
    * or 'PT2M10.1S' which indicates a period of time of 2 minutes and 10.1 seconds
    */
    ScormWrapper.prototype.convertToSCORM2004Time = function(msConvert) {
        var csConvert = Math.floor(msConvert / 10);
        var csPerSec = 100;
        var csPerMin = csPerSec * 60;
        var csPerHour = csPerMin * 60;
        var csPerDay = csPerHour * 24;

        var days = Math.floor(csConvert/ csPerDay);
        csConvert -= days * csPerDay;
        days = days ? days + "D" : "";

        var hours = Math.floor(csConvert/ csPerHour);
        csConvert -= hours * csPerHour;
        hours = hours ? hours + "H" : "";

        var mins = Math.floor(csConvert/ csPerMin);
        csConvert -= mins * csPerMin;
        mins = mins ? mins + "M" : "";

        var secs = Math.floor(csConvert/ csPerSec);
        csConvert -= secs * csPerSec;
        secs = secs ? secs : "0";

        var cs = csConvert;
        cs = cs ? "." + cs : "";

        var seconds = secs + cs + "S";

        var hms = [hours,mins,seconds].join("");

        return "P" + days + "T" + hms;
    };

    ScormWrapper.prototype.getCMITime = function() {

        var date = new Date();

        var hours = this.padWithZeroes(date.getHours(),2);
        var min = this.padWithZeroes(date.getMinutes(),2);
        var sec = this.padWithZeroes(date.getSeconds(),2);

        return [hours, min, sec].join(":");
    };

    /**
    * returns the current date & time in the format YYYY-MM-DDTHH:mm:ss
    */
    ScormWrapper.prototype.getISO8601Timestamp = function() {
        var date = new Date().toISOString();
        return date.replace(/.\d\d\dZ/, "");//Date.toISOString returns the date in the format YYYY-MM-DDTHH:mm:ss.sssZ so we need to drop the last bit to make it SCORM 2004 conformant
    };

    ScormWrapper.prototype.padWithZeroes = function(numToPad, padBy) {

        var len = padBy;

        while(--len){ numToPad = "0" + numToPad; }

        return numToPad.slice(-padBy);
    };

    ScormWrapper.prototype.trim = function(str) {
        return str.replace(/^\s*|\s*$/g, "");
    };

    ScormWrapper.prototype.isSCORM2004 = function() {
        return this.scorm.version === "2004";
    };

    /*
    * SCORM 1.2 requires that the identifiers in cmi.interactions.n.student_response for choice and matching activities be a character from [0-9a-z].
    * When numeric identifiers are used this function attempts to map identifiers 10 to 35 to [a-z]. Resolves issues/1376.
    */
    ScormWrapper.prototype.checkResponse = function(response, responseType) {
        if (!response) return response;
        if (responseType != 'choice' && responseType != 'matching') return response;

        response = response.split(/,|#/);

        var self = this;

        if (responseType == 'choice') {
            response = response.map(checkIdentifier);
        } else {
            response = response.map(function(r) {
                var identifiers = r.split('.');
                return checkIdentifier(identifiers[0]) + '.' + checkIdentifier(identifiers[1]);
            });
        }

        function checkIdentifier(r) {
            var i;

            // if [0-9] then ok
            if (r.length == 1 && r >= '0' && r <= '9') return r;

            // if [a-z] then ok
            if (r.length == 1 && r >= 'a' && r <= 'z') return r;

            // try to map integers 10-35 to [a-z]
            i = parseInt(r);

            if (isNaN(i) || i < 10 || i > 35) {
                self.handleError('Numeric choice/matching response elements must use a value from 0 to 35 in SCORM 1.2');
            }

            return Number(i).toString(36); // 10 maps to 'a', 11 maps to 'b', ..., 35 maps to 'z'
        }

        return response.join(',');
    };

    ScormWrapper.prototype.getExitState = function() {
        var completionStatus = this.scorm.data.completionStatus;
        var isIncomplete = completionStatus === 'incomplete' || completionStatus === 'not attempted';
        var exitState = isIncomplete ? this.exitStateIfIncomplete : this.exitStateIfComplete;

        if (exitState !== 'auto') return exitState;

        if (this.isSCORM2004()) return (isIncomplete ? 'suspend' : 'normal');

        return '';
    };

    return ScormWrapper;
});

Logger = function() {
    this.logArr = [];
    this.registeredViews = [];
};

// static
Logger.instance = null;
Logger.LOG_TYPE_INFO = 0;
Logger.LOG_TYPE_WARN = 1;
Logger.LOG_TYPE_ERROR = 2;
Logger.LOG_TYPE_DEBUG = 3;

Logger.getInstance = function() {
    if (Logger.instance == null)
        Logger.instance = new Logger();
    return Logger.instance;
};

Logger.prototype.getEntries = function() {
    return this.logArr;
};

Logger.prototype.getLastEntry = function() {
    return this.logArr[this.logArr.length - 1];
};

Logger.prototype.info = function(str) {
    this.logArr[this.logArr.length] = {str:str, type:Logger.LOG_TYPE_INFO, time:Date.now()};
    this.updateViews();
};

Logger.prototype.warn = function(str) {
    this.logArr[this.logArr.length] = {str:str, type:Logger.LOG_TYPE_WARN, time:Date.now()};
    this.updateViews();
};

Logger.prototype.error = function(str) {
    this.logArr[this.logArr.length] = {str:str, type:Logger.LOG_TYPE_ERROR, time:Date.now()};
    this.updateViews();
};

Logger.prototype.debug = function(str) {
    this.logArr[this.logArr.length] = {str:str, type:Logger.LOG_TYPE_DEBUG, time:Date.now()};
    this.updateViews();
};

//register a view
Logger.prototype.registerView = function(_view) {
    this.registeredViews[this.registeredViews.length] = _view;
};

//unregister a view
Logger.prototype.unregisterView = function(_view) {
    for (var i = 0; i < this.registeredViews.length; i++) {
        if (this.registeredViews[i] == _view) {
            this.registeredViews.splice(i, 1);
            i--;
        }
    }
};

// update all views
Logger.prototype.updateViews = function() {
    for (var i = 0; i < this.registeredViews.length; i++) {
        if (this.registeredViews[i])
            this.registeredViews[i].update(this);
    }
};
define("extensions/adapt-contrib-spoor/js/scorm/logger", function(){});

define('extensions/adapt-contrib-spoor/js/scorm',[
    'libraries/SCORM_API_wrapper',
    './scorm/wrapper',
    './scorm/logger'
], function(API, wrapper, logger) {

    //Load and prepare SCORM API

    return wrapper.getInstance();

});
define('extensions/adapt-contrib-spoor/js/serializers/default',[
    'core/js/adapt'
], function (Adapt) {

    //Captures the completion status of the blocks
    //Returns and parses a '1010101' style string

    var serializer = {
        serialize: function () {
            return this.serializeSaveState('_isComplete');
        },

        serializeSaveState: function(attribute) {
            if (Adapt.course.get('_latestTrackingId') === undefined) {
                var message = "This course is missing a latestTrackingID.\n\nPlease run the grunt process prior to deploying this module on LMS.\n\nScorm tracking will not work correctly until this is done.";
                console.error(message);
            }

            var excludeAssessments = Adapt.config.get('_spoor') && Adapt.config.get('_spoor')._tracking && Adapt.config.get('_spoor')._tracking._excludeAssessments;

            // create the array to be serialised, pre-populated with dashes that represent unused tracking ids - because we'll never re-use a tracking id in the same course
            var data = [];
            var length = Adapt.course.get('_latestTrackingId') + 1;
            for (var i = 0; i < length; i++) {
                data[i] = "-";
            }

            // now go through all the blocks, replacing the appropriate dashes with 0 (incomplete) or 1 (completed) for each of the blocks
            _.each(Adapt.blocks.models, function(model, index) {
                var _trackingId = model.get('_trackingId'),
                    isPartOfAssessment = model.getParent().get('_assessment'),
                    state = model.get(attribute) ? 1: 0;

                if(excludeAssessments && isPartOfAssessment) {
                    state = 0;
                }

                if (_trackingId === undefined) {
                    var message = "Block '" + model.get('_id') + "' doesn't have a tracking ID assigned.\n\nPlease run the grunt process prior to deploying this module on LMS.\n\nScorm tracking will not work correctly until this is done.";
                    console.error(message);
                } else {
                    data[_trackingId] = state;
                }
            }, this);
           /* var coursedata = data;
            coursedata.shift(1);
            console.log(coursedata);
            var count=0; for(var i=0; i<coursedata.length; i++){if(coursedata[i] == 1){count++}}
            var progress = count;
            console.log(progress);
            var calcprogress = (progress / coursedata.length) * 100;
            console.log('PROGRESS STATUS: '+calcprogress);
            if (calcprogress >= 90){
                    scorm.status("set", "complete");
                    console.log('OVER 90, COMMAND SENT TO LMS');
                } else {
                console.log('UNDER 90');
            }*/

            return data.join("");
        },

        deserialize: function (completion, callback) {
            var syncIterations = 1; // number of synchronous iterations to perform
            var i = 0, arr = this.deserializeSaveState(completion), len = arr.length;

            function step() {
                var state;
                for (var j=0, count=Math.min(syncIterations, len-i); j < count; i++, j++) {
                    state = arr[i];
                    if (state === 1) {
                        markBlockAsComplete(Adapt.blocks.findWhere({_trackingId: i}));
                    }
                }
                i == len ? callback() : setTimeout(step);
            }

            function markBlockAsComplete(block) {
                if (!block) {
                    return;
                }

                block.getChildren().each(function(child) {
                    child.set('_isComplete', true);
                });
            }

            step();
        },

        deserializeSaveState: function (string) {
            var completionArray = string.split("");

            for (var i = 0; i < completionArray.length; i++) {
                if (completionArray[i] === "-") {
                    completionArray[i] = -1;
                } else {
                    completionArray[i] = parseInt(completionArray[i], 10);
                }
            }

            return completionArray;
        }

    };

    return serializer;
});

//https://raw.githubusercontent.com/oliverfoster/SCORMSuspendDataSerializer 2015-06-27
(function(_) {

    function toPrecision(number, precision) {
        if (precision === undefined) precision = 2
        var multiplier = 1 * Math.pow(10, precision);
        return Math.round(number * multiplier) / multiplier;
    }

    function BinaryToNumber(bin, length) {
        return parseInt(bin.substr(0, length), 2);
    }

    function NumberToBinary(number, length) {
        return Padding.fillLeft( number.toString(2), length );
    }

    var Padding = {
        addLeft: function PaddingAddLeft(str, x , char) {
            char = char || "0";
            return (new Array( x + 1)).join(char) + str;
        },
        addRight: function PaddingAddRight(str, x, char) {
            char = char || "0";
            return  str + (new Array( x + 1)).join(char);
        },
        fillLeft: function PaddingFillLeft(str, x, char) {
            if (str.length < x) {
                var paddingLength = x - str.length;
                return Padding.addLeft(str, paddingLength, char)
            }
            return str;
        },
        fillRight: function PaddingFillLeft(str, x, char) {
            if (str.length < x) {
                var paddingLength = x - str.length;
                return Padding.addRight(str, paddingLength, char)
            }
            return str;
        },
        fillBlockLeft: function PaddingFillBlockRight(str, x, char) {
            if (str.length % x) {
                var paddingLength = x - (str.length % x);
                return Padding.addLeft(str, paddingLength, char)
            }
            return str;
        },
        fillBlockRight: function PaddingFillBlockRight(str, x, char) {
            if (str.length % x) {
                var paddingLength = x - (str.length % x);
                return Padding.addRight(str, paddingLength, char)
            }
            return str;
        }
    };

    function Base64() {
        switch (arguments.length) {
        case 1:
            var firstArgumentType = typeof arguments[0];
            switch (firstArgumentType) {
            case "number":
                return Base64._indexes[arguments[0]];
            case "string":
                return Base64._chars[arguments[0]];
            default:
                throw "Invalid arguments type";
            }
        case 2:
            var char = arguments[0];
            var index = arguments[1];
            Base64._chars[char] = index;
            Base64._indexes[index] = char;
            return;
        default:
            throw "Invalid number of arguments";
        }
    }
    Base64._chars = {};
    Base64._indexes = {};
    (function() {
        var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/";
        for (var i = 0, l = alphabet.length; i<l; i++) {
            Base64(alphabet[i], i);
        }
    })();


    function DataType() {
        switch (arguments.length) {
        case 1:
            switch (typeof  arguments[0]) {
            case "object":
                var item = arguments[0]
                if (DataType._types[item.type] === undefined) DataType._types[item.type] = [];
                DataType._types[item.type].push(item);
                item.index = DataType._indexes.length;
                DataType._indexes.push(item);
                DataType[item.name] = item;
                return;
            case "string":
                return DataType.getName(arguments[0]);
            case "number":
                return DataType.getIndex(arguments[0]);
            default:
                throw "Argument type not allowed";
            }
        default:
            throw "Too many arguments";
        }

    }
    DataType.VARIABLELENGTHDESCRIPTORSIZE = 8;
    DataType._types = {};
    DataType._indexes = [];
    DataType.getName = function DataTypeGetName(name) {
        if (DataType[name])
            return DataType[name];
        throw "Type name not found '"+name+"'";
    };
    DataType.getIndex = function DataTypeGetIndex(index) {
        if (DataType._indexes[index])
            return DataType._indexes[index];
        throw "Type index not found '"+index+"'";
    };
    DataType.getTypes = function DataTypeGetTypes(type) {
        if (DataType._types[type])
            return DataType._types[type];
        throw "Type not found '"+type+"'";
    };
    DataType.checkBounds = function DataTypeCheckBounds(name, number) {
        var typeDef = DataType(name);
        if (number > typeDef.max) throw name + " value is larger than "+typeDef.max;
        if (number < typeDef.min) throw name + " value is smaller than "+typeDef.min;
    };
    DataType.getNumberType = function DataTypeGetNumberType(number) {
        var isDecimal = (number - Math.floor(number)) !== 0;
        var numberDataTypes = DataType.getTypes("number");
        for (var t = 0, type; type = numberDataTypes[t++];) {
            if (number <= type.max && number >= type.min && (!isDecimal || isDecimal == type.decimal) ) {
                return type;
            }
        }
    };
    DataType.getVariableType = function DataTypeGetVariableType(variable) {
        var variableNativeType = variable instanceof Array ? "array" : typeof variable;
        var variableDataType;

        switch(variableNativeType) {
        case "number":
            variableDataType = DataType.getNumberType(variable);
            break;
        case "string":
            variableDataType = DataType.getName("string");
            break;
        default:
            var supportedItemDataTypes = DataType.getTypes(variableNativeType);
            switch (supportedItemDataTypes.length) {
            case 1:
                variableDataType = supportedItemDataTypes[0];
                break;
            default:
                throw "Type not found '"+variableNativeType+"'";
            }
        }

        if (!variableDataType) throw "Cannot assess type '"+variableNativeType+"'";

        return variableDataType;
    };
    DataType.getArrayType = function getArrayType(arr) {
        var foundItemTypes = [];

        for (var i = 0, l = arr.length; i < l; i++) {
            var item = arr[i];
            var itemDataType = DataType.getVariableType(item);

            if (_.findWhere(foundItemTypes, { name: itemDataType.name })) continue;

            foundItemTypes.push(itemDataType);
        }

        switch (foundItemTypes.length) {
        case 0:
            throw "Cannot determine array data types";
        case 1:
            //single value type
             return foundItemTypes[0];
        default:
            //many value types
            var nativeTypeNames = _.pluck(foundItemTypes, 'type');
            var uniqueNativeTypeNames = _.uniq(nativeTypeNames);
            var hasManyNativeTypes = (uniqueNativeTypeNames.length > 1);

            if (hasManyNativeTypes) return DataType("variable"); //multiple types in array

            //single native type in array, multiple datatype lengths
            switch (uniqueNativeTypeNames[0]) {
            case "number":
                var foundDecimal = _.findWhere(foundItemTypes, { decimal: true});
                if (foundDecimal) return foundDecimal;
                return _.max(foundItemTypes, function(type) {
                    return type.max;
                });
            }

            throw "Unsupported data types";
        }

    };
    (function() {
        var types = [
            {
                "size": "fixed",
                "length": 1,
                "name": "boolean",
                "type": "boolean"
            },
            {
                "max": 15,
                "min": 0,
                "decimal": false,
                "size": "fixed",
                "length": 4,
                "name": "half",
                "type": "number"
            },
            {
                "max": 255,
                "min": 0,
                "decimal": false,
                "size": "fixed",
                "length": 8,
                "name": "byte",
                "type": "number"
            },
            {
                "max": 65535,
                "min": 0,
                "decimal": false,
                "size": "fixed",
                "length": 16,
                "name": "short",
                "type": "number"
            },
            {
                "max": 4294967295,
                "min": 0,
                "decimal": false,
                "size": "fixed",
                "length": 32,
                "name": "long",
                "type": "number"
            },
            {
                "max": 4294967295,
                "min": -4294967295,
                "decimal": true,
                "precision": 2,
                "size": "variable",
                "name": "double",
                "type": "number"
            },
            {
                "name": "base16",
                "size": "variable",
                "type": "string"
            },
            {
                "name": "base64",
                "size": "variable",
                "type": "string"
            },
            {
                "name": "array",
                "size": "variable",
                "type": "array"
            },
            {
                "name": "variable",
                "size": "variable",
                "type": "variable"
            },
            {
                "name": "string",
                "size": "variable",
                "type": "string"
            }
        ];
        for (var i = 0, type; type = types[i++];) {
            DataType(type);
        }
    })();



    function Converter(fromType, toType) {
        fromType = Converter.translateTypeAlias(fromType);
        toType = Converter.translateTypeAlias(toType);

        var args = [].slice.call(arguments, 2);

        if (fromType != "binary" && toType != "binary") {
            if (!Converter._converters[fromType]) throw "Type not found '" + fromType + "'";
            if (!Converter._converters[fromType]['binary']) throw "Type not found 'binary'";

            var bin = Converter._converters[fromType]['binary'].call(this, args[0], Converter.WRAPOUTPUT);

            if (!Converter._converters['binary'][toType]) throw "Type not found '"+toType+"'";

            return Converter._converters['binary'][toType].call(this, bin, Converter.WRAPOUTPUT);
        }

        if (!Converter._converters[fromType]) throw "Type not found '" + fromType + "'";
        if (!Converter._converters[fromType][toType]) throw "Type not found '" + toType + "'";

        return Converter._converters[fromType][toType].call(this, args[0], Converter.WRAPOUTPUT);
    }
    Converter.WRAPOUTPUT = false;
    Converter.translateTypeAlias = function ConverterTranslateTypeAlias(type) {
        type = type.toLowerCase();
        for (var Type in Converter._typeAliases) {
            if (Type == type || (" "+Converter._typeAliases[Type].join(" ")+" ").indexOf(" "+type+" ") >= 0 ) return Type;
        }
        throw "Type not found '" + type + "'";
    };
    Converter._typeAliases = {
        "base64": [ "b64" ],
        "base16" : [ "hex", "b16" ],
        "double": [ "dbl", "decimal", "d" ],
        "long": [ "lng", "l" ],
        "short": [ "s" ],
        "byte" : [ "b" ],
        "half": [ "h" ],
        "number": [ "num", "n" ],
        "binary": [ "bin" ],
        "boolean": [ "bool" ],
        "array": [ "arr" ]
    };
    Converter._variableWrapLength = function ConverterVariableWrapLength(bin) {
        var variableLength = bin.length;
        var binLength = NumberToBinary(variableLength, DataType.VARIABLELENGTHDESCRIPTORSIZE)

        return binLength + bin;
    };
    Converter._variableLength = function ConverterVariableLength(bin) {
        var VLDS =  DataType.VARIABLELENGTHDESCRIPTORSIZE;
        var variableLength = BinaryToNumber(bin, VLDS );
        return variableLength;
    };
    Converter._variableUnwrapLength = function ConverterVariableUnwrapLength(bin) {
        var VLDS =  DataType.VARIABLELENGTHDESCRIPTORSIZE;
        var variableLength = BinaryToNumber(bin, VLDS );

        return bin.substr( VLDS, variableLength);
    };
    Converter._converters = {
        "base64": {
            "binary": function ConverterBase64ToBinary(base64) { //TODO PADDING... ?
                var firstByte = Base64(base64.substr(0,1));
                var binFirstByte = NumberToBinary(firstByte, 6);
                var paddingLength = BinaryToNumber(binFirstByte, 6);

                var bin = "";
                for (var i = 0, ch; ch = base64[i++];) {
                    var block = Base64(ch).toString(2);
                    block = Padding.fillLeft(block, 6);
                    bin += block;
                }
                bin =  bin.substr(6+paddingLength);
                return bin;
            }
        },
        "base16": {
            "binary": function ConverterBase16ToBinary(hex) {
                var firstByte = Base64(base64.substr(0,1));
                var binFirstByte = NumberToBinary(firstByte, 4);
                var paddingLength = BinaryToNumber(binFirstByte, 4);

                var bin = "";
                for (var i = 0, ch; ch = hex[i++];) {
                    var block = parseInt(ch, 16).toString(2);
                    block = Padding.fillLeft(block, 4);
                    bin += block;
                }

                 bin =  bin.substr(6+paddingLength);
                return bin;
            }
        },
        "double": {
            "binary": function ConverterDoubleToBinary(dbl, wrap) {
                var typeDef = DataType("double");
                DataType.checkBounds("double", dbl);

                dbl = toPrecision(dbl, typeDef.precision);

                var dblStr = dbl.toString(10);

                var isMinus = dbl < 0;

                var baseStr, exponentStr, highStr, lowStr, decimalPosition, hasDecimal;


                var exponentPos = dblStr.indexOf("e");
                if (exponentPos > -1) {
                    //exponential float representation "nE-x"
                    baseStr = dblStr.substr(0, exponentPos);
                    exponentStr = Math.abs(dblStr.substr(exponentPos+1));

                    if (isMinus) baseStr = baseStr.substr(1);

                    decimalPosition = baseStr.indexOf(".");
                    hasDecimal = (decimalPosition > -1);

                    if (hasDecimal) {
                        highStr = baseStr.substr(0, decimalPosition);
                        lowStr = baseStr.substr(decimalPosition+1);

                        exponentStr = (Math.abs(exponentStr) + lowStr.length);

                        baseStr = highStr + lowStr;
                    }

                } else {
                    //normal long float representation "0.00000000"
                    baseStr = dblStr;
                    exponentStr = "0";

                    if (isMinus) dblStr = dblStr.substr(1);

                    decimalPosition = dblStr.indexOf(".");
                    hasDecimal = (decimalPosition > -1);
                    if (hasDecimal) {
                        highStr = dblStr.substr(0, decimalPosition);
                        lowStr = dblStr.substr(decimalPosition+1);

                        exponentStr = (lowStr.length);
                        if (highStr == "0") {
                            baseStr = parseInt(lowStr, 10).toString(10);
                        } else {
                            baseStr = highStr + lowStr;
                        }
                    } else {
                        baseStr = dblStr;
                    }

                }

                var bin = [];

                var binLong = Padding.fillBlockLeft (parseInt(baseStr, 10).toString(2), 4);
                var binMinus = isMinus ? "1" : "0";
                var binExponent = Padding.fillLeft( parseInt(exponentStr, 10).toString(2), 7);

                bin.push( binMinus );
                bin.push( binExponent );
                bin.push( binLong );

                if (wrap === false) {
                    return bin.join("");
                } else {
                    return Converter._variableWrapLength(bin.join(""));
                }
            }
        },
        "long": {
            "binary": function ConverterLongToBinary(value) {
                var typeDef = DataType("long");
                DataType.checkBounds("long", value);
                value = toPrecision(value, 0);
                return Padding.fillLeft(value.toString(2), typeDef.length);
            }
        },
        "short": {
            "binary": function ConverterShortToBinary(value) {
                var typeDef = DataType("short");
                DataType.checkBounds("short", value);
                value = toPrecision(value, 0);
                return Padding.fillLeft(value.toString(2), typeDef.length);
            }
        },
        "byte": {
            "binary": function ConverterByteToBinary(value) {
                var typeDef = DataType("byte");
                DataType.checkBounds("byte", value);
                value = toPrecision(value, 0);
                return Padding.fillLeft(value.toString(2), typeDef.length);
            }
        },
        "half": {
            "binary": function ConverterHalfToBinary(value) {
                var typeDef = DataType("half");
                DataType.checkBounds("half", value);
                value = toPrecision(value, 0);
                return Padding.fillLeft(value.toString(2), typeDef.length);
            }
        },
        "boolean": {
            "binary": function ConverterBooleanToBinary(bool) {
                return bool ? "1" : "0";
            },
        },
        "array": {
            "binary": function ConverterArrayToBinary(arr, wrap) { //TODO PADDING NOT GOOD
                var typeDef = DataType("array");
                var arrayItemType = DataType.getArrayType(arr);
                var isVariableArray = arrayItemType.name == "vairable";

                if (isVariableArray) {
                    var bin = half2bin(15);
                    //variable array
                    return bin;
                } else {
                    var binArrayIdentifier = Converter._converters['half']['binary'](arrayItemType.index);

                    var binItemsArray = [];
                    for (var i = 0, l = arr.length; i < l; i++) {
                        var item = arr[i];
                        var binItem = Converter._converters[arrayItemType.name]['binary'](item);
                        //console.log("binItem", binItem);
                        binItemsArray.push( binItem );
                    }

                    var binItems = binItemsArray.join("");

                    var paddingLength = 0;
                    if (binItems.length % 4) paddingLength = 4 - (binItems.length % 4);
                    var binPaddingLen = NumberToBinary(paddingLength, 2);

                    var binPadding = (new Array(paddingLength+1)).join("0");

                    var bin = [];
                    bin.push(binArrayIdentifier);
                    bin.push(binPaddingLen);
                    bin.push(binPadding);
                    bin.push(binItems);

                    var finished = bin.join("");
                    //console.log("unwrapped", finished);

                    if (wrap === false) return finished;

                    var wrapped = Converter._variableWrapLength( finished);
                    //console.log("wrapped", wrapped);

                    return wrapped;
                }

            }
        },
        "binary": {
            "array": function ConverterBinaryToArray(bin, wrap) { //TODO PADDING NOT GOOD
                var typeDef = DataType("array");

                //console.log("wrapped", bin);
                if (wrap !== false)
                    bin = Converter._variableUnwrapLength( bin);
                //console.log("unwrapped", bin);

                var binArrayIdentifier = bin.substr(0, 4);
                var binPaddingLen = bin.substr(4 , 2);

                var arrayIdentifier = Converter._converters['binary'][ 'half' ]( binArrayIdentifier );
                var paddingLength = BinaryToNumber( binPaddingLen, 2 );

                var dataStart = 4 + 2 + paddingLength;
                var dataLength = bin.length - dataStart;

                var binItems = bin.substr(dataStart, dataLength );

                var arrayItemType = DataType(arrayIdentifier);
                var isVariableArray = arrayItemType.name == "variable";

                var rtn = [];
                if (isVariableArray) {

                } else {
                    var hasVariableLengthChildren = arrayItemType.size == "variable";
                    if (hasVariableLengthChildren) {
                        var VLDS = DataType.VARIABLELENGTHDESCRIPTORSIZE;
                        while ( binItems != "" ) {

                            var variableLength = Converter._variableLength( binItems );
                            var binItem = binItems.substr(0, VLDS + variableLength);
                            binItems = binItems.substr(VLDS+variableLength);
                            //console.log("binItem", binItem, BinaryToNumber(binItem, 16));

                            rtn.push( Converter._converters['binary'][ arrayItemType.name ]( binItem) );
                        }
                    } else {
                        while ( binItems != "" ) {
                            var binItem = binItems.substr(0, arrayItemType.length);
                            binItems = binItems.substr(arrayItemType.length);

                            rtn.push( Converter._converters['binary'][ arrayItemType.name ](binItem) );
                        }
                    }

                }


                return rtn;

            },
            "base64": function ConverterBinaryToBase64(bin) { //TODO PADDING NOT GOOD
                var paddingLength = 0;
                if (bin.length % 6) paddingLength = 6 - (bin.length % 6);
                binPaddingLen = NumberToBinary(paddingLength, 6);
                binPadding = Padding.addLeft("", paddingLength);
                bin = binPaddingLen + binPadding + bin;

                var binLength = bin.length;
                var base64 = "";
                for (var b = 0; b < 10000; b++) {
                    if (b*6 >= binLength) break;

                    var block = bin.substr(b*6,6);
                    base64 += Base64(parseInt(block, 2));
                }

                return base64;
            },
            "base16": function ConverterBinaryToBase16(bin) {
                var paddingLength = 0;
                if (bin.length % 4) paddingLength = 4 - (bin.length % 4);
                binPaddingLen = NumberToBinary(paddingLength, 4);
                binPadding = Padding.addLeft("", paddingLength);
                bin = binPaddingLen + binPadding + bin;

                var binLength = bin.length;
                var hex = "";
                for (var b = 0; b < 10000; b++) {
                    if (b*4 >= binLength) break;

                    var block = bin.substr(b*4,4);
                    hex += parseInt(block, 2).toString(16);
                }
                return hex;
            },
            "double": function ConverterBinaryToDouble(bin, wrap) {
                var typeDef = DataType("double");

                if (wrap !== false)
                    bin = Converter._variableUnwrapLength(bin);

                var isMinus = bin.substr(0 ,1) == 1;

                var exponentByte = parseInt("0" + bin.substr(1, 7), 2);
                var baseLong = parseInt( bin.substr(8, bin.length), 2);

                var dbl = parseFloat(baseLong+"E-"+exponentByte, 10);
                if (isMinus) dbl = dbl * -1;

                return dbl;
            },
            "long": function ConverterBinaryToLong(bin) {
                return parseInt(bin.substr(0, 32), 2);
            },
            "short": function ConverterBinaryToShort(bin) {
                return parseInt(bin.substr(0, 16), 2);
            },
            "byte": function ConverterBinaryToByte(bin) {
                return parseInt(bin.substr(0, 8), 2);
            },
            "half": function ConverterBinaryToHalf(bin) {
                return parseInt(bin.substr(0, 4), 2);
            },
            "boolean": function ConverterBinaryToBoolean(bin) {
                return bin.substr(0,1) == "1" ? true: false;
            },
            "number": function ConverterBinaryToNumber(bin) {
                return parseInt(bin, 2);
            }
        }
    };

    window.SCORMSuspendData = {
        serialize: function SCORMSuspendDataSerialize(arr) {
            return Converter ("array", "base64", arr);
        },
        deserialize: function SCORMSuspendDataDeserialize(base64) {
            return Converter("base64", "array", base64);
        },
        Base64: Base64,
        Converter: Converter,
        DataType: DataType
    };


})(_);

define("extensions/adapt-contrib-spoor/js/serializers/scormSuspendDataSerializer", function(){});

define('extensions/adapt-contrib-spoor/js/serializers/questions',[
    'core/js/adapt',
    './scormSuspendDataSerializer'
], function (Adapt) {

    //Captures the completion status and user selections of the question components
    //Returns and parses a base64 style string
    var includes = {
        "_isQuestionType": true,
        "_isResetOnRevisit": false
    };

    var serializer = {
        serialize: function () {
            return this.serializeSaveState();
        },

        serializeSaveState: function() {
            if (Adapt.course.get('_latestTrackingId') === undefined) {
                var message = "This course is missing a latestTrackingID.\n\nPlease run the grunt process prior to deploying this module on LMS.\n\nScorm tracking will not work correctly until this is done.";
                console.error(message);
                return "";
            }

            var rtn = "";
            try {
                var data = this.captureData();
                if (data.length === 0) return "";
                rtn = SCORMSuspendData.serialize(data);
            } catch(e) {
                console.error(e);
            }

            return rtn;
        },

        captureData: function() {
            var data = [];

            var trackingIds = Adapt.blocks.pluck("_trackingId");
            var blocks = {};
            var countInBlock = {};

            for (var i = 0, l = trackingIds.length; i < l; i++) {

                var trackingId = trackingIds[i];
                var blockModel = Adapt.blocks.findWhere({_trackingId: trackingId });
                var componentModels = blockModel.getChildren().where(includes);

                for (var c = 0, cl = componentModels.length; c < cl; c++) {

                    var component = componentModels[c].toJSON();
                    var blockId = component._parentId;

                    if (!blocks[blockId]) {
                        blocks[blockId] = blockModel.toJSON();
                    }

                    var block = blocks[blockId];
                    if (countInBlock[blockId] === undefined) countInBlock[blockId] = -1;
                    countInBlock[blockId]++;

                    var blockLocation = countInBlock[blockId];

                    if (component['_isInteractionComplete'] === false || component['_isComplete'] === false) {
                        //if component is not currently complete skip it
                        continue;
                    }

                    var hasUserAnswer = (component['_userAnswer'] !== undefined);
                    var isUserAnswerArray = (component['_userAnswer'] instanceof Array);

                    if (hasUserAnswer && isUserAnswerArray && component['_userAnswer'].length === 0) {
                        hasUserAnswer = false;
                        isUserAnswerArray = false;
                    }

                    var numericParameters = [
                            blockLocation,
                            block['_trackingId'],
                            component['_score'] || 0,
                            component['_attemptsLeft'] || 0
                        ];

                    var booleanParameters = [
                            hasUserAnswer,
                            isUserAnswerArray,
                            component['_isInteractionComplete'],
                            component['_isSubmitted'],
                            component['_isCorrect'] || false
                        ];

                    var dataItem = [
                        numericParameters,
                        booleanParameters
                    ];


                    if (hasUserAnswer) {
                        var userAnswer = isUserAnswerArray ? component['_userAnswer'] : [component['_userAnswer']];

                        var arrayType = SCORMSuspendData.DataType.getArrayType(userAnswer);

                        switch(arrayType.name) {
                        case "string": case "variable":
                            console.log("Cannot store _userAnswers from component " + component._id + " as array is of variable or string type.");
                            continue;
                        }

                        dataItem.push(userAnswer);
                    }

                    data.push(dataItem);

                }

            }

            return data;

        },

        deserialize: function (str) {

            try {
                var data = SCORMSuspendData.deserialize(str);
                this.releaseData( data );
            } catch(e) {
                console.error(e);
            }

        },

        releaseData: function (arr) {

            for (var i = 0, l = arr.length; i < l; i++) {
                var dataItem = arr[i];

                var numericParameters = dataItem[0];
                var booleanParameters = dataItem[1];

                var blockLocation = numericParameters[0];
                var trackingId = numericParameters[1];
                var score = numericParameters[2];
                var attemptsLeft = numericParameters[3] || 0;

                var hasUserAnswer = booleanParameters[0];
                var isUserAnswerArray = booleanParameters[1];
                var isInteractionComplete = booleanParameters[2];
                var isSubmitted = booleanParameters[3];
                var isCorrect = booleanParameters[4];

                var block = Adapt.blocks.findWhere({_trackingId: trackingId});
                var components = block.getChildren();
                components = components.where(includes);
                var component = components[blockLocation];

                component.set("_isComplete", true);
                component.set("_isInteractionComplete", isInteractionComplete);
                component.set("_isSubmitted", isSubmitted);
                component.set("_score", score);
                component.set("_isCorrect", isCorrect);
                component.set("_attemptsLeft", attemptsLeft);

                if (hasUserAnswer) {
                    var userAnswer = dataItem[2];
                    if (!isUserAnswerArray) userAnswer = userAnswer[0];

                    component.set("_userAnswer", userAnswer);
                }


            }
        }
    };

    return serializer;
});

define('extensions/adapt-contrib-spoor/js/adapt-stateful-session',[
    'core/js/adapt',
    './serializers/default',
    './serializers/questions',
    'core/js/enums/completionStateEnum'
], function(Adapt, serializer, questions, COMPLETION_STATE) {

    // Implements Adapt session statefulness

    var AdaptStatefulSession = _.extend({

        _config: null,
        _shouldStoreResponses: true,
        _shouldRecordInteractions: true,
        _RelaxedTracking: true,

        // Session Begin
        initialize: function(callback) {
            this._onWindowUnload = this.onWindowUnload.bind(this);

            this.getConfig();

            this.getLearnerInfo();

            // Restore state asynchronously to prevent IE8 freezes
            this.restoreSessionState(function() {
                // still need to defer call because AdaptModel.check*Status functions are asynchronous
                _.defer(this.setupEventListeners.bind(this));
                callback();
            }.bind(this));
        },
        getConfig: function() {
            this._config = Adapt.config.has('_spoor') ? Adapt.config.get('_spoor') : false;
            this._RelaxedTracking = this._config._tracking._RelaxedTracking;
            this._shouldStoreResponses = (this._config && this._config._tracking && this._config._tracking._shouldStoreResponses);

            // Default should be to record interactions, so only avoid doing that if _shouldRecordInteractions is set to false
            if (this._config && this._config._tracking && this._config._tracking._shouldRecordInteractions === false) {
                this._shouldRecordInteractions = false;
            }
        },

        /**
         * Replace the hard-coded _learnerInfo data in _globals with the actual data from the LMS
         * If the course has been published from the AT, the _learnerInfo object won't exist so we'll need to create it
         */
        getLearnerInfo: function() {
            var globals = Adapt.course.get('_globals');
            if (!globals._learnerInfo) {
                globals._learnerInfo = {};
            }
            _.extend(globals._learnerInfo, Adapt.offlineStorage.get("learnerinfo"));
        },

        saveSessionState: function() {
            var sessionPairs = this.getSessionState();
            Adapt.offlineStorage.set(sessionPairs);
        },

        restoreSessionState: function(callback) {
            var sessionPairs = Adapt.offlineStorage.get();
            var hasNoPairs = _.keys(sessionPairs).length === 0;

            var doSynchronousPart = function() {
                if (sessionPairs.questions && this._shouldStoreResponses) questions.deserialize(sessionPairs.questions);
                if (sessionPairs._isCourseComplete) Adapt.course.set('_isComplete', sessionPairs._isCourseComplete);
                if (sessionPairs._isAssessmentPassed) Adapt.course.set('_isAssessmentPassed', sessionPairs._isAssessmentPassed);
                callback();
            }.bind(this);

            if (hasNoPairs) return callback();

            // Asynchronously restore block completion data because this has been known to be a choke-point resulting in IE8 freezes
            if (sessionPairs.completion) {
                serializer.deserialize(sessionPairs.completion, doSynchronousPart);
            } else {
                doSynchronousPart();
            }
        },

        getSessionState: function() {
            var sessionPairs = {
                "completion": serializer.serialize(),
                "questions": (this._shouldStoreResponses === true ? questions.serialize() : ""),
                "_isCourseComplete": Adapt.course.get("_isComplete") || false,
                "_isAssessmentPassed": Adapt.course.get('_isAssessmentPassed') || false,
            };

            // CUSTOM ESDC relaxed tracking
            if(this._RelaxedTracking === true){
            var coursedata = sessionPairs['completion'];
            var courselength = coursedata.length;
            var count=0; for(var i=0; i<coursedata.length; i++){if(coursedata[i] == '1'){count++}}
            var progress = count;
            var calcprogress = (progress / coursedata.length) * 100;

            if (calcprogress >= 80){
                Adapt.offlineStorage.set("status", 'completed');
                Adapt.course.set('_isComplete', true);
                } else {
                    // do nothing
            }
            }else {
                // nothing new
            }

            return sessionPairs;
        },

        // Session In Progress
        setupEventListeners: function() {
            $(window).on('beforeunload unload', this._onWindowUnload);

            if (this._shouldStoreResponses) {
                this.listenTo(Adapt.components, 'change:_isInteractionComplete', this.onQuestionComponentComplete);
            }

            if (this._shouldRecordInteractions) {
                this.listenTo(Adapt, 'questionView:recordInteraction', this.onQuestionRecordInteraction);
            }

            this.listenTo(Adapt.blocks, 'change:_isComplete', this.onBlockComplete);
            this.listenTo(Adapt, {
                'assessment:complete': this.onAssessmentComplete,
                'app:languageChanged': this.onLanguageChanged,
                'tracking:complete': this.onTrackingComplete
            });
        },

        removeEventListeners: function () {
            $(window).off('beforeunload unload', this._onWindowUnload);
            this.stopListening();
        },

        reattachEventListeners: function() {
            this.removeEventListeners();
            this.setupEventListeners();
        },

        onBlockComplete: function(block) {
            this.saveSessionState();
        },

        onQuestionComponentComplete: function(component) {
            if (!component.get("_isQuestionType")) return;

            this.saveSessionState();
        },

        onTrackingComplete: function(completionData) {
            this.saveSessionState();

            var completionStatus = completionData.status.asLowerCase;

            // The config allows the user to override the completion state.
            switch (completionData.status) {
                case COMPLETION_STATE.COMPLETED:
                case COMPLETION_STATE.PASSED: {
                    if (!this._config._reporting._onTrackingCriteriaMet) {
                        Adapt.log.warn("No value defined for '_onTrackingCriteriaMet', so defaulting to '" + completionStatus + "'");
                    } else {
                        completionStatus = this._config._reporting._onTrackingCriteriaMet;
                    }

                    break;
                }

                case COMPLETION_STATE.FAILED: {
                    if (!this._config._reporting._onAssessmentFailure) {
                        Adapt.log.warn("No value defined for '_onAssessmentFailure', so defaulting to '" + completionStatus + "'");
                    } else {
                        completionStatus = this._config._reporting._onAssessmentFailure;
                    }
                }
            }

            Adapt.offlineStorage.set("status", completionStatus);
        },

        onAssessmentComplete: function(stateModel) {
            Adapt.course.set('_isAssessmentPassed', stateModel.isPass);

            this.saveSessionState();

            this.submitScore(stateModel);
        },

        onQuestionRecordInteraction:function(questionView) {
            var responseType = questionView.getResponseType();

            // If responseType doesn't contain any data, assume that the question
            // component hasn't been set up for cmi.interaction tracking
            if(_.isEmpty(responseType)) return;

            var id = questionView.model.get('_id');
            var response = questionView.getResponse();
            var result = questionView.isCorrect();
            var latency = questionView.getLatency();

            Adapt.offlineStorage.set("interaction", id, response, result, latency, responseType);
        },

        /**
         * when the user switches language, we need to:
         * - reattach the event listeners as the language change triggers a reload of the json, which will create brand new collections
         * - get and save a fresh copy of the session state. as the json has been reloaded, the blocks completion data will be reset (the user is warned that this will happen by the language picker extension)
         * - check to see if the config requires that the lesson_status be reset to 'incomplete'
         */
        onLanguageChanged: function () {
            this.reattachEventListeners();

            this.saveSessionState();

            if (this._config._reporting && this._config._reporting._resetStatusOnLanguageChange === true) {
                Adapt.offlineStorage.set("status", "incomplete");
            }
        },

        submitScore: function(stateModel) {
            if (this._config && !this._config._tracking._shouldSubmitScore) return;

            if (stateModel.isPercentageBased) {
                Adapt.offlineStorage.set("score", stateModel.scoreAsPercent, 0, 100);
            } else {
                Adapt.offlineStorage.set("score", stateModel.score, 0, stateModel.maxScore);
            }
        },

        // Session End
        onWindowUnload: function() {
            this.removeEventListeners();
        }

    }, Backbone.Events);

    return AdaptStatefulSession;

});
define('extensions/adapt-contrib-spoor/js/adapt-offlineStorage-scorm',[
    'core/js/adapt',
    './scorm',
    'core/js/offlineStorage'
], function(Adapt, scorm) {

    //SCORM handler for Adapt.offlineStorage interface.

    //Stores to help handle posting and offline uniformity
    var temporaryStore = {};
    var suspendDataStore = {};
    var suspendDataRestored = false;

    Adapt.offlineStorage.initialize({

        get: function(name) {
            if (name === undefined) {
                //If not connected return just temporary store.
                if (this.useTemporaryStore()) return temporaryStore;

                //Get all values as a combined object
                suspendDataStore = this.getCustomStates();

                var data = _.extend(_.clone(suspendDataStore), {
                    location: scorm.getLessonLocation(),
                    score: scorm.getScore(),
                    status: scorm.getStatus(),
                    student: scorm.getStudentName(),
                    learnerInfo: this.getLearnerInfo()
                });

                suspendDataRestored = true;

                return data;
            }

            //If not connected return just temporary store value.
            if (this.useTemporaryStore()) return temporaryStore[name];

            //Get by name
            switch (name.toLowerCase()) {
                case "location":
                    return scorm.getLessonLocation();
                case "score":
                    return scorm.getScore();
                case "status":
                    return scorm.getStatus();
                case "student":// for backwards-compatibility. learnerInfo is preferred now and will give you more information
                    return scorm.getStudentName();
                case "learnerinfo":
                    return this.getLearnerInfo();
                default:
                    return this.getCustomState(name);
            }
        },

        set: function(name, value) {
            //Convert arguments to array and drop the 'name' parameter
            var args = [].slice.call(arguments, 1);
            var isObject = typeof name == "object";

            if (isObject) {
                value = name;
                name = "suspendData";
            }

            if (this.useTemporaryStore()) {
                if (isObject) {
                    temporaryStore = _.extend(temporaryStore, value);
                } else {
                    temporaryStore[name] = value;
                }

                return true;
            }

            switch (name.toLowerCase()) {
                case "interaction":
                    return scorm.recordInteraction.apply(scorm, args);
                case "location":
                    return scorm.setLessonLocation.apply(scorm, args);
                case "score":
                    return scorm.setScore.apply(scorm, args);
                case "status":
                    return scorm.setStatus.apply(scorm, args);
                case "student":
                case "learnerinfo":
                    return false;// these properties are read-only
                case "lang":
                    scorm.setLanguage(value);
                    // fall-through so that lang gets stored in suspend_data as well:
                    // because in SCORM 1.2 cmi.student_preference.language is an optional data element
                    // so we can't rely on the LMS having support for it.
                    // If it does support it we may as well save the user's choice there purely for reporting purposes
                case "suspenddata":
                default:
                    if (isObject) {
                        suspendDataStore = _.extend(suspendDataStore, value);
                    } else {
                        suspendDataStore[name] = value;
                    }

                    var dataAsString = JSON.stringify(suspendDataStore);
                    return (suspendDataRestored) ? scorm.setSuspendData(dataAsString) : false;
            }
        },

        getCustomStates: function() {
            var isSuspendDataStoreEmpty = _.isEmpty(suspendDataStore);
            if (!isSuspendDataStoreEmpty && suspendDataRestored) return _.clone(suspendDataStore);

            var dataAsString = scorm.getSuspendData();
            if (dataAsString === "" || dataAsString === " " || dataAsString === undefined) return {};

            var dataAsJSON = JSON.parse(dataAsString);
            if (!isSuspendDataStoreEmpty && !suspendDataRestored) dataAsJSON = _.extend(dataAsJSON, suspendDataStore);
            return dataAsJSON;
        },

        getCustomState: function(name) {
            var dataAsJSON = this.getCustomStates();
            return dataAsJSON[name];
        },

        useTemporaryStore: function() {
            var cfg = Adapt.config.get('_spoor');

            if (!scorm.lmsConnected || (cfg && cfg._isEnabled === false)) return true;
            return false;
        },

        /**
         * Returns an object with the properties:
         * - id (cmi.core.student_id)
         * - name (cmi.core.student_name - which is usually in the format "Lastname, Firstname" - but sometimes doesn't have the space after the comma)
         * - firstname
         * - lastname
         */
        getLearnerInfo: function() {
            var name = scorm.getStudentName();
            var firstname = "", lastname = "";
            if (name && name !== 'undefined' && name.indexOf(",") > -1) {
                //last name first, comma separated
                var nameSplit = name.split(",");
                lastname = $.trim(nameSplit[0]);
                firstname = $.trim(nameSplit[1]);
                name = firstname + " " + lastname;
            } else {
                console.log("SPOOR: LMS learner_name not in 'lastname, firstname' format");
            }
            return {
                name: name,
                lastname: lastname,
                firstname: firstname,
                id: scorm.getStudentId()
            };
        }

    });

});
define('extensions/adapt-contrib-spoor/js/adapt-contrib-spoor',[
    'core/js/adapt',
    './scorm',
    './adapt-stateful-session',
    './adapt-offlineStorage-scorm'
], function(Adapt, scorm, adaptStatefulSession) {

    //SCORM session manager

    var Spoor = _.extend({

        _config: null,

    //Session Begin

        initialize: function() {
            this.listenToOnce(Adapt, {
                'offlineStorage:prepare': this.onPrepareOfflineStorage,
                'app:dataReady': function() {
                    Adapt.wait.for(adaptStatefulSession.initialize.bind(adaptStatefulSession));
                }
            });
        },

        onPrepareOfflineStorage: function() {
            if (!this.checkConfig()) {
                Adapt.offlineStorage.setReadyStatus();
                return;
            }

            this.configureAdvancedSettings();

            scorm.initialize();

            /*
            force offlineStorage-scorm to initialise suspendDataStore - this allows us to do things like store the user's
            chosen language before the rest of the course data loads
            */
            Adapt.offlineStorage.get();

            Adapt.offlineStorage.setReadyStatus();

            this.setupEventListeners();
        },

        checkConfig: function() {
            this._config = Adapt.config.get('_spoor') || false;

            if (this._config && this._config._isEnabled !== false) return true;

            return false;
        },

        configureAdvancedSettings: function() {
            if(this._config._advancedSettings) {
                var settings = this._config._advancedSettings;

                if(settings._showDebugWindow) scorm.showDebugWindow();

                scorm.setVersion(settings._scormVersion || "1.2");

                if(settings._suppressErrors) {
                    scorm.suppressErrors = settings._suppressErrors;
                }

                if(settings._commitOnStatusChange) {
                    scorm.commitOnStatusChange = settings._commitOnStatusChange;
                }

                if(_.isFinite(settings._timedCommitFrequency)) {
                    scorm.timedCommitFrequency = settings._timedCommitFrequency;
                }

                if(_.isFinite(settings._maxCommitRetries)) {
                    scorm.maxCommitRetries = settings._maxCommitRetries;
                }

                if(_.isFinite(settings._commitRetryDelay)) {
                    scorm.commitRetryDelay = settings._commitRetryDelay;
                }

                if ("_exitStateIfIncomplete" in settings) {
                    scorm.exitStateIfIncomplete = settings._exitStateIfIncomplete;
                }

                if ("_exitStateIfComplete" in settings) {
                    scorm.exitStateIfComplete = settings._exitStateIfComplete;
                }
            } else {
                /**
                * force use of SCORM 1.2 by default - some LMSes (SABA/Kallidus for instance) present both APIs to the SCO and, if given the choice,
                * the pipwerks code will automatically select the SCORM 2004 API - which can lead to unexpected behaviour.
                */
                scorm.setVersion("1.2");
            }

            /**
            * suppress SCORM errors if 'nolmserrors' is found in the querystring
            */
            if(window.location.search.indexOf('nolmserrors') != -1) scorm.suppressErrors = true;
        },

        setupEventListeners: function() {
            var advancedSettings = this._config._advancedSettings;
            var shouldCommitOnVisibilityChange = (!advancedSettings ||
                advancedSettings._commitOnVisibilityChangeHidden !== false) &&
                document.addEventListener;

            this._onWindowUnload = this.onWindowUnload.bind(this);
            $(window).on('beforeunload unload', this._onWindowUnload);

            if (shouldCommitOnVisibilityChange) {
                document.addEventListener("visibilitychange", this.onVisibilityChange);
            }

            require(['libraries/jquery.keycombo'], function() {
                // listen for user holding 'd', 'e', 'v' keys together
                $.onKeyCombo([68, 69, 86], function() {
                    scorm.showDebugWindow();
                });
            });
        },

        removeEventListeners: function() {
            $(window).off('beforeunload unload', this._onWindowUnload);

            document.removeEventListener("visibilitychange", this.onVisibilityChange);
        },

        onVisibilityChange: function() {
            if (document.visibilityState === "hidden") scorm.commit();
        },

    //Session End

        onWindowUnload: function() {
            this.removeEventListeners();

            if (!scorm.finishCalled){
                scorm.finish();
            }
        }

    }, Backbone.Events);

    Spoor.initialize();

});

define('extensions/adapt-contrib-tutor/js/adapt-contrib-tutor',[
    'coreJS/adapt'
],function(Adapt) {

    Adapt.on('questionView:showFeedback', function(view) {

        var alertObject = {
            title: view.model.get("feedbackTitle"),
            body: view.model.get("feedbackMessage")
        };

        var attributes = {};
        var classes = [];

        if (view.model.has('_isCorrect')) {
            // Attach specific classes so that feedback can be styled.
            if (view.model.get('_isCorrect')) {
                classes.push('correct');
            } else {
                if (view.model.has('_isAtLeastOneCorrectSelection')) {
                    // Partially correct feedback is an option.
                    if (view.model.get('_isAtLeastOneCorrectSelection')) {
                        classes.push('partially-correct');
                    } else {
                        classes.push('incorrect');
                    }
                } else {
                    classes.push('incorrect');
                }
            }
        }

        // Add the extension/component type which triggered this.
        if (view.model.has('_component')) {
            classes.push('component-' + view.model.get('_component'));
        } else if (view.model.has('_extension')) {
            classes.push('extension-' + view.model.get('_extension'));
        }

        // Add the _id property as attribute.
        attributes['data-adapt-id'] = view.model.get('_id');

        alertObject._classes = classes.join(' ');
        alertObject._attributes = attributes;

        Adapt.once("notify:closed", function() {
            Adapt.trigger("tutor:closed", view, alertObject);
        });

        Adapt.trigger('notify:popup', alertObject);

        Adapt.trigger('tutor:opened', view, alertObject);
    });

});

define('extensions/adapt-esdc-i18n/js/adapt-esdc-i18n',[ "core/js/adapt" ], function(Adapt) {

	function loadScript(scriptObject, callback) {
		var head = document.getElementsByTagName('head')[0];
		var script = document.createElement('script');
		script.type = scriptObject.type || 'text/javascript';
		if (scriptObject.src) {
			script.src = scriptObject.src;
		}
		if (scriptObject.text) {
			script.text = scriptObject.text;
		}
		if (callback) {
			script.onreadystatechange = callback;
			script.onload = callback;
		}
		head.appendChild(script);
	}

	function init() {
		Adapt.wait ? Adapt.wait.begin() : Adapt.trigger("plugin:beginWait");
			loadScript({ src: './assets/jquery.i18n.js' }, function() {
				loadScript({ src: './assets/jquery.i18n.messagestore.js' }, function() {
						Adapt.wait ? Adapt.wait.end() : Adapt.trigger("plugin:endWait");
						Adapt.trigger("i18n:ready");
				});
			});
	};

	Adapt.once("app:dataReady", init);
});
define('extensions/adapt-homeButton/js/adapt-homeButton',[
    'core/js/adapt'
], function(Adapt) {

    var HomeButton = Backbone.Controller.extend({

        _$html: null,

        initialize: function() {
            this.listenTo(Adapt, "app:dataReady", this._onDataReady);
        },

        _onDataReady: function() {
            var config = Adapt.config.get("_homeButton");
            if (!config || !config._isEnabled) return;
            this._$html = $("html");
            this.listenTo(Adapt, {
                'remove': this._onRemove,
                'router:menu router:page': this._onRouterEvent,
                'navigation:redirectedHomeButton': this._redirected
            });
        },

        _onRouterEvent: function(model) {
            this._config = model.get("_homeButton");
            var isEnabled = (this._config && this._config._isEnabled);
            if (!isEnabled) return this._disabled();
            this._enabled();
        },

        _onRemove: function() {
            this._disabled();
        },

        _disabled: function() {
            this._$html.removeClass("hide-home-button");
            if (this._dataEvent) {
                $(".navigation-home-button").attr("data-event", this._dataEvent);
                this._dataEvent = null;
            }
        },

        _enabled: function() {
            this._$html.toggleClass("hide-home-button", !!this._config._hideHomeButton);
            // extend functionality to toggle back button display
            this._$html.toggleClass("hide-back-button", !!this._config._hideBackButton);
            if (!$(".navigation-home-button")[0]) {
                // if home button doesn't exist create home button
                this._createHomeButton();
            }
            if (this._config._redirectToId) {
                this._dataEvent = $(".navigation-home-button").attr("data-event");
                $(".navigation-home-button").attr("data-event", "redirectedHomeButton");
            }
        },

        _createHomeButton: function() {
            var config = Adapt.course.get("_homeButton");
            var altText = (config && config.alt);
            var $backButton = $('button[data-event="backButton"]');
            var $homeButton = $('<button>', {
                attr: {
                    'data-event': 'homeButton'
                },
                'class': 'base navigation-home-button icon icon-home',
                'aria-label': altText
            });

            // insert immediately after back button (so that tab order is correct)
            // back button is part of core (navigation.hbs)
            $homeButton.insertAfter($backButton);
        },

        _redirected: function() {
            if (!this._config._redirectToId) return;
            var model = Adapt.findById(this._config._redirectToId);
            if (!model) return;
            switch (model.get("_type")) {
                case "course":
                    Backbone.history.navigate("#/", { trigger: true, replace: false });
                    break;
                case "menu":
                case "page":
                    Backbone.history.navigate("#/id/"+model.get("_id"), { trigger: true, replace: false });
                    break;
            }
        }

    });

    return new HomeButton();

});

define('extensions/adapt-pageIncompletePrompt/js/adapt-pageIncompletePrompt',[
    'core/js/adapt'
], function(Adapt) {

    var PageIncompletePrompt = Backbone.Controller.extend({

        PLUGIN_NAME: '_pageIncompletePrompt',

        handleRoute: true,
        inPage: false,
        inPopup: false,
        isChangingLanguage: false,
        pageModel: null,
        model: null,

        _ignoreAccessibilityNavigation: false,

        initialize: function() {
            this.setupEventListeners();
        },

        setupEventListeners: function() {
            this.listenTo(Adapt, {
                'app:languageChanged': this.onLanguageChanging,
                'pageView:ready': this.onPageViewReady,
                'pageIncompletePrompt:leavePage': this.onLeavePage,
                'pageIncompletePrompt:cancel': this.onLeaveCancel,
                'router:navigate': this.onRouterNavigate
            });

            this.listenToOnce(Adapt, 'app:dataLoaded', function() {
                this.setupModel();
                this.listenTo(Adapt, 'accessibility:toggle', this.onAccessibilityToggle);
            });
        },

        /**
         * suppresses the prompt if the user changes language whilst in a page, then re-enables
         * it once the language has been changed and we've navigated back to a page
         */
        onLanguageChanging: function() {
            this.isChangingLanguage = true;

            this.setupModel();

            Adapt.once('router:page', function() {
                this.isChangingLanguage = false;
            }.bind(this));
        },

        setupModel: function() {
            this.model = Adapt.course.get(this.PLUGIN_NAME);
        },

        onPageViewReady: function() {
            this.inPage = true;
            this.pageModel = Adapt.findById(Adapt.location._currentId);
        },

        onLeavePage: function() {
            if (!this.inPopup) return;
            this.inPopup = false;

            this.stopListening(Adapt, 'notify:cancelled');
            this.enableRouterNavigation(true);
            this.handleRoute = false;
            this.inPage = false;

            window.location.href = this.href;

            this.handleRoute = true;
        },

        onLeaveCancel: function() {
            if (!this.inPopup) return;
            this.inPopup = false;

            this.stopListening(Adapt, 'notify:cancelled');
            this.enableRouterNavigation(true);
            this.handleRoute = true;
        },

        onRouterNavigate: function(routeArguments) {
            if(!this.isEnabled() || this.pageModel.get('_isComplete')) return;

            this.href = window.location.href;

            var id = routeArguments[0];
            if (id) {
                // exit if on same page (e.g. if doing 'retry assessment')
                if (id === Adapt.location._currentId) return;
                // check if routing to current page child
                var model = Adapt.findById(id);
                var parent = model && model.findAncestor('contentObjects');
                if (parent && (parent.get('_id') === this.pageModel.get('_id'))) {
                    return;
                }
            }

            if (this._ignoreAccessibilityNavigation) {
                this._ignoreAccessibilityNavigation = false;
                return;
            }

            this.enableRouterNavigation(false);

            this.showPrompt();
        },

        onAccessibilityToggle: function() {
            if (Adapt.device.touch) {
                //accessibility is always on for touch devices
                //ignore toggle
                this._ignoreAccessibilityNavigation = false;
                return;
            }
            //skip renavigate for accessibility on desktop
            this._ignoreAccessibilityNavigation = true;
        },

        showPrompt: function() {
            // standard prompt settings (from course.json)
            var promptObject = {
                title: this.model.title,
                body: this.model.message,
                _prompts: [{
                    promptText: this.model._buttons.yes,
                    _callbackEvent: 'pageIncompletePrompt:leavePage',
                }, {
                    promptText: this.model._buttons.no,
                    _callbackEvent: 'pageIncompletePrompt:cancel'
                }],
                _showIcon: true
            };

            // override with page-specific settings?
            var pipConfig = this.pageModel.get('_pageIncompletePrompt');
            if (pipConfig && pipConfig._buttons) {
                promptObject.title = pipConfig.title;
                promptObject.body = pipConfig.message;
                promptObject._prompts[0].promptText = pipConfig._buttons.yes;
                promptObject._prompts[1].promptText = pipConfig._buttons.no;
            }

            this.listenToOnce(Adapt, 'notify:cancelled', this.onLeaveCancel);
            Adapt.trigger('notify:prompt', promptObject);
            this.inPopup = true;
        },

        isEnabled: function() {
            if (!Adapt.location._currentId) return false;
            if (!this.handleRoute) return false;
            if (!this.inPage) return false;
            if (this.inPopup) return false;
            if (this.isChangingLanguage) return false;

            switch (Adapt.location._contentType) {
                case 'menu': case 'course':
                    this.inPage = false;
                    return false;
            }

            var pageModel = Adapt.findById(Adapt.location._currentId);
            if (pageModel.get('_isOptional')) return false;

            var isEnabledForCourse = this.model && !!this.model._isEnabled;
            var isEnabledForPage = pageModel.get('_pageIncompletePrompt') && !!pageModel.get('_pageIncompletePrompt')._isEnabled;
            return (isEnabledForCourse && isEnabledForPage !== false) || isEnabledForPage;
        },

        enableRouterNavigation: function(value) {
            Adapt.router.set('_canNavigate', value, { pluginName: this.PLUGIN_NAME });
        }

    });


    return new PageIncompletePrompt();

});

define('extensions/adapt-search/js/searchDrawerItemView',[
    'core/js/adapt',
], function(Adapt) {

    var SearchDrawerItemView = Backbone.View.extend({

        className: 'drawer-item-search',

        events: {
            'click .start-search': 'search',
            'keyup .search-box': 'search'
        },

        initialize: function(options) {

            this.listenTo(Adapt, 'drawer:empty', this.remove);
            this.render();

            this.search = _.debounce(this.search.bind(this), 1000);
            if(options.query){
                this.$(".search-box").val(options.query);
            }

        },

        render: function() {
            var data = this.model.toJSON();

            var template = Handlebars.templates['searchBox'];
            $(this.el).html(template(data));

            return this;
        },

        search: function(event) {
          if(event && event.preventDefault) event.preventDefault();

          var searchVal = this.$(".search-box").val();
          Adapt.trigger("search:filterTerms", searchVal);
      }

    });

    return SearchDrawerItemView;
});

define('extensions/adapt-search/js/search-algorithm',[
    "core/js/adapt",
    "core/js/models/adaptModel"
], function (Adapt, AdaptModel) {

    if (!AdaptModel.prototype.getParents) {

        AdaptModel.prototype.getParents = function (shouldIncludeChild) {
            var parents = [];
            var context = this;

            if (shouldIncludeChild) parents.push(context);

            while (context.has("_parentId")) {
                context = context.getParent();
                parents.push(context);
            }

            return parents.length ? new Backbone.Collection(parents) : null;
        }

    }

    var searchDefaults = { //override in course.json "_search": {}

        _searchAttributes: [
            {
                "_attributeName": "_search",
                "_level": 1,
                "_allowTextPreview": false
            },
            {
                "_attributeName": "_keywords",
                "_level": 1,
                "_allowTextPreview": false
            },
            {
                "_attributeName": "keywords",
                "_level": 1,
                "_allowTextPreview": false
            },
            {
                "_attributeName": "displayTitle",
                "_level": 2,
                "_allowTextPreview": true
            },
            {
                "_attributeName": "title",
                "_level": 2,
                "_allowTextPreview": false
            },
            {
                "_attributeName": "body",
                "_level": 3,
                "_allowTextPreview": true
            },
            {
                "_attributeName": "alt",
                "_level": 4,
                "_allowTextPreview": false
            },
            {
                "_attributeName": "_alt",
                "_level": 4,
                "_allowTextPreview": false
            },
            {
                "_attributeName": "_items",
                "_level": 5,
                "_allowTextPreview": false
            },
            {
                "_attributeName": "items",
                "_level": 5,
                "_allowTextPreview": false
            },
            {
                "_attributeName": "text",
                "_level": 5,
                "_allowTextPreview": true
            }
        ],

        _hideComponents: [
            "blank"
        ],

        _hideTypes: [

        ],

        _ignoreWords: [
            "a", "an", "and", "are", "as", "at", "be", "by", "for",
            "from", "has", "he", "in", "is", "it", "its", "of", "on",
            "that", "the", "to", "was", "were", "will", "wish", "",
        ],

        _matchOn: {
            _contentWordBeginsPhraseWord: false,
            _contentWordContainsPhraseWord: false,
            _contentWordEqualsPhraseWord: true,
            _phraseWordBeginsContentWord: true
        },

        _scoreQualificationThreshold: 20,
        _minimumWordLength: 2,
        _frequencyImportance: 5

    };

    var wordCharacters = [
        '\u0041-\u005A',
        '\u0030-\u0039',
        '\u0061-\u007A',
        '\u00AA',
        '\u00B5',
        '\u00BA',
        '\u00C0-\u00D6',
        '\u00D8-\u00F6',
        '\u00F8-\u02C1',
        '\u02C6-\u02D1',
        '\u02E0-\u02E4',
        '\u02EC',
        '\u02EE',
        '\u0370-\u0374',
        '\u0376',
        '\u0377',
        '\u037A-\u037D',
        '\u0386',
        '\u0388-\u038A',
        '\u038C',
        '\u038E-\u03A1',
        '\u03A3-\u03F5',
        '\u03F7-\u0481',
        '\u048A-\u0527',
        '\u0531-\u0556',
        '\u0559',
        '\u0561-\u0587',
        '\u05D0-\u05EA',
        '\u05F0-\u05F2',
        '\u0620-\u064A',
        '\u066E',
        '\u066F',
        '\u0671-\u06D3',
        '\u06D5',
        '\u06E5',
        '\u06E6',
        '\u06EE',
        '\u06EF',
        '\u06FA-\u06FC',
        '\u06FF',
        '\u0710',
        '\u0712-\u072F',
        '\u074D-\u07A5',
        '\u07B1',
        '\u07CA-\u07EA',
        '\u07F4',
        '\u07F5',
        '\u07FA',
        '\u0800-\u0815',
        '\u081A',
        '\u0824',
        '\u0828',
        '\u0840-\u0858',
        '\u08A0',
        '\u08A2-\u08AC',
        '\u0904-\u0939',
        '\u093D',
        '\u0950',
        '\u0958-\u0961',
        '\u0971-\u0977',
        '\u0979-\u097F',
        '\u0985-\u098C',
        '\u098F',
        '\u0990',
        '\u0993-\u09A8',
        '\u09AA-\u09B0',
        '\u09B2',
        '\u09B6-\u09B9',
        '\u09BD',
        '\u09CE',
        '\u09DC',
        '\u09DD',
        '\u09DF-\u09E1',
        '\u09F0',
        '\u09F1',
        '\u0A05-\u0A0A',
        '\u0A0F',
        '\u0A10',
        '\u0A13-\u0A28',
        '\u0A2A-\u0A30',
        '\u0A32',
        '\u0A33',
        '\u0A35',
        '\u0A36',
        '\u0A38',
        '\u0A39',
        '\u0A59-\u0A5C',
        '\u0A5E',
        '\u0A72-\u0A74',
        '\u0A85-\u0A8D',
        '\u0A8F-\u0A91',
        '\u0A93-\u0AA8',
        '\u0AAA-\u0AB0',
        '\u0AB2',
        '\u0AB3',
        '\u0AB5-\u0AB9',
        '\u0ABD',
        '\u0AD0',
        '\u0AE0',
        '\u0AE1',
        '\u0B05-\u0B0C',
        '\u0B0F',
        '\u0B10',
        '\u0B13-\u0B28',
        '\u0B2A-\u0B30',
        '\u0B32',
        '\u0B33',
        '\u0B35-\u0B39',
        '\u0B3D',
        '\u0B5C',
        '\u0B5D',
        '\u0B5F-\u0B61',
        '\u0B71',
        '\u0B83',
        '\u0B85-\u0B8A',
        '\u0B8E-\u0B90',
        '\u0B92-\u0B95',
        '\u0B99',
        '\u0B9A',
        '\u0B9C',
        '\u0B9E',
        '\u0B9F',
        '\u0BA3',
        '\u0BA4',
        '\u0BA8-\u0BAA',
        '\u0BAE-\u0BB9',
        '\u0BD0',
        '\u0C05-\u0C0C',
        '\u0C0E-\u0C10',
        '\u0C12-\u0C28',
        '\u0C2A-\u0C33',
        '\u0C35-\u0C39',
        '\u0C3D',
        '\u0C58',
        '\u0C59',
        '\u0C60',
        '\u0C61',
        '\u0C85-\u0C8C',
        '\u0C8E-\u0C90',
        '\u0C92-\u0CA8',
        '\u0CAA-\u0CB3',
        '\u0CB5-\u0CB9',
        '\u0CBD',
        '\u0CDE',
        '\u0CE0',
        '\u0CE1',
        '\u0CF1',
        '\u0CF2',
        '\u0D05-\u0D0C',
        '\u0D0E-\u0D10',
        '\u0D12-\u0D3A',
        '\u0D3D',
        '\u0D4E',
        '\u0D60',
        '\u0D61',
        '\u0D7A-\u0D7F',
        '\u0D85-\u0D96',
        '\u0D9A-\u0DB1',
        '\u0DB3-\u0DBB',
        '\u0DBD',
        '\u0DC0-\u0DC6',
        '\u0E01-\u0E30',
        '\u0E32',
        '\u0E33',
        '\u0E40-\u0E46',
        '\u0E81',
        '\u0E82',
        '\u0E84',
        '\u0E87',
        '\u0E88',
        '\u0E8A',
        '\u0E8D',
        '\u0E94-\u0E97',
        '\u0E99-\u0E9F',
        '\u0EA1-\u0EA3',
        '\u0EA5',
        '\u0EA7',
        '\u0EAA',
        '\u0EAB',
        '\u0EAD-\u0EB0',
        '\u0EB2',
        '\u0EB3',
        '\u0EBD',
        '\u0EC0-\u0EC4',
        '\u0EC6',
        '\u0EDC-\u0EDF',
        '\u0F00',
        '\u0F40-\u0F47',
        '\u0F49-\u0F6C',
        '\u0F88-\u0F8C',
        '\u1000-\u102A',
        '\u103F',
        '\u1050-\u1055',
        '\u105A-\u105D',
        '\u1061',
        '\u1065',
        '\u1066',
        '\u106E-\u1070',
        '\u1075-\u1081',
        '\u108E',
        '\u10A0-\u10C5',
        '\u10C7',
        '\u10CD',
        '\u10D0-\u10FA',
        '\u10FC-\u1248',
        '\u124A-\u124D',
        '\u1250-\u1256',
        '\u1258',
        '\u125A-\u125D',
        '\u1260-\u1288',
        '\u128A-\u128D',
        '\u1290-\u12B0',
        '\u12B2-\u12B5',
        '\u12B8-\u12BE',
        '\u12C0',
        '\u12C2-\u12C5',
        '\u12C8-\u12D6',
        '\u12D8-\u1310',
        '\u1312-\u1315',
        '\u1318-\u135A',
        '\u1380-\u138F',
        '\u13A0-\u13F4',
        '\u1401-\u166C',
        '\u166F-\u167F',
        '\u1681-\u169A',
        '\u16A0-\u16EA',
        '\u1700-\u170C',
        '\u170E-\u1711',
        '\u1720-\u1731',
        '\u1740-\u1751',
        '\u1760-\u176C',
        '\u176E-\u1770',
        '\u1780-\u17B3',
        '\u17D7',
        '\u17DC',
        '\u1820-\u1877',
        '\u1880-\u18A8',
        '\u18AA',
        '\u18B0-\u18F5',
        '\u1900-\u191C',
        '\u1950-\u196D',
        '\u1970-\u1974',
        '\u1980-\u19AB',
        '\u19C1-\u19C7',
        '\u1A00-\u1A16',
        '\u1A20-\u1A54',
        '\u1AA7',
        '\u1B05-\u1B33',
        '\u1B45-\u1B4B',
        '\u1B83-\u1BA0',
        '\u1BAE',
        '\u1BAF',
        '\u1BBA-\u1BE5',
        '\u1C00-\u1C23',
        '\u1C4D-\u1C4F',
        '\u1C5A-\u1C7D',
        '\u1CE9-\u1CEC',
        '\u1CEE-\u1CF1',
        '\u1CF5',
        '\u1CF6',
        '\u1D00-\u1DBF',
        '\u1E00-\u1F15',
        '\u1F18-\u1F1D',
        '\u1F20-\u1F45',
        '\u1F48-\u1F4D',
        '\u1F50-\u1F57',
        '\u1F59',
        '\u1F5B',
        '\u1F5D',
        '\u1F5F-\u1F7D',
        '\u1F80-\u1FB4',
        '\u1FB6-\u1FBC',
        '\u1FBE',
        '\u1FC2-\u1FC4',
        '\u1FC6-\u1FCC',
        '\u1FD0-\u1FD3',
        '\u1FD6-\u1FDB',
        '\u1FE0-\u1FEC',
        '\u1FF2-\u1FF4',
        '\u1FF6-\u1FFC',
        '\u2071',
        '\u207F',
        '\u2090-\u209C',
        '\u2102',
        '\u2107',
        '\u210A-\u2113',
        '\u2115',
        '\u2119-\u211D',
        '\u2124',
        '\u2126',
        '\u2128',
        '\u212A-\u212D',
        '\u212F-\u2139',
        '\u213C-\u213F',
        '\u2145-\u2149',
        '\u214E',
        '\u2183',
        '\u2184',
        '\u2C00-\u2C2E',
        '\u2C30-\u2C5E',
        '\u2C60-\u2CE4',
        '\u2CEB-\u2CEE',
        '\u2CF2',
        '\u2CF3',
        '\u2D00-\u2D25',
        '\u2D27',
        '\u2D2D',
        '\u2D30-\u2D67',
        '\u2D6F',
        '\u2D80-\u2D96',
        '\u2DA0-\u2DA6',
        '\u2DA8-\u2DAE',
        '\u2DB0-\u2DB6',
        '\u2DB8-\u2DBE',
        '\u2DC0-\u2DC6',
        '\u2DC8-\u2DCE',
        '\u2DD0-\u2DD6',
        '\u2DD8-\u2DDE',
        '\u2E2F',
        '\u3005',
        '\u3006',
        '\u3031-\u3035',
        '\u303B',
        '\u303C',
        '\u3041-\u3096',
        '\u309D-\u309F',
        '\u30A1-\u30FA',
        '\u30FC-\u30FF',
        '\u3105-\u312D',
        '\u3131-\u318E',
        '\u31A0-\u31BA',
        '\u31F0-\u31FF',
        '\u3400-\u4DB5',
        '\u4E00-\u9FCC',
        '\uA000-\uA48C',
        '\uA4D0-\uA4FD',
        '\uA500-\uA60C',
        '\uA610-\uA61F',
        '\uA62A',
        '\uA62B',
        '\uA640-\uA66E',
        '\uA67F-\uA697',
        '\uA6A0-\uA6E5',
        '\uA717-\uA71F',
        '\uA722-\uA788',
        '\uA78B-\uA78E',
        '\uA790-\uA793',
        '\uA7A0-\uA7AA',
        '\uA7F8-\uA801',
        '\uA803-\uA805',
        '\uA807-\uA80A',
        '\uA80C-\uA822',
        '\uA840-\uA873',
        '\uA882-\uA8B3',
        '\uA8F2-\uA8F7',
        '\uA8FB',
        '\uA90A-\uA925',
        '\uA930-\uA946',
        '\uA960-\uA97C',
        '\uA984-\uA9B2',
        '\uA9CF',
        '\uAA00-\uAA28',
        '\uAA40-\uAA42',
        '\uAA44-\uAA4B',
        '\uAA60-\uAA76',
        '\uAA7A',
        '\uAA80-\uAAAF',
        '\uAAB1',
        '\uAAB5',
        '\uAAB6',
        '\uAAB9-\uAABD',
        '\uAAC0',
        '\uAAC2',
        '\uAADB-\uAADD',
        '\uAAE0-\uAAEA',
        '\uAAF2-\uAAF4',
        '\uAB01-\uAB06',
        '\uAB09-\uAB0E',
        '\uAB11-\uAB16',
        '\uAB20-\uAB26',
        '\uAB28-\uAB2E',
        '\uABC0-\uABE2',
        '\uAC00-\uD7A3',
        '\uD7B0-\uD7C6',
        '\uD7CB-\uD7FB',
        '\uF900-\uFA6D',
        '\uFA70-\uFAD9',
        '\uFB00-\uFB06',
        '\uFB13-\uFB17',
        '\uFB1D',
        '\uFB1F-\uFB28',
        '\uFB2A-\uFB36',
        '\uFB38-\uFB3C',
        '\uFB3E',
        '\uFB40',
        '\uFB41',
        '\uFB43',
        '\uFB44',
        '\uFB46-\uFBB1',
        '\uFBD3-\uFD3D',
        '\uFD50-\uFD8F',
        '\uFD92-\uFDC7',
        '\uFDF0-\uFDFB',
        '\uFE70-\uFE74',
        '\uFE76-\uFEFC',
        '\uFF21-\uFF3A',
        '\uFF41-\uFF5A',
        '\uFF66-\uFFBE',
        '\uFFC2-\uFFC7',
        '\uFFCA-\uFFCF',
        '\uFFD2-\uFFD7',
        '\uFFDA-\uFFDC'
    ];

    wordCharacters = wordCharacters.join('');

    var search = _.extend({

        model: null,

        _searchableModels: null,
        _wordIndex: null,

        _regularExpressions: {
            matchNotWordBoundaries: new RegExp("[" + wordCharacters + "]+", "g"),
            trimReplaceNonWordCharacters: new RegExp("^([^" + wordCharacters + "])+|([^" + wordCharacters + "])+$", "g"),
            trimReplaceWhitespace: /^\s+|\s+$/g,
            escapeRegExp: function (str) {
                return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            }
        },

        initialize: function () {
            this.setupListeners();
        },

        setupListeners: function () {
            this.listenTo(Adapt, {
                "app:dataReady": this.onDataReady,
                "app:languageChanged": this.clearSearchResults
            });
        },

        clearSearchResults: function () {
            Adapt.trigger("search:filterTerms", "");
        },

        onDataReady: function () {
            var config = Adapt.course.get("_search");
            if (!config || config._isEnabled === false) return;

            this.setupConfig();
            this._searchableModels = this.collectModelTexts();
            this.makeModelTextProfiles();
            this.indexTextProfiles();
            Adapt.trigger("search-algorithm:ready");
        },

        setupConfig: function () {
            var model = Adapt.course.get("_search") || {};
            //make sure defaults are injected, but original model reference is maintained
            var modelWithDefaults = _.extend(searchDefaults, model);

            Adapt.course.set("_search", modelWithDefaults);

            this.model = new Backbone.Model(modelWithDefaults);

        },

        collectModelTexts: function () {

            var searchAttributes = this.model.get("_searchAttributes");
            var hideComponents = this.model.get("_hideComponents");
            var hideTypes = this.model.get("_hideTypes");
            var regularExpressions = this._regularExpressions;


            function combineAdaptModels() {
                var rtn = []
                    .concat(Adapt.contentObjects.models)
                    .concat(Adapt.articles.models)
                    .concat(Adapt.blocks.models)
                    .concat(Adapt.components.models);

                var filtered = _.filter(rtn, function (model) {
                    var type = model.get("_type"),
                        displayTitle,
                        title;
                    if (_.contains(hideTypes, type)) return false;

                    if (type == "component") {
                        var component = model.get("_component");
                        if (_.contains(hideComponents, component)) return false;
                    }

                    if (model.has("displayTitle")) displayTitle = model.get("displayTitle").replace(regularExpressions.trimReplaceWhitespace, "");
                    if (model.has("title")) title = model.get("title").replace(regularExpressions.trimReplaceWhitespace, "");

                    if (!displayTitle && !title) return false;

                    return true;
                });

                return filtered;
            }

            function getSearchableModels() {
                var adaptModels = combineAdaptModels();

                var searchable = [];
                for (var i = 0, l = adaptModels.length; i < l; i++) {
                    var model = adaptModels[i];
                    if (!isModelSearchable(model)) continue;
                    var json = model.toJSON();
                    var searchProfile = {
                        "_raw": recursivelyCollectModelTexts(json)
                    };
                    model.set("_searchProfile", searchProfile);
                    searchable.push(model);
                }

                return new Backbone.Collection(searchable);
            }

            function isModelSearchable(model) {
                var trail = model.getParents(true);
                var config = model.get("_search");
                if (config && config._isEnabled === false) return false;

                var firstDisabledTrailItem = trail.find(function (item) {
                    var config = item.get("_search");
                    if (!config) return false;
                    if (config && config._isEnabled !== false) return false;
                    return true;
                });
                return firstDisabledTrailItem === undefined;
            }

            function recursivelyCollectModelTexts(json, level) {
                var texts = [];
                for (var i = 0, l = searchAttributes.length; i < l; i++) {
                    var attributeObject = searchAttributes[i];
                    if (!json[attributeObject._attributeName]) continue;
                    switch (typeof json[attributeObject._attributeName]) {
                        case "object":
                            if (json[attributeObject._attributeName] instanceof Array) {
                                for (var sa = 0, sal = json[attributeObject._attributeName].length; sa < sal; sa++) {
                                    switch (typeof json[attributeObject._attributeName][sa]) {
                                        case "object":
                                            texts = texts.concat(recursivelyCollectModelTexts(json[attributeObject._attributeName][sa], attributeObject._level));
                                            break;
                                        case "string":
                                            addString(json[attributeObject._attributeName][sa], attributeObject._level, attributeObject);
                                    }
                                }
                            } else {
                                texts = texts.concat(recursivelyCollectModelTexts(json[attributeObject._attributeName], attributeObject._level));
                            }
                            break;
                        case "string":
                            addString(json[attributeObject._attributeName], level, attributeObject);
                            break;
                    }
                }
                return texts;

                function addString(string, level, attributeObject) {
                    var textLevel = level || attributeObject._level;
                    var text = $("<div>" + string.replace(regularExpressions.trimReplaceWhitespace, "") + "</div>").text();
                    text = text.replace(regularExpressions.trimReplaceWhitespace, "");
                    if (!text) return;
                    texts.push({
                        score: 1 / textLevel,
                        text: text,
                        searchAttribute: attributeObject
                    });
                }
            }

            return getSearchableModels();

        },

        makeModelTextProfiles: function () {
            // Handle _ignoreWords as a special case to support the authoring tool
            var ignoreWords = this.model.get('_ignoreWords') instanceof Array
                ? this.model.get("_ignoreWords")
                : this.model.get("_ignoreWords").split(',');

            var regularExpressions = this._regularExpressions;
            var searchAttributes = this.model.get("_searchAttributes");
            var minimumWordLength = this.model.get("_minimumWordLength");

            var scores = _.uniq(_.pluck(searchAttributes, "_level"));
            scores = _.map(scores, function (l) { return 1 / l; });

            for (var i = 0, l = this._searchableModels.models.length; i < l; i++) {
                var item = this._searchableModels.models[i];
                var profile = item.get("_searchProfile");
                makeModelPhraseProfile(profile);
                makeModelPhraseWordAndWordProfile(profile);
            }

            function makeModelPhraseProfile(profile) {
                profile._phrases = [];
                var phrases = _.groupBy(profile._raw, function (phrase) {
                    return phrase.text;
                });
                for (var p in phrases) {
                    var bestItem = _.max(phrases[p], function (item) {
                        return item.score;
                    });
                    profile._phrases.push({
                        searchAttribute: bestItem.searchAttribute,
                        phrase: bestItem.text,
                        score: bestItem.score,
                        words: []
                    });
                }
                return profile;
            }

            function makeModelPhraseWordAndWordProfile(profile) {
                profile._words = [];
                for (var l = 0, ll = scores.length; l < ll; l++) {
                    var score = scores[l];
                    var phrases = _.where(profile._phrases, { score: score });
                    var scoreWords = [];
                    for (var i = 0, pl = phrases.length; i < pl; i++) {
                        var phraseObject = phrases[i];
                        var chunks = phraseObject.phrase.match(regularExpressions.matchNotWordBoundaries);
                        var words = _.map(chunks, function (chunk) {
                            return chunk.replace(regularExpressions.trimReplaceNonWordCharacters, "");
                        });
                        phraseObject.words = _.countBy(words, function (word) { return word.toLowerCase(); });
                        phraseObject.words = _.omit(phraseObject.words, ignoreWords);
                        scoreWords = scoreWords.concat(words);
                    }
                    scoreWords = _.filter(scoreWords, function (word) { return word.length >= minimumWordLength; });
                    scoreWords = _.countBy(scoreWords, function (word) { return word.toLowerCase(); });
                    scoreWords = _.omit(scoreWords, ignoreWords);
                    for (var word in scoreWords) {
                        profile._words.push({
                            word: word,
                            score: score,
                            count: scoreWords[word]
                        });
                    }
                }
                return profile;
            }

        },

        indexTextProfiles: function () {

            this._wordIndex = {};

            for (var i = 0, il = this._searchableModels.models.length; i < il; i++) {
                var item = this._searchableModels.models[i];
                var id = item.get("_id");
                var searchProfile = item.get("_searchProfile");

                for (var w = 0, wl = searchProfile._words.length; w < wl; w++) {
                    var word = searchProfile._words[w].word;
                    if (Object.prototype.hasOwnProperty && !this._wordIndex.hasOwnProperty(word)) {
                        this._wordIndex[word] = [];
                    } else {
                        this._wordIndex[word] = this._wordIndex[word] || [];
                    }
                    this._wordIndex[word].push(id);
                }

            }

            for (var word in this._wordIndex) {
                this._wordIndex[word] = _.uniq(this._wordIndex[word]);
            }

        },

        find: function (findPhrase) {

            /*
            returns [
                    {
                        score: (float)score     = bestPhraseAttributeScore * (wordOccurencesInSection * frequencyMultiplier)
                        model: model,
                        foundWords: {
                            "foundWord": (int)occurencesInSection
                        },
                        foundPhrases: [
                            {
                                "score": (float)score   = (1/attributeLevel)
                                "phrase": "Test phrase",
                                "words": {
                                    "Test": (int)occurencesInPhrase,
                                    "phrase": (int)occurencesInPhrase
                                }
                            }
                        ]
                    }
                ];
            */

            var regularExpressions = this._regularExpressions;
            var wordIndex = this._wordIndex;
            // Handle _ignoreWords as a special case to support the authoring tool
            var ignoreWords = this.model.get('_ignoreWords') instanceof Array
                ? this.model.get("_ignoreWords")
                : this.model.get("_ignoreWords").split(',');
            var scoreQualificationThreshold = this.model.get("_scoreQualificationThreshold");
            var minimumWordLength = this.model.get("_minimumWordLength");
            var frequencyImportance = this.model.get("_frequencyImportance");
            var matchOn = this.model.get("_matchOn") || {};

            var json = this._searchableModels.toJSON();

            function getFindPhraseWords(findPhrase) {
                var findChunks = findPhrase.match(regularExpressions.matchNotWordBoundaries);
                var findWords = _.map(findChunks, function (chunk) {
                    return chunk.replace(regularExpressions.trimReplaceNonWordCharacters, "");
                });
                findWords = _.countBy(findWords, function (word) { return word.toLowerCase(); });
                findWords = _.omit(findWords, ignoreWords);
                findWords = _.omit(findWords, function (count, item) {
                    return item.length < minimumWordLength;
                });
                return findWords;
            }

            function getMatchingIdScoreObjects(findWords) {
                var matchingIdScoreObjects = {};

                for (var findWord in findWords) {
                    for (var indexWord in wordIndex) {
                        //allow only start matches on findWord beginning with indexWord i.e. find: oneness begins with index: one 
                        var rIndexWordBegins = new RegExp("^" + regularExpressions.escapeRegExp(indexWord), "g");
                        //allow all matches on indexWord containing findWord i.e. index: someone contains find: one, index: anti-money contains find: money
                        var rFindWordContains = new RegExp(regularExpressions.escapeRegExp(findWord), "g");
                        //allow only start matches on indexWord beginning with findWord i.e. find: one begins index: oneness
                        var rFindWordBegins = new RegExp("^" + regularExpressions.escapeRegExp(findWord), "g");

                        var isIndexBeginsMatch = matchOn._contentWordBeginsPhraseWord === false ? false : rIndexWordBegins.test(findWord);
                        var isFindContainsMatch = matchOn._contentWordContainsPhraseWord === false ? false : rFindWordContains.test(indexWord);
                        var isFindBeginsMatch = matchOn._phraseWordBeginsContentWord === false ? false : rFindWordBegins.test(indexWord);

                        var isFullMatch = matchOn._contentWordEqualsPhraseWord == false ? false : findWord == indexWord;
                        var isPartMatch = isIndexBeginsMatch || isFindContainsMatch || isFindBeginsMatch;

                        if (!isFullMatch && !isPartMatch) continue;

                        var partMatchRatio = 1;
                        if (isPartMatch && !isFullMatch) {
                            if (findWord.length > indexWord.length) partMatchRatio = indexWord.length / findWord.length;
                            else partMatchRatio = findWord.length / indexWord.length;
                        }

                        updateIdScoreObjectsForWord(matchingIdScoreObjects, indexWord, isFullMatch, partMatchRatio);

                    }
                }
                return _.values(matchingIdScoreObjects);
            }

            function updateIdScoreObjectsForWord(matchingIdScoreObjects, word, isFullMatch, partMatchRatio) {

                for (var i = 0, l = wordIndex[word].length; i < l; i++) {
                    var id = wordIndex[word][i];
                    var model = _.findWhere(json, { _id: id });

                    if (matchingIdScoreObjects[id] === undefined) {
                        matchingIdScoreObjects[id] = {
                            score: 0,
                            foundWords: {},
                            foundPhrases: null,
                            model: Adapt.findById(id)
                        };
                    }

                    if (matchingIdScoreObjects[id].foundWords[word] === undefined) matchingIdScoreObjects[id].foundWords[word] = 0;

                    var allPhraseWordRatingObjects = _.where(model._searchProfile._words, { word: word });
                    var wordFrequency = _.reduce(allPhraseWordRatingObjects, function (memo, item) { return memo + item.count; }, 0);
                    var wordFrequencyHitScore = _.reduce(allPhraseWordRatingObjects, function (memo, item) {
                        var frequencyBonus = (item.score * item.count) / frequencyImportance;
                        return memo + item.score + frequencyBonus;
                    }, 0);

                    matchingIdScoreObjects[id].foundWords[word] += wordFrequency;

                    if (isFullMatch) {
                        matchingIdScoreObjects[id].score += wordFrequencyHitScore;
                    } else {
                        matchingIdScoreObjects[id].score += wordFrequencyHitScore * partMatchRatio;
                    }
                }
            }

            function filterAndSortQualifyingMatches(matchingIdScoreObjects) {
                var allowedScoreObjects = _.filter(matchingIdScoreObjects, function (item) {
                    return isModelSearchable(item.model);
                });
                var qualifyingScoreThreshold = 1 / scoreQualificationThreshold;
                var qualifyingMatches = _.filter(allowedScoreObjects, function (item) {
                    //remove items which don't meet the score threshold
                    return item.score >= qualifyingScoreThreshold;
                });
                qualifyingMatches = _.sortBy(qualifyingMatches, function (item) {
                    //sort by highest score first
                    return 1 / item.score;
                });
                return qualifyingMatches;
            }

            function isModelSearchable(model) {
                var trail = model.getParents(true);
                var config = model.get("_search");
                if (config && config._isEnabled === false) return false;
                if (model.get("_isLocked")) return false;

                var firstDisabledTrailItem = trail.find(function (item) {
                    var config = item.get("_search");
                    if (item.get("_isLocked")) return true;
                    if (config && config._isEnabled === false) return true;
                    return false;
                });


                return (firstDisabledTrailItem === undefined);
            }

            function mapSearchPhrasesToMatchingWords(matchingIdScoreObjects) {
                for (var i = 0, l = matchingIdScoreObjects.length; i < l; i++) {
                    var matchingPhrases = [];
                    var scoreObject = matchingIdScoreObjects[i];
                    var foundWords = _.keys(scoreObject.foundWords);
                    var modelPhrases = scoreObject.model.get("_searchProfile")._phrases;
                    for (var p = 0, lp = modelPhrases.length; p < lp; p++) {
                        var modelPhrase = modelPhrases[p];
                        if (!modelPhrase.searchAttribute._allowTextPreview) continue;

                        if (_.intersection(foundWords, _.keys(modelPhrase.words)).length > 0) {
                            matchingPhrases.push(modelPhrase);
                        }
                    }
                    scoreObject.foundPhrases = matchingPhrases;
                }
            }

            var findWords = getFindPhraseWords(findPhrase);
            var matchingIdScoreObjects = getMatchingIdScoreObjects(findWords);
            mapSearchPhrasesToMatchingWords(matchingIdScoreObjects);
            var qualifyingMatchedScoreObjects = filterAndSortQualifyingMatches(matchingIdScoreObjects);

            return qualifyingMatchedScoreObjects;
        }

    }, Backbone.Events);


    search.initialize();

    window.search = search;

    return search;


});

define('extensions/adapt-search/js/searchResultsView',['require','backbone','core/js/adapt','./search-algorithm'],function(require){
    var Backbone = require('backbone');
    var Adapt = require('core/js/adapt');
    var SearchAlgorithm = require('./search-algorithm');

    var replaceTagsRegEx = /\<{1}[^\>]+\>/g;
    var replaceEscapedTagsRegEx = /&lt;[^&gt;]+&gt;/g;
    var replaceEndTagsRegEx = /\<{1}\/{1}[^\>]+\>/g;
    var replaceEscapedEndTagsRegEx = /&lt;\/[^&gt;]+&gt;/g;

    var SearchResultsView = Backbone.View.extend({

        className: 'search-results inactive',

        events: {
            "click [data-id]": "navigateToResultPage"
        },

        initialize: function(options) {
            this.listenTo(Adapt, {
                'drawer:empty': this.remove,
                'search:termsFiltered': this.updateResults
            });

            this.render();

            if(options.searchObject){
                this.updateResults(options.searchObject);
            }
        },

        render: function() {
            var template = Handlebars.templates['searchResults'];
            $(this.el).html(template());
            return this;
        },

        updateResults: function(searchObject) {
            this.$el.removeClass('inactive');
            var formattedResults = this.formatResults(searchObject);
            this.renderResults(formattedResults);
        },

        formatResults: function(searchObject) {
            var self = this;
            var resultsLimit = Math.min(5, searchObject.searchResults.length);

            var formattedResults = _.map(_.first(searchObject.searchResults, resultsLimit), function(result) {
                return self.formatResult(result);
            });

            searchObject.formattedResults = formattedResults;
            return searchObject;
        },

        formatResult: function(result) {
            var foundWords = _.keys(result.foundWords).join(" ");
            var title = result.model.get("title");
            var displayTitle = result.model.get("displayTitle");
            var body = result.model.get("body");
            var previewWords = this.model.get("_previewWords");
            var previewCharacters = this.model.get("_previewCharacters");
            var wordCharacters = search._regularExpressions.wordCharacters;

            //trim whitespace
            title = title.replace(SearchAlgorithm._regularExpressions.trimReplaceWhitespace, "");
            displayTitle = displayTitle.replace(SearchAlgorithm._regularExpressions.trimReplaceWhitespace, "");
            body = body.replace(SearchAlgorithm._regularExpressions.trimReplaceWhitespace, "");

            //strip tags
            title = this.stripTags(title);
            displayTitle = this.stripTags(displayTitle);
            body = this.stripTags(body);

            var searchTitle = "";
            var textPreview = "";

            //select title
            if (!title) {
                searchTitle = $("<div>"+displayTitle+"</div>").text() || "No title found";
            } else {
                searchTitle = $("<div>"+title+"</div>").text();
            }

            //select preview text
            if (result.foundPhrases.length > 0) {
                var finder;
                var phrase = result.foundPhrases[0].phrase;
                //strip tags
                phrase = this.stripTags(phrase);

                var lowerPhrase = phrase.toLowerCase();
                var lowerSearchTitle = searchTitle.toLowerCase();

                if (lowerPhrase == lowerSearchTitle && result.foundPhrases.length > 1) {
                    phrase = result.foundPhrases[1].phrase;
                    //strip tags
                    phrase = this.stripTags(phrase);
                    lowerPhrase = phrase.toLowerCase();
                }

                if (lowerPhrase == lowerSearchTitle) {
                    //if the search phrase and title are the same
                    finder = new RegExp("(([^"+wordCharacters+"]*["+wordCharacters+"]{1}){1,"+previewWords+"}|.{0,"+previewCharacters+"})", "i");
                    if (body) {
                        textPreview = body.match(finder)[0] + "...";
                    }
                } else {
                    var wordMap = _.map(result.foundWords, function(count, word) {
                        return { word: word, count: count};
                    });
                    _.sortBy(wordMap, function(item) {
                        return item.count;
                    });
                    var wordIndex = 0;
                    var wordInPhraseStartPosition = lowerPhrase.indexOf(wordMap[wordIndex].word);
                    while(wordInPhraseStartPosition == -1) {
                        wordIndex++;
                        if (wordIndex == wordMap.length) throw "search: cannot find word in phrase";
                        wordInPhraseStartPosition = lowerPhrase.indexOf(wordMap[wordIndex].word);
                    }
                    var regex = new RegExp("(([^"+wordCharacters+"]*["+wordCharacters+"]{1}){1,"+previewWords+"}|.{0,"+previewCharacters+"})"+SearchAlgorithm._regularExpressions.escapeRegExp(wordMap[wordIndex].word)+"((["+wordCharacters+"]{1}[^"+wordCharacters+"]*){1,"+previewWords+"}|.{0,"+previewCharacters+"})", "i");
                    var snippet = phrase.match(regex)[0];
                    var snippetIndexInPhrase = phrase.indexOf(snippet);
                    if (snippet.length == phrase.length) {
                        textPreview = snippet;
                    } else if (snippetIndexInPhrase === 0) {
                        textPreview = snippet + "...";
                    } else if (snippetIndexInPhrase + snippet.length == phrase.length) {
                        textPreview = "..." + snippet;
                    } else {
                        textPreview = "..." + snippet + "...";
                    }
                }

            } else {
                finder = new RegExp("(([^"+wordCharacters+"]*["+wordCharacters+"]{1}){1,"+previewWords+"}|.{0,"+previewCharacters+"})", "i");
                if (body) {
                    textPreview = body.match(finder)[0] + "...";
                }
            }

            var searchTitleTagged = tag(result.foundWords, searchTitle);
            var textPreviewTagged = tag(result.foundWords, textPreview);

            return {
                searchTitleTagged: searchTitleTagged,
                searchTitle: searchTitle,
                foundWords: foundWords,
                textPreview: textPreview,
                textPreviewTagged: textPreviewTagged,
                id: result.model.get('_id')
            };

            function tag(words, text) {
                var initial = "";
                 _.each(words, function(count, word) {
                    var wordPos = text.toLowerCase().indexOf(word);
                    if (wordPos < 0) return;
                    initial += text.slice(0, wordPos);
                    var highlighted = text.slice(wordPos, wordPos+word.length);
                    initial +="<span class='found'>"+highlighted+"</span>";
                    text = text.slice(wordPos+word.length, text.length);
                });
                initial+=text;
                return initial;
            }
        },

        stripTags: function (text) {
            text = $("<span>"+text+"</span>").html();
            return text
              .replace(replaceEndTagsRegEx, " ")
              .replace(replaceTagsRegEx, "")
              .replace(replaceEscapedEndTagsRegEx, " ")
              .replace(replaceEscapedTagsRegEx, "");
        },

        renderResults: function(results) {
            var template = Handlebars.templates['searchResultsContent'];
            this.$('.search-results-content').html(template(results));
        },

        navigateToResultPage: function(event) {
            event && event.preventDefault();
            var blockID = $(event.currentTarget).attr("data-id");

            Adapt.navigateToElement("." + blockID);
            Adapt.trigger('drawer:closeDrawer');
        }

    });

    return SearchResultsView;

});
/*
* adapt-search
* License - https://github.com/cgkineo/adapt-search/blob/master/LICENSE
* Maintainers - Gavin McMaster <gavin.mcmaster@kineo.com>
*/
define('extensions/adapt-search/js/adapt-search',[
    'core/js/adapt',
    './searchDrawerItemView',
    './searchResultsView',
    './search-algorithm'
], function(Adapt, SearchDrawerItemView, SearchResultsView, SearchAlgorithm){

    var lastSearchQuery = null;
    var lastSearchObject = null;
    var isSearchShown = false;

    var searchConfigDefault = {
        _previewWords: 15,
        _previewCharacters: 30,
        _showHighlights: true,
        _showFoundWords: true,
        title: "Search",
        description: "Type in search words",
        placeholder: "",
        noResultsMessage: "Sorry, no results were found",
        awaitingResultsMessage: "Formulating results..."
    };

    Adapt.on('search-algorithm:ready', function(){
        Adapt.course.set('_search', _.extend(searchConfigDefault, Adapt.course.get('_search')) );

        var searchConfig = Adapt.course.get('_search');
        searchConfig.title = searchConfig.title || 'search';
        searchConfig.description = searchConfig.description || 'description';

        var drawerObject = {
            title: searchConfig.title,
            description: searchConfig.description,
            className: 'search-drawer',
            drawerOrder: searchConfig._drawerOrder || 0
        };

        Adapt.drawer.addItem(drawerObject, 'resources:showSearch');
    });

    Adapt.on('resources:showSearch', function() {
        if (isSearchShown) return;

        var searchConfig = Adapt.course.get('_search');
        searchConfig = new Backbone.Model(searchConfig);

        var template = Handlebars.templates['searchSingleItem'];
        var $element = $(template(searchConfig.toJSON()));

        Adapt.drawer.triggerCustomView($element, true);

        Adapt.trigger("search:draw");

    });

    Adapt.on('drawer:openedItemView search:draw', function(){

        isSearchShown = true;

        var searchConfig = Adapt.course.get('_search');
        searchConfig = new Backbone.Model(searchConfig);

        var $searchDrawerButton = $(".search-drawer");

        if ($searchDrawerButton.is(":not(div)")) {
            var $replacementButton = $("<div></div>");
            $replacementButton.attr("class", $searchDrawerButton.attr("class"));
            $searchDrawerButton.children().appendTo($replacementButton);
            $searchDrawerButton.replaceWith($replacementButton);
        }

        if (lastSearchObject && lastSearchObject.searchResults && lastSearchObject.searchResults.length === 0) {
            lastSearchObject = null;
            lastSearchQuery = null;
        }

        $('.drawer-inner .search-drawer').append(new SearchDrawerItemView({model:searchConfig, query: lastSearchQuery}).el);
        $('.drawer-inner .search-drawer').append(new SearchResultsView({model:searchConfig, searchObject: lastSearchObject}).el);

    });

    Adapt.on('drawer:closed', function() {
        isSearchShown = false;
    });

    Adapt.on('search:filterTerms', function(query){
        var searchConfig = Adapt.course.get('_search');
        var searchObject;

        lastSearchQuery = query;

        if (query.length === 0) {

            searchObject = _.extend({}, searchConfig, {
                query: query,
                searchResults: [],
                isAwaitingResults: false,
                isBlank: true
            });

        } else if (query.length < searchConfig._minimumWordLength) {

            searchObject = _.extend({}, searchConfig, {
                query: query,
                searchResults: [],
                isAwaitingResults: true,
                isBlank: false
            });
        } else {

            var results = SearchAlgorithm.find(query);

            searchObject = _.extend({}, searchConfig, {
                query: query,
                searchResults: results,
                isAwaitingResults: false,
                isBlank: false
            });
        }

        lastSearchObject = searchObject;

        Adapt.trigger('search:termsFiltered', searchObject);
    });

    Adapt.once('drawer:noItems', function(){
        $('.navigation-drawer-toggle-button').removeClass('display-none');
    });

});

define('core/js/views/menuView',[
    'core/js/adapt',
    'core/js/views/adaptView'
], function(Adapt, AdaptView) {

    var MenuView = AdaptView.extend({

    	className: function() {
            var visible = "visibility-hidden";
            if (this.model.get('_isVisible')) {
                visible = "";
            }
    		return 'menu ' +
            'menu-' +
            this.model.get('_id') +
            " " + this.model.get('_classes') +
            " " + this.setVisibility() +
            " " + (this.model.get('_isComplete') ? 'completed' : '');
    	},

        preRender: function() {
            $.inview.lock('menuView');
            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
            this.$el.css('opacity', 0);
            this.listenTo(this.model, 'change:_isReady', this.isReady);
        },

        postRender: function() {
        },

        isReady: function() {
            if (!this.model.get('_isReady')) return;

            var performIsReady = function() {
                $('.loading').hide();
                $(window).scrollTop(0);
                Adapt.trigger('menuView:ready', this);
                $.inview.unlock('menuView');
                var styleOptions = { opacity: 1 };
                if (this.disableAnimation) {
                    this.$el.css(styleOptions);
                    $.inview();
                } else {
                    this.$el.velocity(styleOptions, {
                        duration: 'fast',
                        complete: function() {
                            $.inview();
                        }
                    });
                }
                $(window).scroll();
            }.bind(this);

            Adapt.wait.queue(function() {
                _.defer(performIsReady);
            });

        }

    }, {
        type:'menu'
    });

    return MenuView;

});

define('menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu',[
    'core/js/adapt',
    'core/js/views/menuView'
], function(Adapt, MenuView) {

    var BoxMenuView = MenuView.extend({

        className: function() {
            return MenuView.prototype.className.apply(this) + " boxmenu-menu";
        },

        attributes: function() {
            return MenuView.prototype.resultExtend('attributes', {
                'role': 'main',
                'aria-labelledby': this.model.get('_id')+'-heading'
            }, this);
        },

        postRender: function() {
            var nthChild = 0;
            this.model.getChildren().each(function(item) {
                if (item.get('_isAvailable') && !item.get('_isHidden')) {
                    item.set('_nthChild', ++nthChild);
                    this.$('.js-children').append(new BoxMenuItemView({model: item}).$el);
                }

                if(item.get('_isHidden')) {
                    item.set('_isReady', true);
                }
            });
        }

    }, {
        template: 'boxmenu'
    });

    var BoxMenuItemView = MenuView.extend({

        events: {
            'click button' : 'onClickMenuItemButton'
        },

        attributes: function() {
            return MenuView.prototype.resultExtend('attributes', {
                'role': 'listitem',
                'aria-labelledby': this.model.get('_id') + '-heading'
            }, this);
        },

        className: function() {
            var nthChild = this.model.get('_nthChild');
            return [
                'menu-item',
                'menu-item-' + this.model.get('_id') ,
                this.model.get('_classes'),
                this.model.get('_isVisited') ? 'visited' : '',
                this.model.get('_isComplete') ? 'completed' : '',
                this.model.get('_isLocked') ? 'locked' : '',
                'nth-child-' + nthChild,
                nthChild % 2 === 0 ? 'nth-child-even' : 'nth-child-odd'
            ].join(' ');
        },

        preRender: function() {
            this.model.checkCompletionStatus();
            this.model.checkInteractionCompletionStatus();
        },

        postRender: function() {
            var graphic = this.model.get('_graphic');
            if (graphic && graphic.src) {
                this.$el.imageready(this.setReadyStatus.bind(this));
                return;
            }

            this.setReadyStatus();
        },

        onClickMenuItemButton: function(event) {
            if(event && event.preventDefault) event.preventDefault();
            if(this.model.get('_isLocked')) return;
            Backbone.history.navigate('#/id/' + this.model.get('_id'), {trigger: true});
        }

    }, {
        template: 'boxmenu-item'
    });

    Adapt.on('router:menu', function(model) {

        $('#wrapper').append(new BoxMenuView({model: model}).$el);

    });

});

define('theme/adapt-contrib-vanilla/js/theme-block',['require','coreJS/adapt','backbone'],function(require) {
	
	var Adapt = require('coreJS/adapt');
	var Backbone = require('backbone');

	var ThemeBlockView = Backbone.View.extend({

		initialize: function() {
			this.setStyles();
			this.listenTo(Adapt, 'device:resize', this.setStyles);
			this.listenTo(Adapt, 'remove', this.remove);
		},

		setStyles: function() {
			this.setBackground();
			this.setMinHeight();
			this.setDividerBlock();
		},

		setBackground: function() {
			var backgroundColor = this.model.get('_themeBlockConfig')._backgroundColor;
			
			if (backgroundColor) {
				this.$el.addClass(backgroundColor);
			}
		},

		setMinHeight: function() {
			var minHeight = 0;
			var minHeights = this.model.get('_themeBlockConfig')._minimumHeights;

			if (minHeights) {

				if(Adapt.device.screenSize == 'large') {
					minHeight = minHeights._large;
				} else if (Adapt.device.screenSize == 'medium') {
					minHeight = minHeights._medium;
				} else {
					minHeight = minHeights._small;
				}
			}

			this.$el.css({
				minHeight: minHeight + "px"
			});
		},

		setDividerBlock: function() {
			var dividerBlock = this.model.get('_themeBlockConfig')._isDividerBlock;

			if (dividerBlock) {
				this.$el.addClass('divider-block');
			}
		}
	});

	return ThemeBlockView;
	
});

define('theme/5dc4e8b5eb456b062dccb6b0/js/esdc',['require','coreJS/adapt','backbone','theme/adapt-contrib-vanilla/js/theme-block'],function(require) {
	
	var Adapt = require('coreJS/adapt');
	var Backbone = require('backbone');
	var ThemeBlock = require('theme/adapt-contrib-vanilla/js/theme-block');

	// Block View
	// ==========

  Adapt.on('componentView:postRender', function (view) {
    var parentBlock = this.blocks._byAdaptID[view.model.get('_parentId')][0];

    if (window && window.innerWidth > 765) {
      if (view.model.get('_layout') === 'left') {
        var widthPercentage = parentBlock.get('componentWidthRatio');
        view.$el.css('width', `${widthPercentage}%`);
      }
      else if (view.model.get('_layout') === 'right') {
        var widthPercentage = 100 - parseInt(parentBlock.get('componentWidthRatio'));
        view.$el.css('width', `${widthPercentage}%`);
      }
    }
    else {
      if (view.model.get('_layout') === 'left' || view.model.get('_layout') === 'right') {
        view.$el.css('width', `${100}%`);
      }
    }
  });

	Adapt.on('blockView:postRender', function(view) {
		var theme = view.model.get('_theme');
		
		if (theme) {
			new ThemeBlock({
				model: new Backbone.Model({
					_themeBlockConfig: theme
				}),
				el: view.$el
			});
		}
	});
});

;
define("plugins", ["components/adapt-contrib-narrative/js/adapt-contrib-narrative","components/adapt-esdc-tour/js/adapt-esdc-tour","extensions/Adapt-accessibilityfixes/js/adapt-mathJax","extensions/Adapt-accessibilitystatement/js/adapt-loader","extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking","extensions/adapt-contrib-glossary/js/adapt-contrib-glossary","extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress","extensions/adapt-contrib-resources/js/adapt-contrib-resources","extensions/adapt-contrib-spoor/js/adapt-contrib-spoor","extensions/adapt-contrib-tutor/js/adapt-contrib-tutor","extensions/adapt-esdc-i18n/js/adapt-esdc-i18n","extensions/adapt-homeButton/js/adapt-homeButton","extensions/adapt-pageIncompletePrompt/js/adapt-pageIncompletePrompt","extensions/adapt-search/js/adapt-search","menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu","theme/5dc4e8b5eb456b062dccb6b0/js/esdc"], function(){});

require([
    'core/js/adapt',
    'core/js/accessibility',
    'core/js/data',
    'core/js/offlineStorage',
    'core/js/logging',
    'core/js/tracking',
    'core/js/device',
    'core/js/drawer',
    'core/js/notify',
    'core/js/router',
    'core/js/models/lockingModel',
    'core/js/helpers',
    'core/js/scrolling',
    'core/js/headings',
    'core/js/navigation',
    'plugins'
], function (Adapt) {

    $('body').append(Handlebars.templates.loading());

    Adapt.data.on('ready', function triggerInit() {
        Adapt.log.debug('Calling Adapt.init');

        Adapt.init();

        Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');
    }).init();

});

define("core/js/app", function(){});

